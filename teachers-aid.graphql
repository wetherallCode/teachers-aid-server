### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AcademicOrganizer {
  academicSentenceStructure: AcademicSentenceStructure!
  answerType: AnswerTypes
  conclusion: String!
  questionType: QuestionTypeEnum
  restatement: String!
}

enum AcademicOutcomeTypes {
  CAUSE_AND_EFFECT_RECOGNITION
  LOGIC_BUILDING
  SCHEMA_BUIDING
  SOCRATIC_QUESTIONS
}

type AcademicSentenceStructure {
  object: String
  subject: String!
  verb: String!
}

input AcademicSentenceStructureInput {
  object: String
  subject: String!
  verb: String!
}

input AddCourseToTeacherInput {
  courseId: ID!
  teacherId: ID!
}

type AddCourseToTeacherPayload {
  teacher: Teacher!
}

input AddNewChapterInput {
  chapterNumber: Int!
  chapterTitle: String!
  textTitle: String!
}

type AddNewChapterPayload {
  chapter: Chapter!
}

input AddNewTextInput {
  ownerId: ID!
  textTitle: String!
}

type AddNewTextPayload {
  text: Text!
}

input AddStudentsToCourseInput {
  courseId: ID!
  studentIds: [ID!]!
}

type AddStudentsToCoursePayload {
  students: [Student!]!
}

input AddUserEmailInput {
  email: String
  userId: ID!
}

type AddUserEmailPayload {
  user: User!
}

input AddVocabWordInput {
  _id: ID!
  definition: String!
  position: Int!
  word: String!
}

type AddVocabWordPayload {
  textSection: TextSection!
}

type AdvancedOrganizer {
  advancedSentenceStructure: AdvancedSentenceStructure!
  answerType: AnswerTypes
  conclusion: String!
  questionType: QuestionTypeEnum
  restatement: String!
}

type AdvancedSentenceStructure {
  object: String
  subject: String!
  verb: String!
}

input AdvancedSentenceStructureInput {
  object: String
  subject: String!
  verb: String!
}

union AnswerTypes = HowCauseEffectAnswerType | ProblemSolutionAnswerType | WhyCauseEffectAnswerType

type ArticleReview {
  _id: ID
  articleAuthor: String!
  articleLink: String!
  articleTitle: String!
  assigned: Boolean!
  assignedDate: String!
  bias: Boolean
  completed: Boolean!
  dueDate: String!
  dueTime: String!
  exempt: Boolean!
  hasAssigner: Teacher!
  hasOwner: Student!
  issue: String!
  late: Boolean!
  markingPeriod: MarkingPeriodEnum!
  paperBased: Boolean!
  publishedDate: String
  returned: Boolean!
  score: Score!
  solutions: String
  submitted: Boolean!
  topicsImportance: String!
}

input AssessIndividualProtocolsInput {
  assessment: ProtocolAssessmentEnum
  markingPeriod: MarkingPeriodEnum!
  protocolId: ID!
}

type AssessIndividualProtocolsPayload {
  protocol: Protocol!
}

input AssessStudentProtocolInput {
  assessment: ProtocolAssessmentEnum
  assignedDate: String
  discussionLevel: DiscussionTypesEnum
  markingPeriod: MarkingPeriodEnum!
  partnerIds: [ID!]
  protocolActivityType: ProtocolActivityTypes!
  studentId: ID!
  task: String!
}

type AssessStudentProtocolPayload {
  protocols: [Protocol!]!
}

input AssignEssaysInput {
  assignedDate: Date!
  associatedLessonId: ID!
  dueDate: Date!
  studentIds: [ID!]!
}

type AssignEssaysPayload {
  essays: [Essay!]!
}

interface Assignment {
  _id: ID
  assigned: Boolean!
  assignedDate: String!
  associatedLessonId: ID
  dueDate: String!
  dueTime: String!
  exempt: Boolean!
  hasAssigner: Teacher!
  hasOwner: Student!
  late: Boolean!
  lessonInfo: Lesson!
  markingPeriod: MarkingPeriodEnum!
  paperBased: Boolean!
  readings: Readings!
  score: Score!
}

input AssignReadingGuidesInput {
  assignedDate: Date!
  associatedLessonId: ID!
  dueDate: Date!
  studentIds: [ID!]!
}

type AssignReadingGuidesPayload {
  readingGuides: [ReadingGuide!]!
}

input AssignSeatsInput {
  cohortBasedSeating: Boolean!
  courseId: ID!
  seat: StudentSeatInput
}

type AssignSeatsPayload {
  courseInfo: CourseInfo!
}

enum BasicQuestionEnum {
  HOW
  WHY
}

input BuildRubricEntryInput {
  entry: String!
  howToImprove: String
  rubricSection: RubricSectionEnum!
  rubricWritingLevels: [WritingLevelEnum!]!
  score: Int!
}

type BuildRubricEntryPayload {
  rubricEntry: RubricEntry!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
  userName: String!
}

type ChangePasswordPayload {
  user: User!
}

input ChangeVocabWordInput {
  _id: ID!
  definition: String!
  newDefinition: String!
  newWord: String!
  word: String!
}

type Chapter {
  _id: ID
  chapterNumber: Int!
  chapterTitle: String!
  fromText: Text!
  hasSections: TextSection!
}

type ComprehensionMetrics implements ProgressMetrics {
  _id: ID
  comprehensionLevel: Int!
  student: Student!
}

type ContactInfo {
  guardianEmail: String!
  guardianFirstName: String!
  guardianLastName: String!
  guardianPhone: String!
}

enum ContactTypeEnum {
  EMAIL
  PHONE
  VIDEO
}

input ControlCoolDownInput {
  isActive: Boolean!
  lessonId: ID!
}

type ControlCoolDownPayload {
  lesson: Lesson!
}

input ControlWarmUpInput {
  isActive: Boolean!
  lessonId: ID!
}

type ControlWarmUpPayload {
  lesson: Lesson!
}

type Course {
  _id: ID
  hasCourseInfo: CourseInfo
  hasLessons: [Lesson!]!
  hasSignInSheets: [StudentSignInSheet!]!
  hasStudents: [Student!]!
  hasTeacher: Teacher!
  name: String!
}

type CourseInfo {
  _id: ID
  assignedSeats: [StudentSeat!]!
  cohortBasedSeating: Boolean!
  course: Course!
  courseType: CourseTypeEnum!
  endsAt: String!
  halfDayEndsAt: String!
  halfDayStartsAt: String!
  hasTeacher: Teacher!
  schoolDayType: SchoolDayType!
  startsAt: String!
}

input CourseInput {
  _id: ID!
  name: String
}

enum CourseMaxSizeEnum {
  THIRTY
  THIRTY_SIX
  TWELVE
  TWENTY_FOUR
}

enum CourseTypeEnum {
  ENGLISH_LANGUAGE_ARTS
  MATH
  RELATED_ARTS
  SCIENCE
  SOCIAL_STUDIES
}

input CreateAbsenceInput {
  dayAbsent: Date!
  markingPeriod: MarkingPeriodEnum!
  studentId: String!
}

type CreateAbsencePayload {
  studentAbsence: StudentAbsence!
}

input CreateArticleReviewsInput {
  assignedCourseId: [ID!]!
  assignedDate: String!
  dueDate: String!
  dueTime: TimeOfDay!
  hasAssignerId: String!
  markingPeriod: MarkingPeriodEnum!
}

type CreateArticleReviewsPayload {
  articleReviews: [ArticleReview!]!
}

input CreateCourseInfoInput {
  cohortBasedSeating: Boolean!
  courseId: ID!
  courseMaxSize: CourseMaxSizeEnum!
  courseType: CourseTypeEnum!
  endsAt: String!
  halfDayEndsAt: String!
  halfDayStartsAt: String!
  schoolDayType: SchoolDayType!
  startsAt: String!
}

type CreateCourseInfoPayload {
  courseInfo: CourseInfo!
}

input CreateCourseInput {
  name: String!
}

type CreateCoursePayload {
  course: Course!
}

input CreateEssayInput {
  assignedCourseId: [ID!]!
  assignedDate: String!
  associatedLessonId: ID!
  dueDate: String!
  dueTime: TimeOfDay!
  hasAssignerId: String!
  markingPeriod: MarkingPeriodEnum!
  maxPoints: Int!
  readings: ReadingsInput!
  topicList: [TopicInput!]!
}

type CreateEssayPayload {
  essays: [Essay!]!
}

input CreateExcusedLatenessInput {
  dayLateExcused: Date!
  markingPeriod: MarkingPeriodEnum!
  studentId: ID!
}

type CreateExcusedLatenessPayload {
  excusedLateness: ExcusedLateness!
}

input CreateLessonInput {
  afterActivity: TextSectionProtocolsInput!
  assignedCourses: [ID!]!
  assignedDate: Date!
  assignedMarkingPeriod: MarkingPeriodEnum!
  assignedSectionIdList: [ID!]!
  assignedSections: LessonTextSectionsInput!
  beforeActivity: TextSectionProtocolsInput!
  duringActivities: [TextSectionProtocolsInput!]!
  essentialQuestion: String!
  inUnit: ID!
  lessonName: String!
  pageNumbers: PageNumbersInput!
  questionList: [TextSectionQuestionsInput!]!
  vocabList: [TextSectionVocabInput!]!
}

type CreateLessonPayload {
  lessons: [Lesson!]!
}

input CreateParentContactInput {
  contactType: ContactTypeEnum!
  contentOfContact: String!
  date: String!
  studentId: ID!
  teacherId: ID!
}

type CreateParentContactPayload {
  parentContact: ParentContact!
}

input CreateProtocolInput {
  academicOutcomeType: AcademicOutcomeTypes!
  markingPeriod: MarkingPeriodEnum!
  protocolActivityType: ProtocolActivityTypes!
  studentIds: [ID!]!
  task: String!
}

type CreateProtocolPayload {
  protocols: [Protocol!]!
}

input CreateReadingGuideInput {
  assignedCourseIds: [ID!]!
  assignedDate: String!
  associatedLessonId: ID!
  dueDate: String!
  dueTime: TimeOfDay!
  hasAssignerId: String!
  markingPeriod: MarkingPeriodEnum!
  maxPoints: Int!
  readings: ReadingsInput!
}

type CreateReadingGuidePayload {
  readingGuides: [ReadingGuide!]!
}

input CreateResponsibilityPointsInput {
  courseId: ID!
  markingPeriod: MarkingPeriodEnum!
  studentIds: [ID!]!
}

type CreateResponsibilityPointsPayload {
  responsibilityPoints: [ResponsibilityPoints!]!
}

input CreateSchoolDayInput {
  cohortWeek: StudentCohortEnum!
  currentSchoolDayType: SchoolDayType!
  schoolDayCount: Int!
}

type CreateSchoolDayPayload {
  schoolDay: SchoolDay!
}

type CreateSchoolDayTrackerPayload {
  schoolDayTracker: SchoolDayTracker!
}

input CreateSignInSheetsInput {
  courseIds: [ID!]!
  todaysDate: String!
}

type CreateSignInSheetsPayload {
  schoolDay: SchoolDay!
}

input CreateStudentQuestionInput {
  courseId: ID!
  question: String!
  studentId: ID!
}

type CreateStudentQuestionPayload {
  studentQuestions: StudentQuestions!
}

input CreateStudentQuestionsContainerInput {
  associatedSchoolDayId: ID!
  courseId: ID!
  date: String!
}

type CreateStudentQuestionsContainerPayload {
  studentQuestions: StudentQuestions!
}

input CreateTemporaryTasksInput {
  courseId: ID!
  dateIssued: String!
  markingPeriod: MarkingPeriodEnum!
  taskNumber: Int!
}

type CreateTemporaryTasksPayload {
  temporaryTasks: [TemporaryTask!]!
}

input CreateTextSectionInput {
  fromChapterId: String!
  hasProtocols: [TextSectionProtocolsInput!]!
  hasQuestions: [TextSectionQuestionsInput!]!
  hasVocab: [TextSectionVocabInput!]!
  header: String!
  pageNumbers: PageNumbersInput!
}

type CreateTextSectionPayload {
  textSection: TextSection!
}

input CreateUnexcusedLatenessInput {
  dayLate: Date!
  markingPeriod: MarkingPeriodEnum!
  studentId: ID!
}

type CreateUnexcusedLatenessPayload {
  unexcusedLateness: UnexcusedLateness!
}

input CreateUnitInput {
  unitName: String!
}

type CreateUnitPayload {
  unit: Unit!
}

scalar Date

scalar DateTime

input DeleteReviewsInput {
  assignedDate: String!
}

type DeleteReviewsPayload {
  removed: Boolean!
}

input DeleteTemporaryTasksInput {
  courseId: ID!
  dateIssued: String!
  taskNumber: Int!
}

type DeleteTemporaryTasksPayload {
  removed: Boolean!
}

type DevelopingOrganizer {
  answer: String!
  basicQuestionType: BasicQuestionEnum
  conclusion: String!
  developingSentenceStructure: DevelopingSentenceStructure!
  restatement: String!
}

input DevelopingOrganizerInput {
  answer: String!
  conclusion: String!
  questionType: String!
  restatement: String!
  sentenceStructure: String!
}

type DevelopingSentenceStructure {
  subject: String!
  verb: String!
}

input DevelopingSentenceStructureInput {
  subject: String!
  verb: String!
}

enum DiscussionTypesEnum {
  DISCUSSED
  NOT_REQUIRED
  SOME_DISCUSSION
  THOROUGHLY_DISCUSSED
}

enum DynamicLessonEnums {
  EXIT_ACTIVITY
  LESSON_DETAILS
  OFF
  ON
  PROTOCOLS
  VOCAB
  WARM_UP
}

type Essay implements Assignment {
  _id: ID
  assigned: Boolean!
  assignedDate: String!
  associatedLessonId: ID
  dueDate: String!
  dueTime: String!
  exempt: Boolean!
  finalDraft: FinalDraftContainer
  hasAssigner: Teacher!
  hasOwner: Student!
  late: Boolean!
  lessonInfo: Lesson!
  leveledUp: Boolean!
  markingPeriod: MarkingPeriodEnum!
  paperBased: Boolean!
  readings: Readings!
  score: Score!
  topic: Topic!
  workingDraft: WorkingDraft!
}

type ExcusedLateness {
  _id: ID
  dayLateExcused: Date!
  markingPeriod: MarkingPeriodEnum!
  student: Student!
}

input ExemptArticleReviewInput {
  articleReviewId: ID!
}

type ExemptArticleReviewPayload {
  articleReview: ArticleReview!
}

type FinalDraftContainer {
  returned: Boolean!
  submitted: Boolean!
  submittedFinalDraft: [SubmittedFinalDraft!]!
  submitTime: DateTime
}

input FindActiveProtocolByStudentInput {
  studentId: ID!
}

type FindActiveProtocolByStudentPayload {
  protocol: Protocol!
}

input FindActiveProtocolsByCourseInput {
  courseId: ID!
}

type FindActiveProtocolsByCoursePayload {
  protocols: [Protocol!]!
}

type FindAllStudentsPayload {
  students: [Student!]!
}

type FindAllUsersPayload {
  users: [User!]!
}

input FindArticleReviewByIdInput {
  articleReviewId: ID!
}

type FindArticleReviewByIdPayload {
  articleReview: ArticleReview!
}

input FindArticleReviewsByCourseInput {
  courseId: ID!
  markingPeriod: MarkingPeriodEnum
}

type FindArticleReviewsByCoursePayload {
  articleReviews: [ArticleReview!]!
}

input FindArticleReviewsByStudentInput {
  markingPeriod: MarkingPeriodEnum!
  studentId: ID!
}

type FindArticleReviewsByStudentPayload {
  articleReviews: [ArticleReview!]!
}

input FindAssignmentByIdInput {
  assignmentId: ID!
}

type FindAssignmentByIdPayload {
  assignment: Assignment!
}

input FindAssignmentByStudentIdInput {
  studentId: ID!
}

type FindAssignmentByStudentIdPayload {
  articleReviews: [ArticleReview!]!
  assignments: [Assignment!]!
}

input FindAssignmentsToGradeInput {
  teacherUserName: String!
}

type FindAssignmentsToGradePayload {
  assignments: [Assignment!]!
}

input FindChaptersInTextInput {
  textTitle: String!
}

type FindChaptersInTextPayload {
  chapters: [Chapter!]!
}

input FindChapterTitleInput {
  chapter_id: ID!
}

type FindChapterTitlePayload {
  chapter: Chapter!
}

input FindCompletedEssaysByStudentIdInput {
  studentId: ID!
}

type FindCompletedEssaysByStudentIdPayload {
  essays: [Essay!]!
}

input FindContactsByStudentIdInput {
  studentId: ID!
}

type FindContactsByStudentIdPayload {
  parentContacts: [ParentContact!]!
}

input FindCourseByIdInput {
  courseId: ID!
}

type FindCourseByIdPayload {
  course: Course!
}

input FindCourseInfoByCourseIdInput {
  courseId: ID!
}

type FindCourseInfoByCourseIdPayload {
  courseInfo: CourseInfo!
}

input FindCoursesByIdInput {
  _ids: [ID!]!
}

type FindCoursesByIdPayload {
  courses: [Course!]!
}

type FindCurrentMarkingPeriodPayload {
  markingPeriod: MarkingPeriod!
}

input FindEssayByIdInput {
  _id: ID!
}

type FindEssayByIdPayload {
  essay: Essay!
}

input FindEssayByStudentIdAndLessonIdInput {
  lessonId: ID
  studentId: ID!
}

type FindEssayByStudentIdAndLessonIdPayload {
  essay: Essay!
}

input FindEssaysByAssociatedLessonIdAndCourseIdInput {
  courseId: ID!
  lessonId: ID!
}

type FindEssaysByAssociatedLessonIdAndCourseIdPayload {
  essays: [Essay!]!
}

input FindEssaysByAssociatedLessonIdInput {
  associatedLessonId: ID!
}

type FindEssaysByAssociatedLessonIdPayload {
  essays: [Essay!]!
}

input FindEssaysByUserNameAndMarkingPeriodInput {
  markingPeriod: MarkingPeriodEnum!
  userName: String!
}

type FindEssaysByUserNameAndMarkingPeriodPayload {
  essay: [Essay!]
}

input FindEssaysToCompleteByStudentIdInput {
  studentId: ID!
}

type FindEssaysToCompleteByStudentIdPayload {
  essays: [Essay!]!
}

input FindEssaysToGradeByIdInput {
  teacherId: ID!
}

type FindEssaysToGradeByIdPayload {
  essays: [Essay!]!
}

input FindLessonByCourseAndDateInput {
  courseId: ID!
  lessonDate: Date!
}

type FindLessonByCourseAndDatePayload {
  lesson: Lesson
}

input FindLessonByCourseInput {
  courseId: ID!
}

type FindLessonByCoursePayload {
  lessons: [Lesson!]!
}

input FindLessonByIdInput {
  _id: ID!
}

type FindLessonByIdPayload {
  lesson: Lesson!
}

input FindLessonsByAssignedDateInput {
  assignedDate: String!
}

type FindLessonsByAssignedDatePayload {
  lessons: [Lesson!]
}

input FindLessonsByUnitInput {
  courseId: ID!
  unitId: ID!
}

type FindLessonsByUnitPayload {
  lessons: [Lesson!]!
}

input FindParentContactsByTeacherIdInput {
  teacherId: ID!
}

type FindParentContactsByTeacherIdPayload {
  parentContacts: [ParentContact!]!
}

input FindReadingGuideByIdInput {
  readingGuideId: ID!
}

type FindReadingGuideByIdPayload {
  readingGuide: ReadingGuide!
}

input FindReadingGuidesByAssociatedLessonAndCourseIdInput {
  courseId: ID!
  lessonId: ID!
}

type FindReadingGuidesByAssociatedLessonAndCourseIdPayload {
  readingGuides: [ReadingGuide!]!
}

input FindReadingGuidesByCourseIdAndAssignedDateInput {
  assignedDate: String
  courseId: ID!
}

type FindReadingGuidesByCourseIdAndAssignedDatePayload {
  readingGuides: [ReadingGuide!]!
}

input FindReadingGuidesToCompleteByStudentIdInput {
  studentId: ID!
}

type FindReadingGuidesToCompleteByStudentIdPayload {
  readingGuides: [ReadingGuide!]!
}

input FindResponsibilityPointsByCourseInput {
  courseId: ID!
}

type FindResponsibilityPointsByCoursePayload {
  responsibilityPointList: [ResponsibilityPoints!]!
}

input FindResponsibilityPointsByStudentIdInput {
  studentId: ID!
}

type FindResponsibilityPointsByStudentIdPayload {
  responsibilityPoints: [ResponsibilityPoints!]!
}

input FindRubricEntriesByCategoryInput {
  rubricWritingLevel: WritingLevelEnum!
}

type FindRubricEntriesByCategoryPayload {
  rubricEntries: [RubricEntry!]!
}

type FindRubricEntriesPayload {
  rubricEntries: [RubricEntry!]!
}

input FindSchoolDayByDateInput {
  date: Date!
}

type FindSchoolDayByDatePayload {
  schoolDay: SchoolDay
}

type FindSchoolDayPayload {
  schoolDayTracker: SchoolDayTracker!
}

input FindStudentByIdInput {
  studentId: ID!
}

type FindStudentByIdPayload {
  student: Student!
}

input FindStudentQuestionsInput {
  courseId: ID!
  date: String!
}

type FindStudentQuestionsPayload {
  studentQuestions: [StudentQuestion!]!
}

input FindStudentsByCourseInput {
  courseId: ID!
}

type FindStudentsByCoursePayload {
  students: [Student!]!
}

input FindStudentsByIdInput {
  studentIds: [ID!]!
}

type FindStudentsByIdPayload {
  students: [Student!]!
}

input FindTemporaryTasksByStudentIdInput {
  studentId: ID!
}

type FindTemporaryTasksByStudentIdPayload {
  temporaryTasks: [TemporaryTask!]!
}

input FindTemporaryTasksInput {
  courseId: ID!
  dateIssued: String!
}

type FindTemporaryTasksPayload {
  temporaryTasks: [TemporaryTask!]!
}

input FindTextByTitleInput {
  title: String
}

type FindTextByTitlePayload {
  text: Text!
}

input FindTextSectionByIdInput {
  _id: ID!
}

type FindTextSectionByIdPayload {
  textSection: TextSection!
}

input FindTextSectionsByChapterInput {
  fromChapterId: ID!
}

type FindTextSectionsByChapterPayload {
  textSections: [TextSection!]!
}

input FindTextSectionsByIdInput {
  _ids: [ID!]!
}

type FindTextSectionsByIdPayload {
  textSections: [TextSection!]!
}

type FindTextsPayload {
  texts: [Text!]!
}

type FindUnitsPayload {
  units: [Unit!]!
}

input FindUserDataInput {
  _id: ID!
}

type FindUserDataPayload {
  user: User!
}

input FindWritingMetricsInput {
  studentId: ID!
}

type FindWritingMetricsPayload {
  writingMetrics: WritingMetrics!
}

input FinishProtocolInput {
  assignedDate: Date!
  lessonId: ID!
  studentIds: [ID!]!
  task: String!
}

type FinishProtocolPayload {
  protocols: [Protocol!]!
}

input GradeArticleReviewInput {
  articleReviewId: ID!
  earnedPoints: Int!
}

type GradeArticleReviewPayload {
  articleReview: ArticleReview!
}

input GradeTemporaryTaskInput {
  _id: ID!
  answered: Boolean!
  lastGrade: Float!
  responsibilityPoints: Float!
}

type GradeTemporaryTaskPayload {
  temporaryTask: TemporaryTask!
}

input HasAssigner {
  assignerUserName: String
}

input HasOwnerInput {
  ownerUserName: String
}

type HowCauseEffectAnswerType {
  after: String!
  before: String!
  cause: String!
}

type HowCauseEffectMetrics {
  howCauseEffectLevel: WritingLevelEnum!
  levelPoints: Int!
}

type HowProblemSolutionMetrics {
  howProblemSolutionLevel: WritingLevelEnum!
  levelPoints: Int!
}

enum InformationStructureEnum {
  CAUSE_EFFECT
  COMPARE_CONTRAST
  PROBLEM_SOLUTION
  SEQUENCE
}

input InitializeStudentsInput {
  courseId: ID!
  studentIds: [ID!]!
}

type InitializeStudentsPayload {
  students: [Student!]!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Lesson {
  _id: ID
  afterActivity: TextSectionProtocols!
  assignedCourses: [Course!]!
  assignedDate: Date!
  assignedMarkingPeriod: MarkingPeriodEnum!
  assignedSectionIdList: [ID!]!
  assignedSections: LessonTextSections!
  beforeActivity: TextSectionProtocols!
  duringActivities: [TextSectionProtocols!]!
  dynamicLesson: DynamicLessonEnums!
  essentialQuestion: String!
  inUnit: Unit!
  lessonName: String!
  lessonNotes: [String!]
  objectives: String
  pageNumbers: PageNumbers!
  questionList: [TextSectionQuestions!]!
  vocabList: [TextSectionVocab!]!
}

type LessonTextSections {
  endingSection: String!
  startingSection: String!
}

input LessonTextSectionsInput {
  endingSection: String!
  startingSection: String!
}

input LoginInput {
  password: String!
  userName: String!
}

type LoginPayload {
  user: User!
}

type MarkAllProtocolsInactivePayload {
  inactive: Boolean!
}

type MarkingPeriod {
  _id: ID
  currentMarkingPeriod: MarkingPeriodEnum!
}

enum MarkingPeriodEnum {
  FIRST
  FOURTH
  SECOND
  THIRD
}

input MarkTemporaryTaskAbsentInput {
  studentPresent: Boolean
  taskId: ID!
}

type MarkTemporaryTaskAbsentPayload {
  temporaryTask: TemporaryTask!
}

type Mutation {
  addCourseToTeacher(input: AddCourseToTeacherInput!): AddCourseToTeacherPayload!
  addNewChapter(input: AddNewChapterInput!): AddNewChapterPayload!
  addNewText(input: AddNewTextInput!): AddNewTextPayload!
  addStudentsToCourse(input: AddStudentsToCourseInput!): AddStudentsToCoursePayload!
  addUserEmail(input: AddUserEmailInput!): AddUserEmailPayload!
  addVocabWord(input: AddVocabWordInput!): AddVocabWordPayload!
  assessIndividualProtocols(input: AssessIndividualProtocolsInput!): AssessIndividualProtocolsPayload!
  assessStudentProtocol(input: AssessStudentProtocolInput!): AssessStudentProtocolPayload!
  assignEssays(input: AssignEssaysInput!): AssignEssaysPayload!
  assignReadingGuides(input: AssignReadingGuidesInput!): AssignReadingGuidesPayload!
  assignSeats(input: AssignSeatsInput!): AssignSeatsPayload!
  buildRubricEntry(input: BuildRubricEntryInput!): BuildRubricEntryPayload!
  changePassword(input: ChangePasswordInput!): ChangePasswordPayload!
  changeVocabWord(input: ChangeVocabWordInput!): UpdateVocabPayload!
  controlCoolDown(input: ControlCoolDownInput!): ControlCoolDownPayload!
  controlWarmUp(input: ControlWarmUpInput!): ControlWarmUpPayload!
  createAbsence(input: CreateAbsenceInput!): CreateAbsencePayload!
  createArticleReviews(input: CreateArticleReviewsInput!): CreateArticleReviewsPayload!
  createCourse(input: CreateCourseInput!): CreateCoursePayload!
  createCourseInfo(input: CreateCourseInfoInput!): CreateCourseInfoPayload!
  createEssay(input: CreateEssayInput!): CreateEssayPayload!
  createExcusedLateness(input: CreateExcusedLatenessInput!): CreateExcusedLatenessPayload!
  createLesson(input: CreateLessonInput!): CreateLessonPayload!
  createParentContact(input: CreateParentContactInput!): CreateParentContactPayload!
  createProtocol(input: CreateProtocolInput!): CreateProtocolPayload!
  createReadingGuide(input: CreateReadingGuideInput!): CreateReadingGuidePayload!
  createResponsibilityPoints(input: CreateResponsibilityPointsInput!): CreateResponsibilityPointsPayload!
  createSchoolDay(input: CreateSchoolDayInput!): CreateSchoolDayPayload!
  createSchoolDayTracker: CreateSchoolDayTrackerPayload!
  createSignInSheets(input: CreateSignInSheetsInput!): CreateSignInSheetsPayload!
  createStudentQuestion(input: CreateStudentQuestionInput!): CreateStudentQuestionPayload!
  createStudentQuestionsContainer(input: CreateStudentQuestionsContainerInput!): CreateStudentQuestionsContainerPayload!
  createTemporaryTasks(input: CreateTemporaryTasksInput!): CreateTemporaryTasksPayload!
  createTextSection(input: CreateTextSectionInput!): CreateTextSectionPayload!
  createUnexcusedLateness(input: CreateUnexcusedLatenessInput!): CreateUnexcusedLatenessPayload!
  createUnit(input: CreateUnitInput!): CreateUnitPayload!
  deleteReviews(input: DeleteReviewsInput!): DeleteReviewsPayload!
  deleteTemporaryTasks(input: DeleteTemporaryTasksInput!): DeleteTemporaryTasksPayload!
  exemptArticleReview(input: ExemptArticleReviewInput!): ExemptArticleReviewPayload!
  finishProtocol(input: FinishProtocolInput!): FinishProtocolPayload!
  gradeArticleReview(input: GradeArticleReviewInput!): GradeArticleReviewPayload!
  gradeTemporaryTask(input: GradeTemporaryTaskInput!): GradeTemporaryTaskPayload!
  initializeStudents(input: InitializeStudentsInput!): InitializeStudentsPayload!
  login(input: LoginInput!): LoginPayload!
  logout: Boolean!
  markAllProtocolsInactive: MarkAllProtocolsInactivePayload!
  registerStudent(input: RegisterStudentInput!): RegisterStudentPayload!
  registerTeacher(input: RegisterTeacherInput!): RegisterTeacherPayload!
  removeAbsence(input: RemoveAbsenceInput!): RemoveAbsencePayload!
  removeAssignedSeat(input: RemoveAssignedSeatInput!): RemoveAssignedSeatPayload!
  removeCourse(input: RemoveCourseInput!): RemoveCoursePayload!
  removeLateness(input: RemoveLatenessInput!): RemoveLatenessPayload!
  removeProtocol(input: RemoveProtocolInput!): RemoveProtocolPayload!
  removeRubricEntry(input: RemoveRubricEntryInput!): RemoveRubricEntryPayload!
  removeStudentsFromCourse(input: RemoveStudentsFromCourseInput!): RemoveStudentsFromCoursePayload!
  removeTextSection(input: RemoveTextSectionInput!): RemoveTextSectionPayload!
  resetPassword(input: ResetPasswordInput!): ResetPasswordPayload!
  respondToProtocol(input: RespondToProtocolInput!): RespondToProtocolPayload!
  resubmitEssayFinalDraft(input: ResubmitEssayFinalDraftInput!): ResubmitEssayFinalDraftPayload!
  returnArticleReview(input: ReturnArticleReviewInput!): ReturnArticleReviewPayload!
  returnGradedEssay(input: ReturnGradedEssayInput!): ReturnGradedEssayPayload!
  returnReadingGuide(input: ReturnReadingGuideInput!): ReturnReadingGuidePayload!
  setAnswerType(input: SetAnswerTypeInput!): SetAnswerTypePayload!
  setCurrentMarkingPeriod(input: SetCurrentMarkingPeriodInput!): SetCurrentMarkingPeriodPayload!
  setOrganizer(input: SetOrganizerInput!): SetOrganizerPayload!
  startProtocol(input: StartProtocolInput!): StartProtocolPayload!
  startReadingGuide(input: StartReadingGuideInput!): StartReadingGuidePayload!
  studentSignIn(input: StudentSignInInput!): StudentSignInPayload!
  submitArticleReview(input: SubmitArticleReviewInput!): SubmitArticleReviewPayload!
  submitEssayFinalDraft(input: SubmitEssayFinalDraftInput!): SubmitEssayFinalDraftPayload!
  submitReadingGuide(input: SubmitReadingGuideInput!): SubmitReadingGuidePayload!
  unAssignEssays(input: UnAssignEssaysInput!): UnAssignEssaysPayload!
  updateAcademicOrganizer(input: UpdateAcademicOrganizerInput!): UpdateAcademicOrganizerPayload!
  updateAdvancedOrganizer(input: UpdateAdvancedOrganizerInput!): UpdateAdvancedOrganizerPayload!
  updateArticleReview(input: UpdateArticleReviewInput!): UpdateArticleReviewPayload!
  updateCourseInfo(input: UpdateCourseInfoInput!): UpdateCourseInfoPayload!
  updateDevelopingOrganizer(input: UpdateDevelopingOrganizerInput!): UpdateDevelopingOrganizerPayload!
  UpdateDynamicLesson(input: UpdateDynamicLessonInput!): UpdateDynamicLessonPayload!

  """To change an individual students topic question information or dueDate"""
  updateEssayByStudent(input: UpdateEssayByStudentInput!): UpdateEssayByStudentPayload!
  updateEssayLateness(input: UpdateEssayLatenessInput!): UpdateEssayLatenessPayload!

  """only useful for changing marking period"""
  updateEssaysByLesson(input: UpdateEssaysByLessonInput!): UpdateEssaysByLessonPayload!
  updateEssaysByQuestion(input: UpdateEssaysByQuestionInput!): UpdateEssaysByQuestionPayload!

  """For updating an assignment for an entire course(s)"""
  updateEssaysByStudentsAndSection(input: UpdateEssaysByStudentsAndSectionInput!): UpdateEssaysByStudentsAndSectionPayload!
  updateGradingDraft(input: UpdateGradingDraftInput!): UpdateGradingDraftPayload!
  updateHowCauseEffect(input: UpdateHowCauseEffectInput!): UpdateHowCauseEffectPayload!
  updateLesson(input: UpdateLessonInput!): UpdateLessonPayload!
  updateLessonProtocol(input: UpdateLessonProtocolInput!): UpdateProtocolPayload!
  updateParentContact(input: UpdateParentContactInput!): UpdateParentContactPayload!
  updateProblemSolution(input: UpdateProblemSolutionInput!): UpdateProblemSolutionPayload!
  updateReadingGuide(input: UpdateReadingGuideInput!): UpdateReadingGuidePayload!
  updateResponsibilityPoints(input: UpdateResponsibilityPointsInput!): UpdateResponsibilityPointsPayload!
  updateRubricEntry(input: UpdateRubricEntryInput!): UpdateRubricEntryPayload!
  updateSchoolDay(input: UpdateSchoolDayInput!): UpdateSchoolDayPayload!
  updateTemporaryTasks(input: UpdateTemporaryTasksInput!): UpdateTemporaryTasksPayload!
  updateTextSection(input: UpdateTextSectionInput!): UpdateTextSectionPayload!
  updateWhyCauseEffect(input: UpdateWhyCauseEffectInput!): UpdateWhyCauseEffectPayload!
  updateWorkingDraft(input: UpdateWorkingDraftInput!): UpdateWorkingDraftPayload!
}

union Organizers = AcademicOrganizer | AdvancedOrganizer | DevelopingOrganizer

type OverallWritingMetric {
  levelPoints: Int!
  overallWritingLevel: WritingLevelEnum!
}

type PageNumbers {
  endingPage: Int!
  startingPage: Int!
}

input PageNumbersInput {
  endingPage: Int!
  startingPage: Int!
}

type ParentContact {
  _id: ID
  contactType: ContactTypeEnum!
  contentOfContact: String!
  date: String!
  student: Student!
  teacherId: ID!
}

input PasswordCheckInput {
  password: String!
}

type PasswordCheckPayload {
  firstTimeLoginIn: Boolean!
}

type ProblemSolutionAnswerType {
  problem: String!
  reasonForProblem: String!
  solvedBy: String!
  whySolutionSolved: String!
}

interface ProgressMetrics {
  _id: ID
  student: Student!
}

type Protocol {
  _id: ID
  academicOutcomeType: AcademicOutcomeTypes!
  assessment: ProtocolAssessmentEnum
  assignedDate: String!
  completed: Boolean!
  discussionLevel: DiscussionTypesEnum
  endTime: String
  isActive: Boolean!
  markingPeriod: MarkingPeriodEnum!
  partners: [Student!]
  protocolActivityType: ProtocolActivityTypes!
  response: String
  startTime: String!
  student: Student!
  task: String!
}

enum ProtocolActivityTypes {
  INDIVIDUAL
  SMALL_GROUP
  THINK_PAIR_SHARE
}

enum ProtocolAssessmentEnum {
  REFUSED_TO_WORK
  SLOW_TO_GET_STARTED
  WORKED_POORLY
  WORKED_VERY_WELL
  WORKED_WELL
}

type Query {
  findActiveProtocolByStudent(input: FindActiveProtocolByStudentInput!): FindActiveProtocolByStudentPayload!
  findActiveProtocolsByCourse(input: FindActiveProtocolsByCourseInput!): FindActiveProtocolsByCoursePayload!
  findAllStudents: FindAllStudentsPayload!
  findAllUsers: FindAllUsersPayload!
  findArticleReviewById(input: FindArticleReviewByIdInput!): FindArticleReviewByIdPayload!
  findArticleReviewsByCourse(input: FindArticleReviewsByCourseInput!): FindArticleReviewsByCoursePayload!
  findArticleReviewsByStudent(input: FindArticleReviewsByStudentInput!): FindArticleReviewsByStudentPayload!
  findAssignmentById(input: FindAssignmentByIdInput!): FindAssignmentByIdPayload!
  findAssignmentByStudentId(input: FindAssignmentByStudentIdInput!): FindAssignmentByStudentIdPayload!
  findAssignmentsToGrade(input: FindAssignmentsToGradeInput!): FindAssignmentsToGradePayload!
  findChaptersInText(input: FindChaptersInTextInput!): FindChaptersInTextPayload!
  findChapterTitle(input: FindChapterTitleInput!): FindChapterTitlePayload!
  findCompletedEssaysByStudentId(input: FindCompletedEssaysByStudentIdInput!): FindCompletedEssaysByStudentIdPayload!
  findContactsByStudentId(input: FindContactsByStudentIdInput!): FindContactsByStudentIdPayload!
  findCourseById(input: FindCourseByIdInput!): FindCourseByIdPayload!
  findCourseInfoByCourseId(input: FindCourseInfoByCourseIdInput!): FindCourseInfoByCourseIdPayload!
  findCoursesById(input: FindCoursesByIdInput!): FindCoursesByIdPayload!
  findCurrentMarkingPeriod: FindCurrentMarkingPeriodPayload!
  findEssayById(input: FindEssayByIdInput!): FindEssayByIdPayload!
  findEssayByStudentIdAndLessonId(input: FindEssayByStudentIdAndLessonIdInput!): FindEssayByStudentIdAndLessonIdPayload!
  findEssaysByAssociatedLessonId(input: FindEssaysByAssociatedLessonIdInput!): FindEssaysByAssociatedLessonIdPayload!
  findEssaysByAssociatedLessonIdAndCourseId(input: FindEssaysByAssociatedLessonIdAndCourseIdInput!): FindEssaysByAssociatedLessonIdAndCourseIdPayload!
  findEssaysByUserNameAndMarkingPeriod(input: FindEssaysByUserNameAndMarkingPeriodInput!): FindEssaysByUserNameAndMarkingPeriodPayload!
  findEssaysToCompleteByStudentId(input: FindEssaysToCompleteByStudentIdInput!): FindEssaysToCompleteByStudentIdPayload!
  findEssaysToGradeById(input: FindEssaysToGradeByIdInput!): FindEssaysToGradeByIdPayload!
  findLessonByCourse(input: FindLessonByCourseInput!): FindLessonByCoursePayload!
  findLessonByCourseAndDate(input: FindLessonByCourseAndDateInput!): FindLessonByCourseAndDatePayload!
  findLessonById(input: FindLessonByIdInput!): FindLessonByIdPayload!
  findLessonsByAssignedDate(input: FindLessonsByAssignedDateInput!): FindLessonsByAssignedDatePayload!
  findLessonsByUnit(input: FindLessonsByUnitInput!): FindLessonsByUnitPayload!
  findParentContactsByTeacherId(input: FindParentContactsByTeacherIdInput!): FindParentContactsByTeacherIdPayload!
  findReadingGuideById(input: FindReadingGuideByIdInput!): FindReadingGuideByIdPayload!
  findReadingGuidesByAssociatedLessonAndCourseId(input: FindReadingGuidesByAssociatedLessonAndCourseIdInput!): FindReadingGuidesByAssociatedLessonAndCourseIdPayload!
  findReadingGuidesByCourseIdAndAssignedDate(input: FindReadingGuidesByCourseIdAndAssignedDateInput!): FindReadingGuidesByCourseIdAndAssignedDatePayload!
  findReadingGuidesToCompleteByStudentId(input: FindReadingGuidesToCompleteByStudentIdInput!): FindReadingGuidesToCompleteByStudentIdPayload!
  findResponsibilityPointsByCourse(input: FindResponsibilityPointsByCourseInput!): FindResponsibilityPointsByCoursePayload!
  findResponsibilityPointsByStudentId(input: FindResponsibilityPointsByStudentIdInput!): FindResponsibilityPointsByStudentIdPayload!
  findRubricEntries: FindRubricEntriesPayload!
  findRubricEntriesByCategory(input: FindRubricEntriesByCategoryInput!): FindRubricEntriesByCategoryPayload!
  findSchoolDayByDate(input: FindSchoolDayByDateInput!): FindSchoolDayByDatePayload!
  findSchoolDayTracker: FindSchoolDayPayload!
  findStudentById(input: FindStudentByIdInput!): FindStudentByIdPayload!
  findStudentQuestions(input: FindStudentQuestionsInput!): FindStudentQuestionsPayload!
  findStudentsByCourse(input: FindStudentsByCourseInput!): FindStudentsByCoursePayload!
  findStudentsById(input: FindStudentsByIdInput!): FindStudentsByIdPayload!
  findTemporaryTasks(input: FindTemporaryTasksInput!): FindTemporaryTasksPayload!
  findTemporaryTasksByStudentId(input: FindTemporaryTasksByStudentIdInput!): FindTemporaryTasksByStudentIdPayload!
  findTextByTitle(input: FindTextByTitleInput!): FindTextByTitlePayload!
  findTexts: FindTextsPayload!
  findTextSectionById(input: FindTextSectionByIdInput!): FindTextSectionByIdPayload!
  findTextSectionsByChapter(input: FindTextSectionsByChapterInput!): FindTextSectionsByChapterPayload!
  findTextSectionsById(input: FindTextSectionsByIdInput!): FindTextSectionsByIdPayload!
  findUnits: FindUnitsPayload!
  findUserData(input: FindUserDataInput!): FindUserDataPayload!
  findWritingMetrics(input: FindWritingMetricsInput!): FindWritingMetricsPayload!
  me: User
  passwordCheck(input: PasswordCheckInput!): PasswordCheckPayload!
  removeSchoolDay(input: RemoveSchoolDayInput!): RemoveSchoolDayPayload!
  removeSubmittedEssayFinalDraft(input: RemoveSubmittedEssayFinalDraftInput!): RemoveSubmittedEssayFinalDraftPayload!
}

enum QuestionTypeEnum {
  HOW_CAUSE_EFFECT
  HOW_PROBLEM_SOLUTION
  WHY_CAUSE_EFFECT
}

type ReadingGuide implements Assignment {
  _id: ID
  assigned: Boolean!
  assignedDate: String!
  associatedLessonId: ID
  completed: Boolean!
  dueDate: String!
  dueTime: String!
  exempt: Boolean!
  graded: Boolean!
  hasAssigner: Teacher!
  hasOwner: Student!
  late: Boolean!
  lessonInfo: Lesson!
  markingPeriod: MarkingPeriodEnum!
  paperBased: Boolean!
  readingGuideFinal: ReadingGuideFinalContainer
  readings: Readings!
  score: Score!
}

type ReadingGuideFinalContainer {
  clarifyingQuestions: [String!]!
  howIsSectionOrganized: [InformationStructureEnum!]
  majorIssue: String!
  majorIssueSolved: Boolean!
  majorSolution: String!
  submitted: Boolean!
  submitTime: String
  whyWasSectionOrganized: String
}

type Readings {
  readingPages: String!
  readingSections: String!
}

input ReadingsInput {
  readingPages: String!
  readingSections: String!
}

input RegisterStudentInput {
  cohort: StudentCohortEnum!
  email: String
  firstName: String!
  lastName: String!
  middleName: String
  password: String!
  schoolId: String
  userName: String!
  virtual: Boolean!
}

type RegisterStudentPayload {
  student: Student!
}

input RegisterTeacherInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  title: TitleEnum!
  userName: String!
}

type RegisterTeacherPayload {
  teacher: Teacher!
}

input RemoveAbsenceInput {
  _id: ID!
}

type RemoveAbsencePayload {
  removed: Boolean!
}

input RemoveAssignedSeatInput {
  cohortBased: Boolean!
  cohortType: StudentCohortEnum
  courseId: ID!
  deskNumber: Int!
}

type RemoveAssignedSeatPayload {
  courseInfo: CourseInfo!
}

input RemoveCourseInput {
  courseId: ID!
}

type RemoveCoursePayload {
  removed: Boolean!
}

input RemoveLatenessInput {
  _id: ID!
}

type RemoveLatenessPayload {
  removed: Boolean!
}

input RemoveProtocolInput {
  assignedDate: Date!
  lessonId: ID!
  studentIds: [ID!]!
  task: String!
}

type RemoveProtocolPayload {
  deleteCount: Int!
}

input RemoveRubricEntryInput {
  rubricEntryId: ID!
}

type RemoveRubricEntryPayload {
  removed: Boolean!
}

input RemoveSchoolDayInput {
  schoolDayId: ID!
}

type RemoveSchoolDayPayload {
  removed: Boolean!
}

input RemoveStudentsFromCourseInput {
  courseId: ID!
  studentIds: [ID!]!
}

type RemoveStudentsFromCoursePayload {
  students: [Student!]!
}

input RemoveSubmittedEssayFinalDraftInput {
  essayId: ID!
}

type RemoveSubmittedEssayFinalDraftPayload {
  essay: Essay!
}

input RemoveTextSectionInput {
  _id: ID!
}

type RemoveTextSectionPayload {
  removed: Boolean!
}

input ResetPasswordInput {
  userId: String!
}

type ResetPasswordPayload {
  user: User!
}

input RespondToProtocolInput {
  protocolId: ID!
  response: String!
}

type RespondToProtocolPayload {
  protocol: Protocol!
}

type ResponsibilityPoints {
  _id: ID
  inCourse: Course!
  markingPeriod: MarkingPeriodEnum!
  responsibilityPoints: Float!
  student: Student!
}

input ResubmitEssayFinalDraftInput {
  essayId: ID!
  submittedFinalDraft: SubmittedFinalDraftsInput!
}

type ResubmitEssayFinalDraftPayload {
  essay: Essay!
}

input ReturnArticleReviewInput {
  articleReviewId: ID!
}

type ReturnArticleReviewPayload {
  articleReview: ArticleReview!
}

input ReturnedRubricEntryInput {
  _id: ID
  entry: String!
  howToImprove: String
  rubricSection: RubricSectionEnum!
  score: Int!
}

input ReturnGradedEssayInput {
  _id: ID!
  additionalComments: [String!]
  draftNumber: Int!
  gradingDraft: String!
  rubricEntries: [ReturnedRubricEntryInput!]!
  score: Float!
}

type ReturnGradedEssayPayload {
  essay: Essay!
}

input ReturnReadingGuideInput {
  readingGuideId: ID!
  score: Int!
}

type ReturnReadingGuidePayload {
  readingGuide: ReadingGuide!
}

type RubricEntry {
  _id: ID
  entry: String!
  howToImprove: String
  rubricSection: RubricSectionEnum!
  rubricWritingLevels: [WritingLevelEnum!]!
  score: Int!
}

input RubricEntryInput {
  entry: String!
  rubricSection: RubricSectionEnum!
  rubricWritingLevels: [WritingLevelEnum!]!
  score: Int!
}

enum RubricSectionEnum {
  ANSWER
  CONCLUSION
  GENERAL
  OVERALL
  TOPIC
}

type SchoolDay {
  _id: ID
  cohortWeek: StudentCohortEnum!
  currentSchoolDayType: SchoolDayType!
  schoolDayCount: Int!
  signInSheets: [StudentSignInSheet!]
  todaysDate: String!
}

type SchoolDayTracker {
  _id: ID
  cohortWeekTracker: StudentCohortEnum!
  schoolDayTracker: Int!
  schoolDayTypeTracker: SchoolDayType!
}

enum SchoolDayType {
  A
  B
}

type Score {
  earnedPoints: Float!
  maxPoints: Int!
}

input SetAnswerTypeInput {
  essayId: ID!
  questionType: QuestionTypeEnum!
}

type SetAnswerTypePayload {
  essay: Essay!
}

input SetCurrentMarkingPeriodInput {
  currentMarkingPeriod: MarkingPeriodEnum!
}

type SetCurrentMarkingPeriodPayload {
  markingPeriod: MarkingPeriod!
}

input SetOrganizerInput {
  essayId: ID!
  writingLevel: WritingLevelEnum!
}

type SetOrganizerPayload {
  essay: Essay!
}

input StartProtocolInput {
  isActive: Boolean!
  lessonId: ID!
  task: String!
}

type StartProtocolPayload {
  lesson: Lesson!
}

input StartReadingGuideInput {
  paperBased: Boolean!
  readingGuideId: ID!
}

type StartReadingGuidePayload {
  readingGuide: ReadingGuide!
}

type Student implements User {
  _id: ID
  cohort: StudentCohortEnum!
  email: String
  firstName: String!
  hasAbsences: [StudentAbsence!]!
  hasAssignments: [Assignment!]!
  hasContactInformation: StudentInformation!
  hasExcusedLatenesses: [ExcusedLateness!]!
  hasProtocols: [Protocol!]!
  hasResponsibilityPoints: [ResponsibilityPoints!]!
  hasUnExcusedLatenesses: [UnexcusedLateness!]!
  hasWritingMetrics: WritingMetrics!
  inCourses: [Course!]!
  lastName: String!
  middleName: String
  password: String!
  schoolId: String
  userName: String!
  virtual: Boolean!
}

type StudentAbsence {
  _id: ID
  dayAbsent: Date!
  markingPeriod: MarkingPeriodEnum!
  student: Student!
}

enum StudentCohortEnum {
  RED
  WHITE
}

type StudentInformation {
  _id: ID
  contactInfo: [ContactInfo!]!
  student: Student!
}

type StudentQuestion {
  question: String!
  student: Student!
  timeAsked: String!
}

type StudentQuestions {
  _id: ID
  associatedSchoolDayId: ID!
  course: ID!
  date: String!
  questions: [StudentQuestion!]!
}

type StudentSeat {
  deskNumber: Int!
  redCohortStudent: Student
  student: Student
  whiteCohortStudent: Student
}

input StudentSeatInput {
  deskNumber: Int!
  redCohortStudentId: ID
  studentId: ID
  whiteCohortStudentId: ID
}

input StudentSignInInput {
  courseId: ID!
  lessonDate: String!
  studentId: ID!
  virtual: Boolean
}

type StudentSignInPayload {
  schoolDay: SchoolDay!
}

type StudentSignInSheet {
  course: Course!
  lessonDate: Date!
  studentsSignInlog: [Student!]
}

input SubmitArticleReviewInput {
  articleReviewId: ID!
  markingPeriod: MarkingPeriodEnum!
}

type SubmitArticleReviewPayload {
  articleReview: ArticleReview!
}

input SubmitEssayFinalDraftInput {
  _id: ID!
  late: Boolean!
  paperBased: Boolean!
  submittedFinalDraft: SubmittedFinalDraftsInput!
  submitTime: String!
}

type SubmitEssayFinalDraftPayload {
  essay: Essay!
}

input SubmitReadingGuideInput {
  completeReadingGuide: Boolean
  late: Boolean!
  paperBased: Boolean!
  readingGuideId: ID!
  submitTime: String!
}

type SubmitReadingGuidePayload {
  readingGuide: ReadingGuide!
}

type SubmittedFinalDraft {
  additionalComments: [String!]
  draft: JSON!
  draftNumber: Int!
  graded: Boolean!
  gradingDraft: JSON!
  rubricEntries: [RubricEntry!]!
  score: Float!
}

input SubmittedFinalDraftsInput {
  additionalComments: [String!]
  draft: JSON!
  draftNumber: Int!
  graded: Boolean!
  gradingDraft: JSON!
  rubricEntries: [RubricEntryInput!]!
  score: Float!
}

type Teacher implements User {
  _id: ID
  email: String
  firstName: String!
  hasParentContacts: [ParentContact!]!
  lastName: String!
  middleName: String
  password: String!
  teachesCourses: [Course!]!
  title: TitleEnum!
  userName: String!
}

type TemporaryTask {
  _id: ID
  answered: Boolean!
  dateIssued: String!
  lastGrade: Float!
  markingPeriod: MarkingPeriodEnum!
  student: Student!
  studentPresent: Boolean!
  taskNumber: Int!
}

type Test implements Assignment {
  _id: ID
  assigned: Boolean!
  assignedDate: String!
  associatedLessonId: ID
  dueDate: String!
  dueTime: String!
  exempt: Boolean!
  hasAssigner: Teacher!
  hasOwner: Student!
  late: Boolean!
  lessonInfo: Lesson!
  markingPeriod: MarkingPeriodEnum!
  paperBased: Boolean!
  readings: Readings!
  score: Score!
  testName: String!
}

type Text {
  _id: ID
  hasChapters: [Chapter!]!
  ownerId: ID!
  textTitle: String!
}

input TextChapterInput {
  chapterNumber: Int!
  chapterTitle: String!
}

input TextInput {
  chapters: [String!]!
  textTitle: String!
}

type TextSection {
  _id: ID
  fromChapter: Chapter!
  hasProtocols: [TextSectionProtocols!]
  hasQuestions: [TextSectionQuestions!]
  hasVocab: [TextSectionVocab!]
  header: String!
  pageNumbers: PageNumbers!
}

"""Protocol suggestions for including in a LessonPlan"""
type TextSectionProtocols {
  academicOutcomeTypes: AcademicOutcomeTypes!
  activityType: ProtocolActivityTypes!
  completed: Boolean!
  isActive: Boolean!
  task: String!
}

input TextSectionProtocolsInput {
  academicOutcomeTypes: AcademicOutcomeTypes!
  activityType: ProtocolActivityTypes!
  completed: Boolean!
  isActive: Boolean!
  task: String!
}

type TextSectionQuestions {
  question: String!
  questionType: QuestionTypeEnum!
}

input TextSectionQuestionsInput {
  question: String!
  questionType: QuestionTypeEnum!
}

type TextSectionVocab {
  definition: String!
  word: String!
}

input TextSectionVocabInput {
  definition: String!
  word: String!
}

scalar Time

enum TimeOfDay {
  AFTER_CLASS
  AFTER_SCHOOL
  BEFORE_CLASS
  BEFORE_SCHOOL
}

enum TitleEnum {
  MISS
  MR
  MRS
  MS
}

type Topic {
  question: String!
  questionType: QuestionTypeEnum!
  writingLevel: WritingLevelEnum!
}

input TopicInput {
  question: String!
  questionType: QuestionTypeEnum!
  writingLevel: WritingLevelEnum!
}

input TopicTypeInput {
  writingLevel: WritingLevelEnum
}

input UnAssignEssaysInput {
  section: String!
  studentIds: [ID!]!
}

type UnAssignEssaysPayload {
  essays: [Essay!]!
}

type UnexcusedLateness {
  _id: ID
  dayLate: Date!
  markingPeriod: MarkingPeriodEnum!
  student: Student!
}

type Unit {
  _id: ID
  hasLessons: [Lesson!]!
  unitName: String!
}

input UnitInput {
  _id: ID!
  unitName: String!
}

input UpdateAcademicOrganizerInput {
  academicSentenceStructure: AcademicSentenceStructureInput!
  conclusion: String!
  essayId: ID!
  restatement: String!
}

type UpdateAcademicOrganizerPayload {
  essay: Essay!
}

input UpdateAdvancedOrganizerInput {
  advancedSentenceStructure: AdvancedSentenceStructureInput!
  conclusion: String!
  essayId: ID!
  restatement: String!
}

type UpdateAdvancedOrganizerPayload {
  essay: Essay!
}

input UpdateArticleReviewInput {
  articleAuthor: String!
  articleLink: String!
  articleReviewId: ID!
  articleTitle: String!
  bias: Boolean
  issue: String!
  publishedDate: String
  solutions: String
  topicsImportance: String!
}

type UpdateArticleReviewPayload {
  articleReview: ArticleReview!
}

input UpdateCourseInfoInput {
  courseId: ID!
  courseType: CourseTypeEnum
  endsAt: String
  halfDayEndsAt: String
  halfDayStartsAt: String
  name: String!
  schoolDayType: SchoolDayType
  startsAt: String
}

type UpdateCourseInfoPayload {
  courseInfo: CourseInfo!
}

input UpdateDevelopingOrganizerInput {
  answer: String!
  basicQuestionType: BasicQuestionEnum!
  conclusion: String!
  developingSentenceStructure: DevelopingSentenceStructureInput!
  essayId: ID!
  restatement: String!
}

type UpdateDevelopingOrganizerPayload {
  essay: Essay!
}

input UpdateDynamicLessonInput {
  dynamicLessonUpdate: DynamicLessonEnums!
  lessonId: ID!
}

type UpdateDynamicLessonPayload {
  lesson: Lesson!
}

input UpdateEssayByStudentInput {
  dueDate: Date!
  section: String!
  studentId: ID!
  topic: TopicInput
}

type UpdateEssayByStudentPayload {
  essay: Essay!
}

input UpdateEssayLatenessInput {
  essayId: ID!
  lateness: Boolean!
}

type UpdateEssayLatenessPayload {
  essay: Essay!
}

input UpdateEssaysByLessonInput {
  lessonId: ID!
  markingPeriod: MarkingPeriodEnum!
}

type UpdateEssaysByLessonPayload {
  essays: [Essay!]!
}

input UpdateEssaysByQuestionInput {
  newQuestion: String!
  newQuestionType: QuestionTypeEnum!
  newWritingLevel: WritingLevelEnum!
  originalQuestion: String!
}

type UpdateEssaysByQuestionPayload {
  essays: [Essay!]!
}

input UpdateEssaysByStudentsAndSectionInput {
  assignedDate: Date!
  dueDate: Date!
  dueTime: String!
  markingPeriod: MarkingPeriodEnum
  maxPoints: Int!
  section: String!
  studentId: [ID!]!
}

type UpdateEssaysByStudentsAndSectionPayload {
  essays: [Essay!]!
}

input UpdateGradingDraftInput {
  draftNumber: Int
  essayId: ID!
  gradingDraft: JSON
}

type UpdateGradingDraftPayload {
  essay: Essay!
}

input UpdateHowCauseEffectInput {
  after: String!
  before: String!
  cause: String!
  essayId: ID!
}

type UpdateHowCauseEffectPayload {
  essay: Essay!
}

input UpdateLessonInput {
  afterActivity: TextSectionProtocolsInput!
  assignedDate: Date!
  assignedMarkingPeriod: MarkingPeriodEnum!
  assignedSectionIdList: [ID!]!
  assignedSections: LessonTextSectionsInput!
  beforeActivity: TextSectionProtocolsInput!
  duringActivities: [TextSectionProtocolsInput!]!
  essentialQuestion: String!
  inUnit: ID!
  lessonName: String!
  linkedCourseIds: [ID!]!
  pageNumbers: PageNumbersInput!
  questionList: [TextSectionQuestionsInput!]!
  vocabList: [TextSectionVocabInput!]!
}

type UpdateLessonPayload {
  lessons: [Lesson!]!
}

input UpdateLessonProtocolInput {
  assignedDate: Date!
  isActive: Boolean!
  lessonId: ID!
  studentIds: [ID!]!
  task: String!
}

input UpdateParentContactInput {
  contactId: ID!
  contactType: ContactTypeEnum!
  contentOfContact: String!
  date: String!
  studentId: ID!
  teacherId: ID!
}

type UpdateParentContactPayload {
  parentContact: ParentContact!
}

input UpdateProblemSolutionInput {
  essayId: ID!
  problem: String!
  reasonForProblem: String!
  solvedBy: String!
  whySolutionSolved: String!
}

type UpdateProblemSolutionPayload {
  essay: Essay!
}

type UpdateProtocolPayload {
  lesson: Lesson!
  protocols: [Protocol!]!
}

input UpdateReadingGuideInput {
  clarifyingQuestions: [String!]!
  howIsSectionOrganized: [InformationStructureEnum!]
  majorIssue: String!
  majorIssueSolved: Boolean!
  majorSolution: String!
  readingGuideId: ID!
  whyWasSectionOrganized: String!
}

type UpdateReadingGuidePayload {
  readingGuide: ReadingGuide!
}

input UpdateResponsibilityPointsInput {
  markingPeriod: MarkingPeriodEnum
  points: Float!
  studentId: ID!
}

type UpdateResponsibilityPointsPayload {
  responsibilityPoints: ResponsibilityPoints!
}

input UpdateRubricEntryInput {
  entry: String!
  howToImprove: String
  rubricEntryId: ID!
  rubricSection: RubricSectionEnum!
  rubricWritingLevels: [WritingLevelEnum!]!
  score: Int!
}

type UpdateRubricEntryPayload {
  rubricEntry: RubricEntry!
}

input UpdateSchoolDayInput {
  schoolDayId: ID!
  updatedCohortWeek: StudentCohortEnum!
  updatedCurrentSchoolDayType: SchoolDayType!
  updatedDate: Date!
  updatedSchoolDayCount: Int!
}

type UpdateSchoolDayPayload {
  schoolDay: SchoolDay!
}

input UpdateTemporaryTasksInput {
  courseId: ID!
  dateIssued: String!
  newDateIssued: String
  newTaskNumber: Int
  taskNumber: Int!
}

type UpdateTemporaryTasksPayload {
  temporaryTasks: [TemporaryTask!]!
}

input UpdateTextSectionInput {
  _id: ID!
  fromChapterId: String!
  hasProtocols: [TextSectionProtocolsInput!]!
  hasQuestions: [TextSectionQuestionsInput!]!
  hasVocab: [TextSectionVocabInput!]!
  header: String!
  pageNumbers: PageNumbersInput!
}

type UpdateTextSectionPayload {
  textSection: TextSection!
}

type UpdateVocabPayload {
  textSection: TextSection!
}

input UpdateWhyCauseEffectInput {
  essayId: ID!
  proximateCause: String!
  ultimateCause: String!
}

type UpdateWhyCauseEffectPayload {
  essay: Essay!
}

input UpdateWorkingDraftInput {
  _id: ID!
  updatedDraft: JSON!
}

type UpdateWorkingDraftPayload {
  essay: Essay!
}

interface User {
  _id: ID
  email: String
  firstName: String!
  lastName: String!
  middleName: String
  password: String!
  userName: String!
}

type WhyCauseEffectAnswerType {
  proximateCause: String!
  ultimateCause: String!
}

type WhyCauseEffectMetrics {
  levelPoints: Int!
  whyCauseEffectLevel: WritingLevelEnum!
}

type WorkingDraft {
  draft: String!
  organizer: Organizers
}

enum WritingLevelEnum {
  ACADEMIC
  ADVANCED
  DEVELOPING
}

type WritingMetrics implements ProgressMetrics {
  _id: ID
  howCauseEffectMetrics: HowCauseEffectMetrics!
  howProblemSolutionMetrics: HowProblemSolutionMetrics!
  inCourse: Course!
  overallWritingMetric: OverallWritingMetric!
  student: Student!
  whyCauseEffectMetrics: WhyCauseEffectMetrics!
}
