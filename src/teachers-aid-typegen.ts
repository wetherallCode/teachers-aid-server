/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as t from "./typeDefs"
import { core } from "@nexus/schema"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Date";
    time<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Time";
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "DateTime";
    JSON<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "JSON";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    time<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Time";
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    JSON<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSON";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AcademicSentenceStructureInput: { // input type
    object?: string | null; // String
    subject: string; // String!
    subjectCompliment?: string | null; // String
    verb: string; // String!
  }
  ActivateQuizInput: { // input type
    activate: boolean; // Boolean!
    quizId: string; // ID!
  }
  AddCourseToTeacherInput: { // input type
    courseId: string; // ID!
    teacherId: string; // ID!
  }
  AddDeskToAssignedSeatsInput: { // input type
    courseId: string; // ID!
    deskNumber: number; // Int!
  }
  AddNewChapterInput: { // input type
    chapterNumber: number; // Int!
    chapterTitle: string; // String!
    textTitle: string; // String!
  }
  AddNewTextInput: { // input type
    ownerId: string; // ID!
    textTitle: string; // String!
  }
  AddStudentsToCourseInput: { // input type
    courseId: string; // ID!
    studentIds: string[]; // [ID!]!
  }
  AddUserEmailInput: { // input type
    email?: string | null; // String
    userId: string; // ID!
  }
  AddVocabWordInput: { // input type
    _id: string; // ID!
    definition: string; // String!
    position: number; // Int!
    word: string; // String!
  }
  AdvancedSentenceStructureInput: { // input type
    object?: string | null; // String
    subject: string; // String!
    subjectCompliment?: string | null; // String
    verb: string; // String!
  }
  AnswerListInput: { // input type
    answer: string; // String!
    correct: boolean; // Boolean!
    partiallyCorrect: boolean; // Boolean!
    removable: boolean; // Boolean!
  }
  AssessIndividualProtocolsInput: { // input type
    assessment?: NexusGenEnums['ProtocolAssessmentEnum'] | null; // ProtocolAssessmentEnum
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    protocolId: string; // ID!
  }
  AssessStudentProtocolInput: { // input type
    assessment?: NexusGenEnums['ProtocolAssessmentEnum'] | null; // ProtocolAssessmentEnum
    assignedDate?: string | null; // String
    discussionLevel?: NexusGenEnums['DiscussionTypesEnum'] | null; // DiscussionTypesEnum
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    partnerIds?: string[] | null; // [ID!]
    protocolActivityType: NexusGenEnums['ProtocolActivityTypes']; // ProtocolActivityTypes!
    studentId: string; // ID!
    task: string; // String!
  }
  AssignEssaysInput: { // input type
    assignedDate: NexusGenScalars['Date']; // Date!
    associatedLessonId: string; // ID!
    dueDate: NexusGenScalars['Date']; // Date!
    studentIds: string[]; // [ID!]!
  }
  AssignQuizzesByStudentIdsAndDateInput: { // input type
    assign: boolean; // Boolean!
    assignedDate?: string | null; // String
    studentIds: string[]; // [ID!]!
  }
  AssignReadingGuidesInput: { // input type
    assignedDate: NexusGenScalars['Date']; // Date!
    associatedLessonId: string; // ID!
    dueDate: NexusGenScalars['Date']; // Date!
    studentIds: string[]; // [ID!]!
  }
  AssignSeatsInput: { // input type
    cohortBasedSeating: boolean; // Boolean!
    courseId: string; // ID!
    seat?: NexusGenInputs['StudentSeatInput'] | null; // StudentSeatInput
  }
  BuildRubricEntryInput: { // input type
    entry: string; // String!
    howToImprove?: string | null; // String
    rubricSection: NexusGenEnums['RubricSectionEnum']; // RubricSectionEnum!
    rubricWritingLevels: NexusGenEnums['WritingLevelEnum'][]; // [WritingLevelEnum!]!
    score: number; // Int!
  }
  ChangePasswordInput: { // input type
    newPassword: string; // String!
    oldPassword: string; // String!
    userName: string; // String!
  }
  ChangeVocabWordInput: { // input type
    _id: string; // ID!
    definition: string; // String!
    newDefinition: string; // String!
    newWord: string; // String!
    word: string; // String!
  }
  ControlCoolDownInput: { // input type
    isActive: boolean; // Boolean!
    lessonId: string; // ID!
  }
  ControlWarmUpInput: { // input type
    isActive: boolean; // Boolean!
    lessonId: string; // ID!
  }
  CourseInput: { // input type
    _id: string; // ID!
    name?: string | null; // String
  }
  CreateAbsenceInput: { // input type
    dayAbsent: NexusGenScalars['Date']; // Date!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    studentId: string; // String!
  }
  CreateArticleReviewsInput: { // input type
    assignedCourseId: string[]; // [ID!]!
    assignedDate: string; // String!
    dueDate: string; // String!
    dueTime: NexusGenEnums['TimeOfDay']; // TimeOfDay!
    hasAssignerId: string; // String!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
  }
  CreateCourseInfoInput: { // input type
    cohortBasedSeating: boolean; // Boolean!
    courseId: string; // ID!
    courseMaxSize: NexusGenEnums['CourseMaxSizeEnum']; // CourseMaxSizeEnum!
    courseType: NexusGenEnums['CourseTypeEnum']; // CourseTypeEnum!
    endsAt: string; // String!
    halfDayEndsAt: string; // String!
    halfDayStartsAt: string; // String!
    schoolDayType: NexusGenEnums['SchoolDayType']; // SchoolDayType!
    startsAt: string; // String!
  }
  CreateCourseInput: { // input type
    name: string; // String!
  }
  CreateEssayInput: { // input type
    assignedCourseId: string[]; // [ID!]!
    assignedDate: string; // String!
    associatedLessonId: string; // ID!
    dueDate: string; // String!
    dueTime: NexusGenEnums['TimeOfDay']; // TimeOfDay!
    hasAssignerId: string; // String!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    maxPoints: number; // Int!
    readings: NexusGenInputs['ReadingsInput']; // ReadingsInput!
    topicList: NexusGenInputs['TopicInput'][]; // [TopicInput!]!
  }
  CreateEssayQuestionInput: { // input type
    associatedTextSectionsIds: string[]; // [String!]!
    questionPartsInput: NexusGenInputs['QuestionPartsContainerInput']; // QuestionPartsContainerInput!
  }
  CreateEssentialQuestionInput: { // input type
    associatedTextSectionsIds: string[]; // [String!]!
    question: string; // String!
  }
  CreateExcusedLatenessInput: { // input type
    dayLateExcused: NexusGenScalars['Date']; // Date!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    studentId: string; // ID!
  }
  CreateLessonInput: { // input type
    afterActivity: NexusGenInputs['TextSectionProtocolsInput']; // TextSectionProtocolsInput!
    assignedCourses: string[]; // [ID!]!
    assignedDate: NexusGenScalars['Date']; // Date!
    assignedMarkingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    assignedSectionIdList: string[]; // [ID!]!
    assignedSections: NexusGenInputs['LessonTextSectionsInput']; // LessonTextSectionsInput!
    beforeActivity: NexusGenInputs['TextSectionProtocolsInput']; // TextSectionProtocolsInput!
    duringActivities: NexusGenInputs['TextSectionProtocolsInput'][]; // [TextSectionProtocolsInput!]!
    essentialQuestion: string; // String!
    inUnit: string; // ID!
    lessonName: string; // String!
    lessonType: NexusGenEnums['LessonTypeEnum']; // LessonTypeEnum!
    pageNumbers: NexusGenInputs['PageNumbersInput']; // PageNumbersInput!
    questionList: NexusGenInputs['TextSectionQuestionsInput'][]; // [TextSectionQuestionsInput!]!
    vocabList: NexusGenInputs['TextSectionVocabInput'][]; // [TextSectionVocabInput!]!
  }
  CreateParentContactInput: { // input type
    contactType: NexusGenEnums['ContactTypeEnum']; // ContactTypeEnum!
    contentOfContact: string; // String!
    date: string; // String!
    studentId: string; // ID!
    teacherId: string; // ID!
  }
  CreateProtocolInput: { // input type
    academicOutcomeType: NexusGenEnums['AcademicOutcomeTypes']; // AcademicOutcomeTypes!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    protocolActivityType: NexusGenEnums['ProtocolActivityTypes']; // ProtocolActivityTypes!
    studentIds: string[]; // [ID!]!
    task: string; // String!
  }
  CreateQuizQuestionInput: { // input type
    answerList: NexusGenInputs['AnswerListInput'][]; // [AnswerListInput!]!
    associatedTextSectionId: string; // ID!
    difficultyLevel: NexusGenEnums['QuizQuestionDifficultyLevelEnum']; // QuizQuestionDifficultyLevelEnum!
    question: string; // String!
    questionType: NexusGenEnums['QuizQuestionTypeEnum']; // QuizQuestionTypeEnum!
  }
  CreateQuizzesByCourseInput: { // input type
    assignedDate: string; // String!
    assignedSectionIds: string[]; // [ID!]!
    courseIds: string[]; // [ID!]!
    dueDate: string; // String!
    dueTime: string; // String!
    hasAssigner: string; // ID!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    readings: NexusGenInputs['ReadingsInput']; // ReadingsInput!
  }
  CreateReadingGuideInput: { // input type
    assignedCourseIds: string[]; // [ID!]!
    assignedDate: string; // String!
    associatedLessonId: string; // ID!
    dueDate: string; // String!
    dueTime: NexusGenEnums['TimeOfDay']; // TimeOfDay!
    hasAssignerId: string; // String!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    maxPoints: number; // Int!
    readings: NexusGenInputs['ReadingsInput']; // ReadingsInput!
  }
  CreateResponsibilityPointsInput: { // input type
    courseId: string; // ID!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    studentIds: string[]; // [ID!]!
  }
  CreateSchoolDayInput: { // input type
    cohortWeek: NexusGenEnums['StudentCohortEnum']; // StudentCohortEnum!
    currentSchoolDayType: NexusGenEnums['SchoolDayType']; // SchoolDayType!
    schoolDayCount: number; // Int!
    schoolDayLength: NexusGenEnums['SchoolDayLengthEnum']; // SchoolDayLengthEnum!
  }
  CreateSignInSheetsInput: { // input type
    courseIds: string[]; // [ID!]!
    todaysDate: string; // String!
  }
  CreateStudentBehaviorInput: { // input type
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    responsibilityPoints: number; // Float!
    studentBehaviorType: NexusGenEnums['BehaviorEnum']; // BehaviorEnum!
    studentId: string; // ID!
  }
  CreateStudentQuestionInput: { // input type
    courseId: string; // ID!
    question: string; // String!
    studentId: string; // ID!
  }
  CreateStudentQuestionsContainerInput: { // input type
    associatedSchoolDayId: string; // ID!
    courseId: string; // ID!
    date: string; // String!
  }
  CreateTemporaryTasksInput: { // input type
    courseId: string; // ID!
    dateIssued: string; // String!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    taskNumber: number; // Int!
  }
  CreateTextSectionInput: { // input type
    fromChapterId: string; // String!
    hasProtocols: NexusGenInputs['TextSectionProtocolsInput'][]; // [TextSectionProtocolsInput!]!
    hasQuestions: NexusGenInputs['TextSectionQuestionsInput'][]; // [TextSectionQuestionsInput!]!
    hasVocab: NexusGenInputs['TextSectionVocabInput'][]; // [TextSectionVocabInput!]!
    header: string; // String!
    pageNumbers: NexusGenInputs['PageNumbersInput']; // PageNumbersInput!
  }
  CreateUnexcusedLatenessInput: { // input type
    dayLate: NexusGenScalars['Date']; // Date!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    studentId: string; // ID!
  }
  CreateUnitInput: { // input type
    unitName: string; // String!
  }
  DeleteReviewsInput: { // input type
    assignedDate: string; // String!
  }
  DeleteTemporaryTasksInput: { // input type
    courseId: string; // ID!
    dateIssued: string; // String!
    taskNumber: number; // Int!
  }
  DevelopingOrganizerInput: { // input type
    answer: string; // String!
    conclusion: string; // String!
    questionType: string; // String!
    restatement: string; // String!
    sentenceStructure: string; // String!
  }
  DevelopingSentenceStructureInput: { // input type
    object?: string | null; // String
    subject: string; // String!
    subjectCompliment?: string | null; // String
    verb: string; // String!
  }
  ExemptArticleReviewInput: { // input type
    articleReviewId: string; // ID!
  }
  FindActiveProtocolByStudentInput: { // input type
    studentId: string; // ID!
  }
  FindActiveProtocolsByCourseInput: { // input type
    courseId: string; // ID!
  }
  FindArticleReviewByIdInput: { // input type
    articleReviewId: string; // ID!
  }
  FindArticleReviewsByCourseInput: { // input type
    courseId: string; // ID!
    markingPeriod?: NexusGenEnums['MarkingPeriodEnum'] | null; // MarkingPeriodEnum
  }
  FindArticleReviewsByStudentInput: { // input type
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    studentId: string; // ID!
  }
  FindAssignmentByIdInput: { // input type
    assignmentId: string; // ID!
  }
  FindAssignmentByStudentIdInput: { // input type
    studentId: string; // ID!
  }
  FindAssignmentsByCourseIdInput: { // input type
    courseId: string; // ID!
  }
  FindAssignmentsToGradeInput: { // input type
    teacherUserName: string; // String!
  }
  FindChapterTitleInput: { // input type
    chapter_id: string; // ID!
  }
  FindChaptersByTextIdInput: { // input type
    textId: string; // ID!
  }
  FindChaptersInTextInput: { // input type
    textTitle: string; // String!
  }
  FindCompletedEssaysByStudentIdInput: { // input type
    studentId: string; // ID!
  }
  FindContactsByStudentIdInput: { // input type
    studentId: string; // ID!
  }
  FindCourseByIdInput: { // input type
    courseId: string; // ID!
  }
  FindCourseInfoByCourseIdInput: { // input type
    courseId: string; // ID!
  }
  FindCoursesByIdInput: { // input type
    _ids: string[]; // [ID!]!
  }
  FindEssayByIdInput: { // input type
    _id: string; // ID!
  }
  FindEssayByStudentIdAndLessonIdInput: { // input type
    lessonId?: string | null; // ID
    studentId: string; // ID!
  }
  FindEssayQuestionByIdInput: { // input type
    essayQuestionId: string; // ID!
  }
  FindEssaysByAssociatedLessonIdAndCourseIdInput: { // input type
    courseId: string; // ID!
    lessonId: string; // ID!
  }
  FindEssaysByAssociatedLessonIdInput: { // input type
    associatedLessonId: string; // ID!
  }
  FindEssaysByUserNameAndMarkingPeriodInput: { // input type
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    userName: string; // String!
  }
  FindEssaysToCompleteByStudentIdInput: { // input type
    studentId: string; // ID!
  }
  FindEssaysToGradeByIdInput: { // input type
    teacherId: string; // ID!
  }
  FindEssentialQuestionsByAssociatedTextSectionIdsInput: { // input type
    textSectionIds: string[]; // [ID!]!
  }
  FindLessonByCourseAndDateInput: { // input type
    courseId: string; // ID!
    lessonDate: NexusGenScalars['Date']; // Date!
  }
  FindLessonByCourseInput: { // input type
    courseId: string; // ID!
  }
  FindLessonByIdInput: { // input type
    _id: string; // ID!
  }
  FindLessonStatusInput: { // input type
    lessonId: string; // ID!
  }
  FindLessonsByAssignedDateInput: { // input type
    assignedDate: string; // String!
  }
  FindLessonsByUnitInput: { // input type
    courseId: string; // ID!
    unitId: string; // ID!
  }
  FindParentContactsByTeacherIdInput: { // input type
    teacherId: string; // ID!
  }
  FindQuizByIdInput: { // input type
    quizId: string; // ID!
  }
  FindQuizQuestionsByQuizzableSectionsInput: { // input type
    quizzableSectionIds: string[]; // [String!]!
  }
  FindQuizQuestionsByTextSectionIdInput: { // input type
    associatedTextSectionId: string; // ID!
  }
  FindQuizzesByStudentIdInput: { // input type
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    studentId: string; // ID!
  }
  FindQuizzesForCourseByAssignedDateInput: { // input type
    assignedDate: string; // String!
    courseId: string; // ID!
  }
  FindReadingGuideByIdInput: { // input type
    readingGuideId: string; // ID!
  }
  FindReadingGuideByUserIdAndReadingSectionInput: { // input type
    readingSections: string; // String!
    studentId: string; // ID!
  }
  FindReadingGuidesByAssociatedLessonAndCourseIdInput: { // input type
    courseId: string; // ID!
    lessonId: string; // ID!
  }
  FindReadingGuidesByCourseIdAndAssignedDateInput: { // input type
    assignedDate?: string | null; // String
    courseId: string; // ID!
  }
  FindReadingGuidesByMarkingPeriodInput: { // input type
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
  }
  FindReadingGuidesByReadingSectionInput: { // input type
    readingSections: string; // String!
  }
  FindReadingGuidesToCompleteByStudentIdInput: { // input type
    studentId: string; // ID!
  }
  FindResponsibilityPointsByCourseInput: { // input type
    courseId: string; // ID!
  }
  FindResponsibilityPointsByStudentIdInput: { // input type
    studentId: string; // ID!
  }
  FindRubricEntriesByCategoryInput: { // input type
    rubricWritingLevel: NexusGenEnums['WritingLevelEnum']; // WritingLevelEnum!
  }
  FindSchoolDayByDateInput: { // input type
    date: NexusGenScalars['Date']; // Date!
  }
  FindStudentByIdInput: { // input type
    studentId: string; // ID!
  }
  FindStudentQuestionsInput: { // input type
    courseId: string; // ID!
    date: string; // String!
  }
  FindStudentsByCourseInput: { // input type
    courseId: string; // ID!
  }
  FindStudentsByIdInput: { // input type
    studentIds: string[]; // [ID!]!
  }
  FindTemporaryTasksByStudentIdInput: { // input type
    studentId: string; // ID!
  }
  FindTemporaryTasksInput: { // input type
    courseId: string; // ID!
    dateIssued: string; // String!
  }
  FindTextByTitleInput: { // input type
    title?: string | null; // String
  }
  FindTextSectionByIdInput: { // input type
    _id: string; // ID!
  }
  FindTextSectionsByChapterInput: { // input type
    fromChapterId: string; // ID!
  }
  FindTextSectionsByIdInput: { // input type
    _ids: string[]; // [ID!]!
  }
  FindUserDataInput: { // input type
    _id: string; // ID!
  }
  FindWritingMetricsInput: { // input type
    studentId: string; // ID!
  }
  FinishProtocolInput: { // input type
    assignedDate: NexusGenScalars['Date']; // Date!
    lessonId: string; // ID!
    studentIds: string[]; // [ID!]!
    task: string; // String!
  }
  FinishQuizInput: { // input type
    earnedPoints: number; // Float!
    quizId: string; // ID!
    responsibilityPoints: number; // Float!
  }
  ForceFinishQuizInput: { // input type
    quizId: string; // ID!
  }
  GradeArticleReviewInput: { // input type
    articleReviewId: string; // ID!
    earnedPoints: number; // Int!
  }
  GradeTemporaryTaskInput: { // input type
    _id: string; // ID!
    answered: boolean; // Boolean!
    lastGrade: number; // Float!
    responsibilityPoints: number; // Float!
  }
  HasAssigner: { // input type
    assignerUserName?: string | null; // String
  }
  HasOwnerInput: { // input type
    ownerUserName?: string | null; // String
  }
  InitializeStudentsInput: { // input type
    courseId: string; // ID!
    studentIds: string[]; // [ID!]!
  }
  LessonTextSectionsInput: { // input type
    endingSection: string; // String!
    startingSection: string; // String!
  }
  LoginInput: { // input type
    password: string; // String!
    userName: string; // String!
  }
  MarkExemptInput: { // input type
    assignmentId: string; // ID!
    exemptStatus: boolean; // Boolean!
  }
  MarkTemporaryTaskAbsentInput: { // input type
    studentPresent?: boolean | null; // Boolean
    taskId: string; // ID!
  }
  PageNumbersInput: { // input type
    endingPage: number; // Int!
    startingPage: number; // Int!
  }
  PasswordCheckInput: { // input type
    password: string; // String!
  }
  QuestionPartsContainerInput: { // input type
    completePredicate: string; // String!
    completeSubject: string; // String!
    compoundNoun: boolean; // Boolean!
    helpingVerb: string; // String!
    modifiedQuestion: string; // String!
    nounType: NexusGenEnums['NounTypeEnum']; // NounTypeEnum!
    object?: string | null; // String
    originalQuestion: string; // String!
    questionType: NexusGenEnums['QuestionTypeEnum']; // QuestionTypeEnum!
    questionWord: NexusGenEnums['QuestionWordEnum']; // QuestionWordEnum!
    simplePredicate: string; // String!
    simpleSubject: string; // String!
    subjectCompliment?: string | null; // String
    verbType: NexusGenEnums['VerbTypeEnum']; // VerbTypeEnum!
  }
  ReadingsInput: { // input type
    readingPages: string; // String!
    readingSections: string; // String!
  }
  RegisterStudentInput: { // input type
    cohort: NexusGenEnums['StudentCohortEnum']; // StudentCohortEnum!
    email?: string | null; // String
    firstName: string; // String!
    hasIEP?: boolean | null; // Boolean
    lastName: string; // String!
    middleName?: string | null; // String
    password: string; // String!
    schoolId?: string | null; // String
    userName: string; // String!
    virtual: boolean; // Boolean!
  }
  RegisterTeacherInput: { // input type
    email: string; // String!
    firstName: string; // String!
    lastName: string; // String!
    password: string; // String!
    title: NexusGenEnums['TitleEnum']; // TitleEnum!
    userName: string; // String!
  }
  RemoveAbsenceInput: { // input type
    _id: string; // ID!
  }
  RemoveAssignedSeatInput: { // input type
    cohortBased: boolean; // Boolean!
    cohortType?: NexusGenEnums['StudentCohortEnum'] | null; // StudentCohortEnum
    courseId: string; // ID!
    deskNumber: number; // Int!
  }
  RemoveCourseInput: { // input type
    courseId: string; // ID!
  }
  RemoveLatenessInput: { // input type
    _id: string; // ID!
  }
  RemoveProtocolInput: { // input type
    assignedDate: NexusGenScalars['Date']; // Date!
    lessonId: string; // ID!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    studentIds: string[]; // [ID!]!
    task: string; // String!
  }
  RemoveRubricEntryInput: { // input type
    rubricEntryId: string; // ID!
  }
  RemoveSchoolDayInput: { // input type
    schoolDayId: string; // ID!
  }
  RemoveStudentBehaviorInput: { // input type
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    studentBehaviorId: string; // ID!
  }
  RemoveStudentsFromCourseInput: { // input type
    courseId: string; // ID!
    studentIds: string[]; // [ID!]!
  }
  RemoveSubmittedEssayFinalDraftInput: { // input type
    essayId: string; // ID!
  }
  RemoveTextSectionInput: { // input type
    _id: string; // ID!
  }
  ResetPasswordInput: { // input type
    userId: string; // String!
  }
  RespondToProtocolInput: { // input type
    protocolId: string; // ID!
    response: string; // String!
  }
  ResubmitEssayFinalDraftInput: { // input type
    essayId: string; // ID!
    submittedFinalDraft: NexusGenInputs['SubmittedFinalDraftsInput']; // SubmittedFinalDraftsInput!
  }
  ReturnArticleReviewInput: { // input type
    articleReviewId: string; // ID!
  }
  ReturnGradedEssayInput: { // input type
    _id: string; // ID!
    additionalComments?: string[] | null; // [String!]
    draftNumber: number; // Int!
    gradingDraft: string; // String!
    rubricEntries: NexusGenInputs['ReturnedRubricEntryInput'][]; // [ReturnedRubricEntryInput!]!
    score: number; // Float!
  }
  ReturnReadingGuideInput: { // input type
    readingGuideId: string; // ID!
    score: number; // Int!
  }
  ReturnedRubricEntryInput: { // input type
    _id?: string | null; // ID
    entry: string; // String!
    howToImprove?: string | null; // String
    rubricSection: NexusGenEnums['RubricSectionEnum']; // RubricSectionEnum!
    score: number; // Int!
  }
  ReviewReadingGuidesInput: { // input type
    effort: NexusGenEnums['ReadingGuideReviewOptionsEnum']; // ReadingGuideReviewOptionsEnum!
    readingGuideId: string; // ID!
  }
  RubricEntryInput: { // input type
    entry: string; // String!
    rubricSection: NexusGenEnums['RubricSectionEnum']; // RubricSectionEnum!
    rubricWritingLevels: NexusGenEnums['WritingLevelEnum'][]; // [WritingLevelEnum!]!
    score: number; // Int!
  }
  SetAnswerTypeInput: { // input type
    essayId: string; // ID!
    questionType: NexusGenEnums['QuestionTypeEnum']; // QuestionTypeEnum!
  }
  SetCurrentMarkingPeriodInput: { // input type
    currentMarkingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
  }
  SetOrganizerInput: { // input type
    essayId: string; // ID!
    writingLevel: NexusGenEnums['WritingLevelEnum']; // WritingLevelEnum!
  }
  StartProtocolInput: { // input type
    isActive: boolean; // Boolean!
    lessonId: string; // ID!
    task: string; // String!
  }
  StartQuizInput: { // input type
    quizId: string; // ID!
  }
  StartReadingGuideInput: { // input type
    paperBased: boolean; // Boolean!
    readingGuideId: string; // ID!
  }
  StudentSeatInput: { // input type
    deskNumber: number; // Int!
    redCohortStudentId?: string | null; // ID
    studentId?: string | null; // ID
    whiteCohortStudentId?: string | null; // ID
  }
  StudentSignInInput: { // input type
    courseId: string; // ID!
    lessonDate: string; // String!
    studentId: string; // ID!
    virtual?: boolean | null; // Boolean
  }
  SubmitArticleReviewInput: { // input type
    articleReviewId: string; // ID!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
  }
  SubmitEssayFinalDraftInput: { // input type
    _id: string; // ID!
    late: boolean; // Boolean!
    paperBased: boolean; // Boolean!
    submittedFinalDraft: NexusGenInputs['SubmittedFinalDraftsInput']; // SubmittedFinalDraftsInput!
    submitTime: string; // String!
  }
  SubmitReadingGuideInput: { // input type
    completeReadingGuide?: boolean | null; // Boolean
    late: boolean; // Boolean!
    paperBased: boolean; // Boolean!
    readingGuideId: string; // ID!
    submitTime: string; // String!
  }
  SubmittedFinalDraftsInput: { // input type
    additionalComments?: string[] | null; // [String!]
    draft: NexusGenScalars['JSON']; // JSON!
    draftNumber: number; // Int!
    graded: boolean; // Boolean!
    gradingDraft: NexusGenScalars['JSON']; // JSON!
    rubricEntries: NexusGenInputs['RubricEntryInput'][]; // [RubricEntryInput!]!
    score: number; // Float!
  }
  SwitchToNewCourseInput: { // input type
    newCourseId: string; // ID!
    studentId: string; // ID!
  }
  TextChapterInput: { // input type
    chapterNumber: number; // Int!
    chapterTitle: string; // String!
  }
  TextInput: { // input type
    chapters: string[]; // [String!]!
    textTitle: string; // String!
  }
  TextSectionProtocolsInput: { // input type
    academicOutcomeTypes: NexusGenEnums['AcademicOutcomeTypes']; // AcademicOutcomeTypes!
    activityType: NexusGenEnums['ProtocolActivityTypes']; // ProtocolActivityTypes!
    completed: boolean; // Boolean!
    isActive: boolean; // Boolean!
    task: string; // String!
  }
  TextSectionQuestionsInput: { // input type
    question: string; // String!
    questionType: NexusGenEnums['QuestionTypeEnum']; // QuestionTypeEnum!
  }
  TextSectionVocabInput: { // input type
    definition: string; // String!
    word: string; // String!
  }
  ToggleClassAssignmentsAllowedInput: { // input type
    courseId: string; // ID!
  }
  TopicInput: { // input type
    essayQuestionId: string; // ID!
    question: string; // String!
    questionType: NexusGenEnums['QuestionTypeEnum']; // QuestionTypeEnum!
    writingLevel: NexusGenEnums['WritingLevelEnum']; // WritingLevelEnum!
  }
  TopicTypeInput: { // input type
    writingLevel?: NexusGenEnums['WritingLevelEnum'] | null; // WritingLevelEnum
  }
  UnAssignEssaysInput: { // input type
    section: string; // String!
    studentIds: string[]; // [ID!]!
  }
  UnAssignQuizByQuizIdInput: { // input type
    quizId: string; // ID!
  }
  UnitInput: { // input type
    _id: string; // ID!
    unitName: string; // String!
  }
  UpdateAcademicOrganizerInput: { // input type
    academicSentenceStructure: NexusGenInputs['AcademicSentenceStructureInput']; // AcademicSentenceStructureInput!
    conclusion: string; // String!
    essayId: string; // ID!
    restatement: string; // String!
  }
  UpdateAdvancedOrganizerInput: { // input type
    advancedSentenceStructure: NexusGenInputs['AdvancedSentenceStructureInput']; // AdvancedSentenceStructureInput!
    conclusion: string; // String!
    essayId: string; // ID!
    restatement: string; // String!
  }
  UpdateArticleReviewInput: { // input type
    articleAuthor: string; // String!
    articleLink: string; // String!
    articleReviewId: string; // ID!
    articleTitle: string; // String!
    bias?: boolean | null; // Boolean
    issue: string; // String!
    publishedDate?: string | null; // String
    solutions?: string | null; // String
    topicsImportance: string; // String!
  }
  UpdateCourseInfoInput: { // input type
    cohortBasedSeating?: boolean | null; // Boolean
    courseId: string; // ID!
    courseMaxSize: NexusGenEnums['CourseMaxSizeEnum']; // CourseMaxSizeEnum!
    courseType?: NexusGenEnums['CourseTypeEnum'] | null; // CourseTypeEnum
    endsAt?: string | null; // String
    halfDayEndsAt?: string | null; // String
    halfDayStartsAt?: string | null; // String
    name: string; // String!
    schoolDayType?: NexusGenEnums['SchoolDayType'] | null; // SchoolDayType
    startsAt?: string | null; // String
  }
  UpdateDevelopingOrganizerInput: { // input type
    answer: string; // String!
    basicQuestionType: NexusGenEnums['BasicQuestionEnum']; // BasicQuestionEnum!
    conclusion: string; // String!
    developingSentenceStructure: NexusGenInputs['DevelopingSentenceStructureInput']; // DevelopingSentenceStructureInput!
    essayId: string; // ID!
    restatement: string; // String!
  }
  UpdateDynamicLessonInput: { // input type
    dynamicLessonUpdate: NexusGenEnums['DynamicLessonEnums']; // DynamicLessonEnums!
    lessonId: string; // ID!
  }
  UpdateEssayByStudentInput: { // input type
    dueDate: NexusGenScalars['Date']; // Date!
    section: string; // String!
    studentId: string; // ID!
    topic?: NexusGenInputs['TopicInput'] | null; // TopicInput
  }
  UpdateEssayLatenessInput: { // input type
    essayId: string; // ID!
    lateness: boolean; // Boolean!
  }
  UpdateEssaysByLessonInput: { // input type
    lessonId: string; // ID!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
  }
  UpdateEssaysByQuestionInput: { // input type
    newQuestion: string; // String!
    newQuestionType: NexusGenEnums['QuestionTypeEnum']; // QuestionTypeEnum!
    newWritingLevel: NexusGenEnums['WritingLevelEnum']; // WritingLevelEnum!
    originalQuestion: string; // String!
  }
  UpdateEssaysByStudentsAndSectionInput: { // input type
    assignedDate: NexusGenScalars['Date']; // Date!
    dueDate: NexusGenScalars['Date']; // Date!
    dueTime: string; // String!
    markingPeriod?: NexusGenEnums['MarkingPeriodEnum'] | null; // MarkingPeriodEnum
    maxPoints: number; // Int!
    section: string; // String!
    studentId: string[]; // [ID!]!
  }
  UpdateGradingDraftInput: { // input type
    draftNumber?: number | null; // Int
    essayId: string; // ID!
    gradingDraft?: NexusGenScalars['JSON'] | null; // JSON
  }
  UpdateHowCauseEffectInput: { // input type
    after: string; // String!
    before: string; // String!
    cause: string; // String!
    essayId: string; // ID!
  }
  UpdateLessonInput: { // input type
    afterActivity: NexusGenInputs['TextSectionProtocolsInput']; // TextSectionProtocolsInput!
    assignedDate: NexusGenScalars['Date']; // Date!
    assignedMarkingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    assignedSectionIdList: string[]; // [ID!]!
    assignedSections: NexusGenInputs['LessonTextSectionsInput']; // LessonTextSectionsInput!
    beforeActivity: NexusGenInputs['TextSectionProtocolsInput']; // TextSectionProtocolsInput!
    duringActivities: NexusGenInputs['TextSectionProtocolsInput'][]; // [TextSectionProtocolsInput!]!
    essentialQuestion: string; // String!
    inUnit: string; // ID!
    lessonName: string; // String!
    linkedCourseIds: string[]; // [ID!]!
    pageNumbers: NexusGenInputs['PageNumbersInput']; // PageNumbersInput!
    questionList: NexusGenInputs['TextSectionQuestionsInput'][]; // [TextSectionQuestionsInput!]!
    vocabList: NexusGenInputs['TextSectionVocabInput'][]; // [TextSectionVocabInput!]!
  }
  UpdateLessonProtocolInput: { // input type
    assignedDate: NexusGenScalars['Date']; // Date!
    isActive: boolean; // Boolean!
    lessonId: string; // ID!
    studentIds: string[]; // [ID!]!
    task: string; // String!
  }
  UpdateParentContactInput: { // input type
    contactId: string; // ID!
    contactType: NexusGenEnums['ContactTypeEnum']; // ContactTypeEnum!
    contentOfContact: string; // String!
    date: string; // String!
    studentId: string; // ID!
    teacherId: string; // ID!
  }
  UpdateProblemSolutionInput: { // input type
    essayId: string; // ID!
    problem: string; // String!
    reasonForProblem: string; // String!
    solvedBy: string; // String!
    whySolutionSolved: string; // String!
  }
  UpdateReadingGuideInput: { // input type
    biggestProblem: string; // String!
    howArePeopleInvolvedInProblems: string; // String!
    importantPeople: string[]; // [String!]!
    problems: string[]; // [String!]!
    readingGuideId: string; // ID!
    reasonForBiggestProblem: string; // String!
    sectionConsequences: string; // String!
  }
  UpdateResponsibilityPointsInput: { // input type
    markingPeriod?: NexusGenEnums['MarkingPeriodEnum'] | null; // MarkingPeriodEnum
    points: number; // Float!
    studentId: string; // ID!
  }
  UpdateRubricEntryInput: { // input type
    entry: string; // String!
    howToImprove?: string | null; // String
    rubricEntryId: string; // ID!
    rubricSection: NexusGenEnums['RubricSectionEnum']; // RubricSectionEnum!
    rubricWritingLevels: NexusGenEnums['WritingLevelEnum'][]; // [WritingLevelEnum!]!
    score: number; // Int!
  }
  UpdateSchoolDayInput: { // input type
    schoolDayId: string; // ID!
    updatedCohortWeek: NexusGenEnums['StudentCohortEnum']; // StudentCohortEnum!
    updatedCurrentSchoolDayType: NexusGenEnums['SchoolDayType']; // SchoolDayType!
    updatedDate: NexusGenScalars['Date']; // Date!
    updatedSchoolDayCount: number; // Int!
  }
  UpdateTemporaryTasksInput: { // input type
    courseId: string; // ID!
    dateIssued: string; // String!
    newDateIssued?: string | null; // String
    newTaskNumber?: number | null; // Int
    taskNumber: number; // Int!
  }
  UpdateTextSectionInput: { // input type
    _id: string; // ID!
    fromChapterId: string; // String!
    hasProtocols: NexusGenInputs['TextSectionProtocolsInput'][]; // [TextSectionProtocolsInput!]!
    hasQuestions: NexusGenInputs['TextSectionQuestionsInput'][]; // [TextSectionQuestionsInput!]!
    hasVocab: NexusGenInputs['TextSectionVocabInput'][]; // [TextSectionVocabInput!]!
    header: string; // String!
    pageNumbers: NexusGenInputs['PageNumbersInput']; // PageNumbersInput!
  }
  UpdateWhyCauseEffectInput: { // input type
    essayId: string; // ID!
    proximateCause: string; // String!
    ultimateCause: string; // String!
  }
  UpdateWorkingDraftInput: { // input type
    _id: string; // ID!
    updatedDraft: NexusGenScalars['JSON']; // JSON!
  }
}

export interface NexusGenEnums {
  AcademicOutcomeTypes: "CAUSE_AND_EFFECT_RECOGNITION" | "LOGIC_BUILDING" | "SCHEMA_BUIDING" | "SOCRATIC_QUESTIONS"
  BasicQuestionEnum: "HOW" | "WHY"
  BehaviorEnum: "ANSWERED_QUESTION" | "DID_NOT_ANSWER_QUESTION" | "DISRESPECTFUL" | "DISRUPTIVE" | "UNPREPARED"
  ContactTypeEnum: "EMAIL" | "PHONE" | "VIDEO"
  CourseMaxSizeEnum: "THIRTY" | "THIRTY_SIX" | "TWELVE" | "TWENTY_FOUR" | "TWENTY_SIX"
  CourseTypeEnum: "ENGLISH_LANGUAGE_ARTS" | "MATH" | "RELATED_ARTS" | "SCIENCE" | "SOCIAL_STUDIES"
  DiscussionTypesEnum: "DISCUSSED" | "LITTLE_TO_NO_DISCUSSION" | "NOT_REQUIRED" | "SOME_DISCUSSION" | "THOROUGHLY_DISCUSSED"
  DynamicLessonEnums: "ASSIGNED_SEATING" | "EXIT_ACTIVITY" | "LESSON_DETAILS" | "OFF" | "ON" | "PROTOCOLS" | "VOCAB" | "WARM_UP"
  GradeTypeEnum: "PRIMARY" | "SECONDARY" | "SUPPORTIVE"
  InformationStructureEnum: "CAUSE_EFFECT" | "COMPARE_CONTRAST" | "PROBLEM_SOLUTION" | "SEQUENCE"
  LessonTypeEnum: "INTRODUCTORY" | "REINFORCEMENT"
  MarkingPeriodEnum: "FIRST" | "FOURTH" | "SECOND" | "THIRD"
  NounTypeEnum: "IDEA" | "IDEAS" | "PEOPLE" | "PERSON" | "PLACE" | "PLACES" | "THING" | "THINGS"
  ProtocolActivityTypes: "INDIVIDUAL" | "SMALL_GROUP" | "THINK_PAIR_SHARE"
  ProtocolAssessmentEnum: "REFUSED_TO_WORK" | "SLOW_TO_GET_STARTED" | "WORKED_POORLY" | "WORKED_VERY_WELL" | "WORKED_WELL"
  QuestionTypeEnum: "HOW_CAUSE_EFFECT" | "HOW_PROBLEM_SOLUTION" | "WHY_CAUSE_EFFECT"
  QuestionUsageTypeEnum: "ESSAY" | "ESSENTIAL_QUESTION" | "QUIZ"
  QuestionWordEnum: "HOW" | "WHY"
  QuizQuestionDifficultyLevelEnum: "CHALLENGING" | "DIFFICULT" | "EASY"
  QuizQuestionTypeEnum: "MULTIPLE_CHOICE" | "TRUE_FALSE"
  ReadingGuideReviewOptionsEnum: "GOOD_EFFORT" | "LITTLE_EFFORT" | "NO_EFFORT" | "SOME_EFFORT"
  RubricSectionEnum: "ANSWER" | "CONCLUSION" | "GENERAL" | "OVERALL" | "TOPIC"
  SchoolDayLengthEnum: "FULL" | "HALF" | "ONE_HOUR_DELAY"
  SchoolDayType: "A" | "AB" | "B"
  StudentCohortEnum: "RED" | "WHITE"
  TimeOfDay: "AFTER_CLASS" | "AFTER_SCHOOL" | "BEFORE_CLASS" | "BEFORE_SCHOOL"
  TitleEnum: "MISS" | "MR" | "MRS" | "MS"
  VerbTypeEnum: "ACTION" | "BEING" | "FEELING" | "HAVING"
  WritingLevelEnum: "ACADEMIC" | "ADVANCED" | "DEVELOPING"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: Date
  DateTime: DateTime
  JSON: JSON
  Time: Time
}

export interface NexusGenRootTypes {
  AcademicOrganizer: { // root type
    academicSentenceStructure: NexusGenRootTypes['AcademicSentenceStructure']; // AcademicSentenceStructure!
    answerType?: NexusGenRootTypes['AnswerTypes'] | null; // AnswerTypes
    conclusion: string; // String!
    questionType?: NexusGenEnums['QuestionTypeEnum'] | null; // QuestionTypeEnum
    restatement: string; // String!
  }
  AcademicSentenceStructure: { // root type
    object?: string | null; // String
    subject: string; // String!
    subjectCompliment?: string | null; // String
    verb: string; // String!
  }
  ActivateQuizPayload: { // root type
    activated: boolean; // Boolean!
  }
  AddAssociatedCourseIdPayload: { // root type
    courseInfo: NexusGenRootTypes['CourseInfo'][]; // [CourseInfo!]!
  }
  AddCourseToTeacherPayload: { // root type
    teacher: NexusGenRootTypes['Teacher']; // Teacher!
  }
  AddDeskToAssignedSeatsPayload: { // root type
    courseInfo: NexusGenRootTypes['CourseInfo']; // CourseInfo!
  }
  AddFieldsToReadingGuidePayload: { // root type
    added: boolean; // Boolean!
  }
  AddForcedFinishedToAllQuizzesPayload: { // root type
    added: boolean; // Boolean!
  }
  AddIEPInfoPayload: { // root type
    added: boolean; // Boolean!
  }
  AddNewChapterPayload: { // root type
    chapter: NexusGenRootTypes['Chapter']; // Chapter!
  }
  AddNewTextPayload: { // root type
    text: NexusGenRootTypes['Text']; // Text!
  }
  AddStudentsToCoursePayload: { // root type
    students: NexusGenRootTypes['Student'][]; // [Student!]!
  }
  AddUserEmailPayload: { // root type
    user: NexusGenRootTypes['User']; // User!
  }
  AddVocabWordPayload: { // root type
    textSection: NexusGenRootTypes['TextSection']; // TextSection!
  }
  AdvancedOrganizer: { // root type
    advancedSentenceStructure: NexusGenRootTypes['AdvancedSentenceStructure']; // AdvancedSentenceStructure!
    answerType?: NexusGenRootTypes['AnswerTypes'] | null; // AnswerTypes
    conclusion: string; // String!
    questionType?: NexusGenEnums['QuestionTypeEnum'] | null; // QuestionTypeEnum
    restatement: string; // String!
  }
  AdvancedSentenceStructure: { // root type
    object?: string | null; // String
    subject: string; // String!
    subjectCompliment?: string | null; // String
    verb: string; // String!
  }
  AnswerList: { // root type
    answer: string; // String!
    correct: boolean; // Boolean!
    partiallyCorrect: boolean; // Boolean!
    removable: boolean; // Boolean!
  }
  ArticleReview: { // root type
    _id?: string | null; // ID
    articleAuthor: string; // String!
    articleLink: string; // String!
    articleTitle: string; // String!
    assigned: boolean; // Boolean!
    assignedDate: string; // String!
    bias?: boolean | null; // Boolean
    completed: boolean; // Boolean!
    dueDate: string; // String!
    dueTime: string; // String!
    exempt: boolean; // Boolean!
    hasAssigner: NexusGenRootTypes['Teacher']; // Teacher!
    hasOwner: NexusGenRootTypes['Student']; // Student!
    issue: string; // String!
    late: boolean; // Boolean!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    paperBased: boolean; // Boolean!
    publishedDate?: string | null; // String
    returned: boolean; // Boolean!
    score: NexusGenRootTypes['Score']; // Score!
    solutions?: string | null; // String
    submitted: boolean; // Boolean!
    topicsImportance: string; // String!
  }
  AssessIndividualProtocolsPayload: { // root type
    protocol: NexusGenRootTypes['Protocol']; // Protocol!
  }
  AssessStudentProtocolPayload: { // root type
    protocols: NexusGenRootTypes['Protocol'][]; // [Protocol!]!
  }
  AssignEssaysPayload: { // root type
    essays: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  AssignQuizzesByStudentIdsAndDatePayload: { // root type
    quizzes: NexusGenRootTypes['Quiz'][]; // [Quiz!]!
  }
  AssignReadingGuidesPayload: { // root type
    readingGuides: NexusGenRootTypes['ReadingGuide'][]; // [ReadingGuide!]!
  }
  AssignSeatsPayload: { // root type
    courseInfo: NexusGenRootTypes['CourseInfo']; // CourseInfo!
  }
  BuildRubricEntryPayload: { // root type
    rubricEntry: NexusGenRootTypes['RubricEntry']; // RubricEntry!
  }
  ChangeAllQuizzesToSecondMarkingPeriodPayload: { // root type
    changed: boolean; // Boolean!
  }
  ChangePasswordPayload: { // root type
    user: NexusGenRootTypes['User']; // User!
  }
  Chapter: { // root type
    _id?: string | null; // ID
    chapterNumber: number; // Int!
    chapterTitle: string; // String!
    fromText: NexusGenRootTypes['Text']; // Text!
  }
  ComprehensionMetrics: { // root type
    _id?: string | null; // ID
    comprehensionLevel: number; // Int!
    student: NexusGenRootTypes['Student']; // Student!
  }
  ContactInfo: { // root type
    guardianEmail: string; // String!
    guardianFirstName: string; // String!
    guardianLastName: string; // String!
    guardianPhone: string; // String!
  }
  ControlCoolDownPayload: { // root type
    lesson: NexusGenRootTypes['Lesson']; // Lesson!
  }
  ControlWarmUpPayload: { // root type
    lesson: NexusGenRootTypes['Lesson']; // Lesson!
  }
  Course: { // root type
    _id?: string | null; // ID
    name: string; // String!
  }
  CourseInfo: { // root type
    _id?: string | null; // ID
    assignedSeats: NexusGenRootTypes['StudentSeat'][]; // [StudentSeat!]!
    assignmentsInClassNotAllowed: boolean; // Boolean!
    associatedCourseId?: string | null; // ID
    cohortBasedSeating: boolean; // Boolean!
    course: NexusGenRootTypes['Course']; // Course!
    courseType: NexusGenEnums['CourseTypeEnum']; // CourseTypeEnum!
    endsAt: string; // String!
    halfDayEndsAt: string; // String!
    halfDayStartsAt: string; // String!
    hasTeacher: NexusGenRootTypes['Teacher']; // Teacher!
    schoolDayType: NexusGenEnums['SchoolDayType']; // SchoolDayType!
    startsAt: string; // String!
  }
  CreateAbsencePayload: { // root type
    studentAbsence: NexusGenRootTypes['StudentAbsence']; // StudentAbsence!
  }
  CreateArticleReviewsPayload: { // root type
    articleReviews: NexusGenRootTypes['ArticleReview'][]; // [ArticleReview!]!
  }
  CreateCourseInfoPayload: { // root type
    courseInfo: NexusGenRootTypes['CourseInfo']; // CourseInfo!
  }
  CreateCoursePayload: { // root type
    course: NexusGenRootTypes['Course']; // Course!
  }
  CreateEssayPayload: { // root type
    essays: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  CreateEssayQuestionPayload: { // root type
    essayQuestion: NexusGenRootTypes['EssayQuestion']; // EssayQuestion!
  }
  CreateEssentialQuestionPayload: { // root type
    essentialQuestion: NexusGenRootTypes['EssentialQuestion']; // EssentialQuestion!
  }
  CreateExcusedLatenessPayload: { // root type
    excusedLateness: NexusGenRootTypes['ExcusedLateness']; // ExcusedLateness!
  }
  CreateLessonPayload: { // root type
    lessons: NexusGenRootTypes['Lesson'][]; // [Lesson!]!
  }
  CreateParentContactPayload: { // root type
    parentContact: NexusGenRootTypes['ParentContact']; // ParentContact!
  }
  CreateProtocolPayload: { // root type
    protocols: NexusGenRootTypes['Protocol'][]; // [Protocol!]!
  }
  CreateQuizQuestionPayload: { // root type
    quizQuestion: NexusGenRootTypes['QuizQuestion']; // QuizQuestion!
  }
  CreateQuizzesByCoursePayload: { // root type
    quizzes: NexusGenRootTypes['Quiz'][]; // [Quiz!]!
  }
  CreateReadingGuidePayload: { // root type
    readingGuides: NexusGenRootTypes['ReadingGuide'][]; // [ReadingGuide!]!
  }
  CreateResponsibilityPointsPayload: { // root type
    responsibilityPoints: NexusGenRootTypes['ResponsibilityPoints'][]; // [ResponsibilityPoints!]!
  }
  CreateSchoolDayPayload: { // root type
    schoolDay: NexusGenRootTypes['SchoolDay']; // SchoolDay!
  }
  CreateSchoolDayTrackerPayload: { // root type
    schoolDayTracker: NexusGenRootTypes['SchoolDayTracker']; // SchoolDayTracker!
  }
  CreateSignInSheetsPayload: { // root type
    schoolDay: NexusGenRootTypes['SchoolDay']; // SchoolDay!
  }
  CreateStudentBehaviorPayload: { // root type
    studentBehavior: NexusGenRootTypes['StudentBehavior']; // StudentBehavior!
  }
  CreateStudentQuestionPayload: { // root type
    studentQuestions: NexusGenRootTypes['StudentQuestions']; // StudentQuestions!
  }
  CreateStudentQuestionsContainerPayload: { // root type
    studentQuestions: NexusGenRootTypes['StudentQuestions']; // StudentQuestions!
  }
  CreateTemporaryTasksPayload: { // root type
    temporaryTasks: NexusGenRootTypes['TemporaryTask'][]; // [TemporaryTask!]!
  }
  CreateTextSectionPayload: { // root type
    textSection: NexusGenRootTypes['TextSection']; // TextSection!
  }
  CreateUnexcusedLatenessPayload: { // root type
    unexcusedLateness: NexusGenRootTypes['UnexcusedLateness']; // UnexcusedLateness!
  }
  CreateUnitPayload: { // root type
    unit: NexusGenRootTypes['Unit']; // Unit!
  }
  CreateWritingMetricsPayload: { // root type
    created: boolean; // Boolean!
  }
  DeleteAllAssignmentsPayload: { // root type
    removed: boolean; // Boolean!
  }
  DeleteAllParentContactsPayload: { // root type
    removed: boolean; // Boolean!
  }
  DeleteAllProtocolsPayload: { // root type
    removed: boolean; // Boolean!
  }
  DeleteAllSchoolDaysPayload: { // root type
    removed: boolean; // Boolean!
  }
  DeleteAllStudentDataPayload: { // root type
    removed: boolean; // Boolean!
  }
  DeleteAllTemporaryTasksPayload: { // root type
    removed: boolean; // Boolean!
  }
  DeleteReviewsPayload: { // root type
    removed: boolean; // Boolean!
  }
  DeleteTemporaryTasksPayload: { // root type
    removed: boolean; // Boolean!
  }
  DevelopingOrganizer: { // root type
    answer: string; // String!
    basicQuestionType?: NexusGenEnums['BasicQuestionEnum'] | null; // BasicQuestionEnum
    conclusion: string; // String!
    developingSentenceStructure: NexusGenRootTypes['DevelopingSentenceStructure']; // DevelopingSentenceStructure!
    restatement: string; // String!
  }
  DevelopingSentenceStructure: { // root type
    object?: string | null; // String
    subject: string; // String!
    subjectCompliment?: string | null; // String
    verb: string; // String!
  }
  EmergencyModificationPayload: { // root type
    modified: boolean; // Boolean!
  }
  Essay: { // root type
    _id?: string | null; // ID
    assigned: boolean; // Boolean!
    assignedDate: string; // String!
    associatedLessonId?: string | null; // ID
    dueDate: string; // String!
    dueTime: string; // String!
    exempt: boolean; // Boolean!
    finalDraft?: NexusGenRootTypes['FinalDraftContainer'] | null; // FinalDraftContainer
    gradeType: NexusGenEnums['GradeTypeEnum']; // GradeTypeEnum!
    hasAssigner: NexusGenRootTypes['Teacher']; // Teacher!
    hasOwner: NexusGenRootTypes['Student']; // Student!
    late: boolean; // Boolean!
    leveledUp: boolean; // Boolean!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    missing: boolean; // Boolean!
    paperBased: boolean; // Boolean!
    readings: NexusGenRootTypes['Readings']; // Readings!
    score: NexusGenRootTypes['Score']; // Score!
    topic: NexusGenRootTypes['Topic']; // Topic!
    workingDraft: NexusGenRootTypes['WorkingDraft']; // WorkingDraft!
  }
  EssayQuestion: { // root type
    _id?: string | null; // ID
    associatedTextSectionsIds: string[]; // [ID!]!
    questionParts: NexusGenRootTypes['QuestionPartsContainer']; // QuestionPartsContainer!
    questionUsageType: NexusGenEnums['QuestionUsageTypeEnum']; // QuestionUsageTypeEnum!
  }
  EssentialQuestion: { // root type
    _id?: string | null; // ID
    associatedTextSectionsIds: string[]; // [ID!]!
    question: string; // String!
    questionUsageType: NexusGenEnums['QuestionUsageTypeEnum']; // QuestionUsageTypeEnum!
  }
  ExcusedLateness: { // root type
    _id?: string | null; // ID
    dayLateExcused: NexusGenScalars['Date']; // Date!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    student: NexusGenRootTypes['Student']; // Student!
  }
  ExemptArticleReviewPayload: { // root type
    articleReview: NexusGenRootTypes['ArticleReview']; // ArticleReview!
  }
  FinalDraftContainer: { // root type
    returned: boolean; // Boolean!
    submitted: boolean; // Boolean!
    submittedFinalDraft: NexusGenRootTypes['SubmittedFinalDraft'][]; // [SubmittedFinalDraft!]!
    submitTime?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  FindActiveProtocolByStudentPayload: { // root type
    protocol: NexusGenRootTypes['Protocol']; // Protocol!
  }
  FindActiveProtocolsByCoursePayload: { // root type
    protocols: NexusGenRootTypes['Protocol'][]; // [Protocol!]!
  }
  FindAllCourseTitlesPayload: { // root type
    courses: NexusGenRootTypes['Course'][]; // [Course!]!
  }
  FindAllStudentsPayload: { // root type
    students: NexusGenRootTypes['Student'][]; // [Student!]!
  }
  FindAllUsersPayload: { // root type
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  FindArticleReviewByIdPayload: { // root type
    articleReview: NexusGenRootTypes['ArticleReview']; // ArticleReview!
  }
  FindArticleReviewsByCoursePayload: { // root type
    articleReviews: NexusGenRootTypes['ArticleReview'][]; // [ArticleReview!]!
  }
  FindArticleReviewsByStudentPayload: { // root type
    articleReviews: NexusGenRootTypes['ArticleReview'][]; // [ArticleReview!]!
  }
  FindAssignmentByIdPayload: { // root type
    assignment: NexusGenRootTypes['Assignment']; // Assignment!
  }
  FindAssignmentByStudentIdPayload: { // root type
    articleReviews: NexusGenRootTypes['ArticleReview'][]; // [ArticleReview!]!
    assignments: NexusGenRootTypes['Assignment'][]; // [Assignment!]!
  }
  FindAssignmentsByCourseIdPayload: { // root type
    assignments: NexusGenRootTypes['Assignment'][]; // [Assignment!]!
  }
  FindAssignmentsToGradePayload: { // root type
    assignments: NexusGenRootTypes['Assignment'][]; // [Assignment!]!
  }
  FindChapterTitlePayload: { // root type
    chapter: NexusGenRootTypes['Chapter']; // Chapter!
  }
  FindChaptersByTextIdPayload: { // root type
    chapters: NexusGenRootTypes['Chapter'][]; // [Chapter!]!
  }
  FindChaptersInTextPayload: { // root type
    chapters: NexusGenRootTypes['Chapter'][]; // [Chapter!]!
  }
  FindCompletedEssaysByStudentIdPayload: { // root type
    essays: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  FindContactsByStudentIdPayload: { // root type
    parentContacts: NexusGenRootTypes['ParentContact'][]; // [ParentContact!]!
  }
  FindCourseByIdPayload: { // root type
    course: NexusGenRootTypes['Course']; // Course!
  }
  FindCourseInfoByCourseIdPayload: { // root type
    courseInfo: NexusGenRootTypes['CourseInfo']; // CourseInfo!
  }
  FindCoursesByIdPayload: { // root type
    courses: NexusGenRootTypes['Course'][]; // [Course!]!
  }
  FindCurrentMarkingPeriodPayload: { // root type
    markingPeriod: NexusGenRootTypes['MarkingPeriod']; // MarkingPeriod!
  }
  FindEssayByIdPayload: { // root type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  FindEssayByStudentIdAndLessonIdPayload: { // root type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  FindEssayQuestionByIdPayload: { // root type
    essayQuestion: NexusGenRootTypes['EssayQuestion']; // EssayQuestion!
  }
  FindEssaysByAssociatedLessonIdAndCourseIdPayload: { // root type
    essays: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  FindEssaysByAssociatedLessonIdPayload: { // root type
    essays: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  FindEssaysByUserNameAndMarkingPeriodPayload: { // root type
    essay?: NexusGenRootTypes['Essay'][] | null; // [Essay!]
  }
  FindEssaysToCompleteByStudentIdPayload: { // root type
    essays: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  FindEssaysToGradeByIdPayload: { // root type
    essays: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  FindEssentialQuestionsByAssociatedTextSectionIdsPayload: { // root type
    essentialQuestions: NexusGenRootTypes['EssentialQuestion'][]; // [EssentialQuestion!]!
  }
  FindLessonByCourseAndDatePayload: { // root type
    lesson?: NexusGenRootTypes['Lesson'] | null; // Lesson
  }
  FindLessonByCoursePayload: { // root type
    lessons: NexusGenRootTypes['Lesson'][]; // [Lesson!]!
  }
  FindLessonByIdPayload: { // root type
    lesson: NexusGenRootTypes['Lesson']; // Lesson!
  }
  FindLessonStatusPayload: { // root type
    lesson: NexusGenRootTypes['Lesson']; // Lesson!
  }
  FindLessonsByAssignedDatePayload: { // root type
    lessons?: NexusGenRootTypes['Lesson'][] | null; // [Lesson!]
  }
  FindLessonsByUnitPayload: { // root type
    lessons: NexusGenRootTypes['Lesson'][]; // [Lesson!]!
  }
  FindParentContactsByTeacherIdPayload: { // root type
    parentContacts: NexusGenRootTypes['ParentContact'][]; // [ParentContact!]!
  }
  FindQuizByIdPayload: { // root type
    quiz: NexusGenRootTypes['Quiz']; // Quiz!
  }
  FindQuizQuestionsByQuizzableSectionsPayload: { // root type
    quizQuestions: NexusGenRootTypes['QuizQuestion'][]; // [QuizQuestion!]!
  }
  FindQuizQuestionsByTextSectionIdPayload: { // root type
    quizQuestions: NexusGenRootTypes['QuizQuestion'][]; // [QuizQuestion!]!
  }
  FindQuizzesByStudentIdPayload: { // root type
    quizzes: NexusGenRootTypes['Quiz'][]; // [Quiz!]!
  }
  FindQuizzesForCourseByAssignedDatePayload: { // root type
    quizzes: NexusGenRootTypes['Quiz'][]; // [Quiz!]!
  }
  FindReadingGuideByIdPayload: { // root type
    readingGuide: NexusGenRootTypes['ReadingGuide']; // ReadingGuide!
  }
  FindReadingGuideByUserIdAndReadingSectionPayload: { // root type
    readingGuide?: NexusGenRootTypes['ReadingGuide'] | null; // ReadingGuide
  }
  FindReadingGuidesByAssociatedLessonAndCourseIdPayload: { // root type
    readingGuides: NexusGenRootTypes['ReadingGuide'][]; // [ReadingGuide!]!
  }
  FindReadingGuidesByCourseIdAndAssignedDatePayload: { // root type
    readingGuides: NexusGenRootTypes['ReadingGuide'][]; // [ReadingGuide!]!
  }
  FindReadingGuidesByMarkingPeriodPayload: { // root type
    readingGuides: NexusGenRootTypes['ReadingGuide'][]; // [ReadingGuide!]!
  }
  FindReadingGuidesByReadingSectionPayload: { // root type
    readingGuides: NexusGenRootTypes['ReadingGuide'][]; // [ReadingGuide!]!
  }
  FindReadingGuidesToCompleteByStudentIdPayload: { // root type
    readingGuides: NexusGenRootTypes['ReadingGuide'][]; // [ReadingGuide!]!
  }
  FindResponsibilityPointsByCoursePayload: { // root type
    responsibilityPointList: NexusGenRootTypes['ResponsibilityPoints'][]; // [ResponsibilityPoints!]!
  }
  FindResponsibilityPointsByStudentIdPayload: { // root type
    responsibilityPoints: NexusGenRootTypes['ResponsibilityPoints'][]; // [ResponsibilityPoints!]!
  }
  FindRubricEntriesByCategoryPayload: { // root type
    rubricEntries: NexusGenRootTypes['RubricEntry'][]; // [RubricEntry!]!
  }
  FindRubricEntriesPayload: { // root type
    rubricEntries: NexusGenRootTypes['RubricEntry'][]; // [RubricEntry!]!
  }
  FindSchoolDayByDatePayload: { // root type
    schoolDay?: NexusGenRootTypes['SchoolDay'] | null; // SchoolDay
  }
  FindSchoolDayPayload: { // root type
    schoolDayTracker: NexusGenRootTypes['SchoolDayTracker']; // SchoolDayTracker!
  }
  FindStudentByIdPayload: { // root type
    student: NexusGenRootTypes['Student']; // Student!
  }
  FindStudentQuestionsPayload: { // root type
    studentQuestions: NexusGenRootTypes['StudentQuestion'][]; // [StudentQuestion!]!
  }
  FindStudentsByCoursePayload: { // root type
    students: NexusGenRootTypes['Student'][]; // [Student!]!
  }
  FindStudentsByIdPayload: { // root type
    students: NexusGenRootTypes['Student'][]; // [Student!]!
  }
  FindTemporaryTasksByStudentIdPayload: { // root type
    temporaryTasks: NexusGenRootTypes['TemporaryTask'][]; // [TemporaryTask!]!
  }
  FindTemporaryTasksPayload: { // root type
    temporaryTasks: NexusGenRootTypes['TemporaryTask'][]; // [TemporaryTask!]!
  }
  FindTextByTitlePayload: { // root type
    text: NexusGenRootTypes['Text']; // Text!
  }
  FindTextSectionByIdPayload: { // root type
    textSection: NexusGenRootTypes['TextSection']; // TextSection!
  }
  FindTextSectionsByChapterPayload: { // root type
    textSections: NexusGenRootTypes['TextSection'][]; // [TextSection!]!
  }
  FindTextSectionsByIdPayload: { // root type
    textSections: NexusGenRootTypes['TextSection'][]; // [TextSection!]!
  }
  FindTextsPayload: { // root type
    texts: NexusGenRootTypes['Text'][]; // [Text!]!
  }
  FindUnitsPayload: { // root type
    units: NexusGenRootTypes['Unit'][]; // [Unit!]!
  }
  FindUserDataPayload: { // root type
    user: NexusGenRootTypes['User']; // User!
  }
  FindWritingMetricsPayload: { // root type
    writingMetrics: NexusGenRootTypes['WritingMetrics']; // WritingMetrics!
  }
  FinishProtocolPayload: { // root type
    protocols: NexusGenRootTypes['Protocol'][]; // [Protocol!]!
  }
  FinishQuizPayload: { // root type
    quiz: NexusGenRootTypes['Quiz']; // Quiz!
  }
  ForceFinishQuizPayload: { // root type
    finished: boolean; // Boolean!
  }
  GradeArticleReviewPayload: { // root type
    articleReview: NexusGenRootTypes['ArticleReview']; // ArticleReview!
  }
  GradeTemporaryTaskPayload: { // root type
    temporaryTask: NexusGenRootTypes['TemporaryTask']; // TemporaryTask!
  }
  HowCauseEffectAnswerType: { // root type
    after: string; // String!
    before: string; // String!
    cause: string; // String!
  }
  HowCauseEffectMetrics: { // root type
    howCauseEffectLevel: NexusGenEnums['WritingLevelEnum']; // WritingLevelEnum!
    levelPoints: number; // Int!
  }
  HowProblemSolutionMetrics: { // root type
    howProblemSolutionLevel: NexusGenEnums['WritingLevelEnum']; // WritingLevelEnum!
    levelPoints: number; // Int!
  }
  InitializeStudentsPayload: { // root type
    students: NexusGenRootTypes['Student'][]; // [Student!]!
  }
  Lesson: { // root type
    _id?: string | null; // ID
    afterActivity: NexusGenRootTypes['TextSectionProtocols']; // TextSectionProtocols!
    assignedCourses: NexusGenRootTypes['Course'][]; // [Course!]!
    assignedDate: NexusGenScalars['Date']; // Date!
    assignedMarkingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    assignedSectionIdList: string[]; // [ID!]!
    assignedSections: NexusGenRootTypes['LessonTextSections']; // LessonTextSections!
    beforeActivity: NexusGenRootTypes['TextSectionProtocols']; // TextSectionProtocols!
    duringActivities: NexusGenRootTypes['TextSectionProtocols'][]; // [TextSectionProtocols!]!
    dynamicLesson: NexusGenEnums['DynamicLessonEnums']; // DynamicLessonEnums!
    essentialQuestion: string; // String!
    inUnit: NexusGenRootTypes['Unit']; // Unit!
    lessonName: string; // String!
    lessonNotes?: string[] | null; // [String!]
    lessonType: NexusGenEnums['LessonTypeEnum']; // LessonTypeEnum!
    objectives?: string | null; // String
    pageNumbers: NexusGenRootTypes['PageNumbers']; // PageNumbers!
    questionList: NexusGenRootTypes['TextSectionQuestions'][]; // [TextSectionQuestions!]!
    vocabList: NexusGenRootTypes['TextSectionVocab'][]; // [TextSectionVocab!]!
  }
  LessonTextSections: { // root type
    endingSection: string; // String!
    startingSection: string; // String!
  }
  LoginPayload: { // root type
    user: NexusGenRootTypes['User']; // User!
  }
  MarkAllProtocolsInactivePayload: { // root type
    inactive: boolean; // Boolean!
  }
  MarkExemptPayload: { // root type
    marked: boolean; // Boolean!
  }
  MarkTemporaryTaskAbsentPayload: { // root type
    temporaryTask: NexusGenRootTypes['TemporaryTask']; // TemporaryTask!
  }
  MarkingPeriod: { // root type
    _id?: string | null; // ID
    currentMarkingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
  }
  ModifyCourseInfoPayload: { // root type
    modified: boolean; // Boolean!
  }
  Mutation: {};
  OverallWritingMetric: { // root type
    levelPoints: number; // Float!
    overallWritingLevel: NexusGenEnums['WritingLevelEnum']; // WritingLevelEnum!
  }
  PageNumbers: { // root type
    endingPage: number; // Int!
    startingPage: number; // Int!
  }
  ParentContact: { // root type
    _id?: string | null; // ID
    contactType: NexusGenEnums['ContactTypeEnum']; // ContactTypeEnum!
    contentOfContact: string; // String!
    date: string; // String!
    student: NexusGenRootTypes['Student']; // Student!
    teacherId: string; // ID!
  }
  PasswordCheckPayload: { // root type
    firstTimeLoginIn: boolean; // Boolean!
  }
  ProblemSolutionAnswerType: { // root type
    problem: string; // String!
    reasonForProblem: string; // String!
    solvedBy: string; // String!
    whySolutionSolved: string; // String!
  }
  Protocol: { // root type
    _id?: string | null; // ID
    academicOutcomeType: NexusGenEnums['AcademicOutcomeTypes']; // AcademicOutcomeTypes!
    assessment?: NexusGenEnums['ProtocolAssessmentEnum'] | null; // ProtocolAssessmentEnum
    assignedDate: string; // String!
    completed: boolean; // Boolean!
    discussionLevel?: NexusGenEnums['DiscussionTypesEnum'] | null; // DiscussionTypesEnum
    endTime?: string | null; // String
    isActive: boolean; // Boolean!
    lastScore: number; // Int!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    partners?: NexusGenRootTypes['Student'][] | null; // [Student!]
    protocolActivityType: NexusGenEnums['ProtocolActivityTypes']; // ProtocolActivityTypes!
    response?: string | null; // String
    startTime: string; // String!
    student: NexusGenRootTypes['Student']; // Student!
    task: string; // String!
  }
  Query: {};
  QuestionPartsContainer: { // root type
    completePredicate: string; // String!
    completeSubject: string; // String!
    compoundNoun: boolean; // Boolean!
    helpingVerb: string; // String!
    modifiedQuestion: string; // String!
    nounType: NexusGenEnums['NounTypeEnum']; // NounTypeEnum!
    object?: string | null; // String
    originalQuestion: string; // String!
    questionType: NexusGenEnums['QuestionTypeEnum']; // QuestionTypeEnum!
    questionWord: NexusGenEnums['QuestionWordEnum']; // QuestionWordEnum!
    simplePredicate: string; // String!
    simpleSubject: string; // String!
    subjectCompliment?: string | null; // String
    verbType: NexusGenEnums['VerbTypeEnum']; // VerbTypeEnum!
  }
  Quiz: { // root type
    _id?: string | null; // ID
    assigned: boolean; // Boolean!
    assignedDate: string; // String!
    associatedLessonId?: string | null; // ID
    dueDate: string; // String!
    dueTime: string; // String!
    exempt: boolean; // Boolean!
    finishedQuiz: boolean; // Boolean!
    forcedFinish: boolean; // Boolean!
    gradeType: NexusGenEnums['GradeTypeEnum']; // GradeTypeEnum!
    hasAssigner: NexusGenRootTypes['Teacher']; // Teacher!
    hasOwner: NexusGenRootTypes['Student']; // Student!
    isActive: boolean; // Boolean!
    late: boolean; // Boolean!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    missing: boolean; // Boolean!
    paperBased: boolean; // Boolean!
    quizzableSections: string[]; // [ID!]!
    readings: NexusGenRootTypes['Readings']; // Readings!
    responsibilityPoints: number; // Float!
    score: NexusGenRootTypes['Score']; // Score!
    startedQuiz: boolean; // Boolean!
  }
  QuizQuestion: { // root type
    _id?: string | null; // ID
    answerList: NexusGenRootTypes['AnswerList'][]; // [AnswerList!]!
    associatedTextSectionId: string; // ID!
    difficultyLevel: NexusGenEnums['QuizQuestionDifficultyLevelEnum']; // QuizQuestionDifficultyLevelEnum!
    question: string; // String!
    questionType: NexusGenEnums['QuizQuestionTypeEnum']; // QuizQuestionTypeEnum!
    questionUsageType: NexusGenEnums['QuestionUsageTypeEnum']; // QuestionUsageTypeEnum!
  }
  ReadingGuide: { // root type
    _id?: string | null; // ID
    assigned: boolean; // Boolean!
    assignedDate: string; // String!
    associatedLessonId?: string | null; // ID
    completed: boolean; // Boolean!
    dueDate: string; // String!
    dueTime: string; // String!
    effort: NexusGenEnums['ReadingGuideReviewOptionsEnum']; // ReadingGuideReviewOptionsEnum!
    exempt: boolean; // Boolean!
    graded: boolean; // Boolean!
    gradeType: NexusGenEnums['GradeTypeEnum']; // GradeTypeEnum!
    hasAssigner: NexusGenRootTypes['Teacher']; // Teacher!
    hasOwner: NexusGenRootTypes['Student']; // Student!
    late: boolean; // Boolean!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    missing: boolean; // Boolean!
    paperBased: boolean; // Boolean!
    readingGuideFinal?: NexusGenRootTypes['ReadingGuideFinalContainer'] | null; // ReadingGuideFinalContainer
    readings: NexusGenRootTypes['Readings']; // Readings!
    reviewed: boolean; // Boolean!
    score: NexusGenRootTypes['Score']; // Score!
  }
  ReadingGuideFinalContainer: { // root type
    biggestProblem: string; // String!
    howArePeopleInvolvedInProblems: string; // String!
    importantPeople: string[]; // [String!]!
    problems: string[]; // [String!]!
    reasonForBiggestProblem: string; // String!
    sectionConsequences: string; // String!
    submitted: boolean; // Boolean!
    submitTime?: string | null; // String
  }
  Readings: { // root type
    readingPages: string; // String!
    readingSections: string; // String!
  }
  RegisterStudentPayload: { // root type
    student: NexusGenRootTypes['Student']; // Student!
  }
  RegisterTeacherPayload: { // root type
    teacher: NexusGenRootTypes['Teacher']; // Teacher!
  }
  RemoveAbsencePayload: { // root type
    removed: boolean; // Boolean!
  }
  RemoveAssignedSeatPayload: { // root type
    courseInfo: NexusGenRootTypes['CourseInfo']; // CourseInfo!
  }
  RemoveCoursePayload: { // root type
    removed: boolean; // Boolean!
  }
  RemoveLatenessPayload: { // root type
    removed: boolean; // Boolean!
  }
  RemoveProtocolPayload: { // root type
    deleteCount: number; // Int!
  }
  RemoveRubricEntryPayload: { // root type
    removed: boolean; // Boolean!
  }
  RemoveSchoolDayPayload: { // root type
    removed: boolean; // Boolean!
  }
  RemoveStudentBehaviorPayload: { // root type
    removed: boolean; // Boolean!
  }
  RemoveStudentsFromCoursePayload: { // root type
    students: NexusGenRootTypes['Student'][]; // [Student!]!
  }
  RemoveSubmittedEssayFinalDraftPayload: { // root type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  RemoveTextSectionPayload: { // root type
    removed: boolean; // Boolean!
  }
  ResetPasswordPayload: { // root type
    user: NexusGenRootTypes['User']; // User!
  }
  RespondToProtocolPayload: { // root type
    protocol: NexusGenRootTypes['Protocol']; // Protocol!
  }
  ResponsibilityPoints: { // root type
    _id?: string | null; // ID
    inCourse: NexusGenRootTypes['Course']; // Course!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    responsibilityPoints: number; // Float!
    student: NexusGenRootTypes['Student']; // Student!
  }
  ResubmitEssayFinalDraftPayload: { // root type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  ReturnArticleReviewPayload: { // root type
    articleReview: NexusGenRootTypes['ArticleReview']; // ArticleReview!
  }
  ReturnGradedEssayPayload: { // root type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  ReturnReadingGuidePayload: { // root type
    readingGuide: NexusGenRootTypes['ReadingGuide']; // ReadingGuide!
  }
  ReviewReadingGuidesPayload: { // root type
    reviewed: boolean; // Boolean!
  }
  RubricEntry: { // root type
    _id?: string | null; // ID
    entry: string; // String!
    howToImprove?: string | null; // String
    rubricSection: NexusGenEnums['RubricSectionEnum']; // RubricSectionEnum!
    rubricWritingLevels: NexusGenEnums['WritingLevelEnum'][]; // [WritingLevelEnum!]!
    score: number; // Int!
  }
  SGO: { // root type
    _id: string; // ID!
  }
  SchoolDay: { // root type
    _id?: string | null; // ID
    cohortWeek: NexusGenEnums['StudentCohortEnum']; // StudentCohortEnum!
    currentSchoolDayType: NexusGenEnums['SchoolDayType']; // SchoolDayType!
    schoolDayCount: number; // Int!
    schoolDayLength: NexusGenEnums['SchoolDayLengthEnum']; // SchoolDayLengthEnum!
    signInSheets?: NexusGenRootTypes['StudentSignInSheet'][] | null; // [StudentSignInSheet!]
    todaysDate: string; // String!
  }
  SchoolDayModifierPayload: { // root type
    modified: boolean; // Boolean!
  }
  SchoolDayTracker: { // root type
    _id?: string | null; // ID
    cohortWeekTracker: NexusGenEnums['StudentCohortEnum']; // StudentCohortEnum!
    schoolDayTracker: number; // Int!
    schoolDayTypeTracker: NexusGenEnums['SchoolDayType']; // SchoolDayType!
  }
  Score: { // root type
    earnedPoints: number; // Float!
    maxPoints: number; // Int!
  }
  SetAnswerTypePayload: { // root type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  SetCurrentMarkingPeriodPayload: { // root type
    markingPeriod: NexusGenRootTypes['MarkingPeriod']; // MarkingPeriod!
  }
  SetOrganizerPayload: { // root type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  StartProtocolPayload: { // root type
    lesson: NexusGenRootTypes['Lesson']; // Lesson!
  }
  StartQuizPayload: { // root type
    started: boolean; // Boolean!
  }
  StartReadingGuidePayload: { // root type
    readingGuide: NexusGenRootTypes['ReadingGuide']; // ReadingGuide!
  }
  Student: { // root type
    _id?: string | null; // ID
    cohort: NexusGenEnums['StudentCohortEnum']; // StudentCohortEnum!
    email?: string | null; // String
    firstName: string; // String!
    hasIEP?: boolean | null; // Boolean
    inCourses: NexusGenRootTypes['Course'][]; // [Course!]!
    lastName: string; // String!
    middleName?: string | null; // String
    password: string; // String!
    schoolId?: string | null; // String
    userName: string; // String!
    virtual: boolean; // Boolean!
  }
  StudentAbsence: { // root type
    _id?: string | null; // ID
    dayAbsent: NexusGenScalars['Date']; // Date!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    student: NexusGenRootTypes['Student']; // Student!
  }
  StudentBehavior: { // root type
    _id?: string | null; // ID
    behavior: NexusGenEnums['BehaviorEnum']; // BehaviorEnum!
    date: string; // String!
    responsibilityPoints: number; // Float!
    student: NexusGenRootTypes['Student']; // Student!
  }
  StudentInformation: { // root type
    _id?: string | null; // ID
    contactInfo: NexusGenRootTypes['ContactInfo'][]; // [ContactInfo!]!
    student: NexusGenRootTypes['Student']; // Student!
  }
  StudentQuestion: { // root type
    question: string; // String!
    student: NexusGenRootTypes['Student']; // Student!
    timeAsked: string; // String!
  }
  StudentQuestions: { // root type
    _id?: string | null; // ID
    associatedSchoolDayId: string; // ID!
    course: string; // ID!
    date: string; // String!
    questions: NexusGenRootTypes['StudentQuestion'][]; // [StudentQuestion!]!
  }
  StudentSeat: { // root type
    deskNumber: number; // Int!
    redCohortStudent?: NexusGenRootTypes['Student'] | null; // Student
    student?: NexusGenRootTypes['Student'] | null; // Student
    whiteCohortStudent?: NexusGenRootTypes['Student'] | null; // Student
  }
  StudentSignInPayload: { // root type
    schoolDay: NexusGenRootTypes['SchoolDay']; // SchoolDay!
  }
  StudentSignInSheet: { // root type
    course: NexusGenRootTypes['Course']; // Course!
    lessonDate: NexusGenScalars['Date']; // Date!
    studentsSignInlog?: NexusGenRootTypes['Student'][] | null; // [Student!]
  }
  SubmitArticleReviewPayload: { // root type
    articleReview: NexusGenRootTypes['ArticleReview']; // ArticleReview!
  }
  SubmitEssayFinalDraftPayload: { // root type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  SubmitReadingGuidePayload: { // root type
    readingGuide: NexusGenRootTypes['ReadingGuide']; // ReadingGuide!
  }
  SubmittedFinalDraft: { // root type
    additionalComments?: string[] | null; // [String!]
    draft: NexusGenScalars['JSON']; // JSON!
    draftNumber: number; // Int!
    graded: boolean; // Boolean!
    gradingDraft: NexusGenScalars['JSON']; // JSON!
    rubricEntries: NexusGenRootTypes['RubricEntry'][]; // [RubricEntry!]!
    score: number; // Float!
  }
  SwitchToNewCoursePayload: { // root type
    switched: boolean; // Boolean!
  }
  Teacher: { // root type
    _id?: string | null; // ID
    email?: string | null; // String
    firstName: string; // String!
    lastName: string; // String!
    middleName?: string | null; // String
    password: string; // String!
    teachesCourses: NexusGenRootTypes['Course'][]; // [Course!]!
    title: NexusGenEnums['TitleEnum']; // TitleEnum!
    userName: string; // String!
  }
  TemporaryTask: { // root type
    _id?: string | null; // ID
    answered: boolean; // Boolean!
    dateIssued: string; // String!
    lastGrade: number; // Float!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    student: NexusGenRootTypes['Student']; // Student!
    studentPresent: boolean; // Boolean!
    taskNumber: number; // Int!
  }
  Text: { // root type
    _id?: string | null; // ID
    ownerId: string; // ID!
    textTitle: string; // String!
  }
  TextSection: { // root type
    _id?: string | null; // ID
    fromChapter: NexusGenRootTypes['Chapter']; // Chapter!
    hasProtocols?: NexusGenRootTypes['TextSectionProtocols'][] | null; // [TextSectionProtocols!]
    hasQuestions?: NexusGenRootTypes['TextSectionQuestions'][] | null; // [TextSectionQuestions!]
    hasVocab?: NexusGenRootTypes['TextSectionVocab'][] | null; // [TextSectionVocab!]
    header: string; // String!
    pageNumbers: NexusGenRootTypes['PageNumbers']; // PageNumbers!
  }
  TextSectionProtocols: { // root type
    academicOutcomeTypes: NexusGenEnums['AcademicOutcomeTypes']; // AcademicOutcomeTypes!
    activityType: NexusGenEnums['ProtocolActivityTypes']; // ProtocolActivityTypes!
    completed: boolean; // Boolean!
    isActive: boolean; // Boolean!
    task: string; // String!
  }
  TextSectionQuestions: { // root type
    question: string; // String!
    questionType: NexusGenEnums['QuestionTypeEnum']; // QuestionTypeEnum!
  }
  TextSectionVocab: { // root type
    definition: string; // String!
    word: string; // String!
  }
  ToggleClassAssignmentsAllowedPayload: { // root type
    toggled: boolean; // Boolean!
  }
  Topic: { // root type
    essayQuestionId: string; // ID!
    question: string; // String!
    questionType: NexusGenEnums['QuestionTypeEnum']; // QuestionTypeEnum!
    writingLevel: NexusGenEnums['WritingLevelEnum']; // WritingLevelEnum!
  }
  UnAssignEssaysPayload: { // root type
    essays: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  UnAssignQuizByQuizIdPayload: { // root type
    unAssigned: boolean; // Boolean!
  }
  UnexcusedLateness: { // root type
    _id?: string | null; // ID
    dayLate: NexusGenScalars['Date']; // Date!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    student: NexusGenRootTypes['Student']; // Student!
  }
  Unit: { // root type
    _id?: string | null; // ID
    unitName: string; // String!
  }
  UpdateAcademicOrganizerPayload: { // root type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  UpdateAdvancedOrganizerPayload: { // root type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  UpdateArticleReviewPayload: { // root type
    articleReview: NexusGenRootTypes['ArticleReview']; // ArticleReview!
  }
  UpdateCourseInfoPayload: { // root type
    courseInfo: NexusGenRootTypes['CourseInfo']; // CourseInfo!
  }
  UpdateDevelopingOrganizerPayload: { // root type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  UpdateDynamicLessonPayload: { // root type
    lesson: NexusGenRootTypes['Lesson']; // Lesson!
  }
  UpdateEssayByStudentPayload: { // root type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  UpdateEssayLatenessPayload: { // root type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  UpdateEssaysByLessonPayload: { // root type
    essays: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  UpdateEssaysByQuestionPayload: { // root type
    essays: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  UpdateEssaysByStudentsAndSectionPayload: { // root type
    essays: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  UpdateGradingDraftPayload: { // root type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  UpdateHowCauseEffectPayload: { // root type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  UpdateLessonPayload: { // root type
    lessons: NexusGenRootTypes['Lesson'][]; // [Lesson!]!
  }
  UpdateParentContactPayload: { // root type
    parentContact: NexusGenRootTypes['ParentContact']; // ParentContact!
  }
  UpdateProblemSolutionPayload: { // root type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  UpdateProtocolPayload: { // root type
    lesson: NexusGenRootTypes['Lesson']; // Lesson!
    protocols: NexusGenRootTypes['Protocol'][]; // [Protocol!]!
  }
  UpdateReadingGuidePayload: { // root type
    readingGuide: NexusGenRootTypes['ReadingGuide']; // ReadingGuide!
  }
  UpdateResponsibilityPointsPayload: { // root type
    responsibilityPoints: NexusGenRootTypes['ResponsibilityPoints']; // ResponsibilityPoints!
  }
  UpdateRubricEntryPayload: { // root type
    rubricEntry: NexusGenRootTypes['RubricEntry']; // RubricEntry!
  }
  UpdateSchoolDayPayload: { // root type
    schoolDay: NexusGenRootTypes['SchoolDay']; // SchoolDay!
  }
  UpdateTemporaryTasksPayload: { // root type
    temporaryTasks: NexusGenRootTypes['TemporaryTask'][]; // [TemporaryTask!]!
  }
  UpdateTextSectionPayload: { // root type
    textSection: NexusGenRootTypes['TextSection']; // TextSection!
  }
  UpdateVocabPayload: { // root type
    textSection: NexusGenRootTypes['TextSection']; // TextSection!
  }
  UpdateWhyCauseEffectPayload: { // root type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  UpdateWorkingDraftPayload: { // root type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  WhyCauseEffectAnswerType: { // root type
    proximateCause: string; // String!
    ultimateCause: string; // String!
  }
  WhyCauseEffectMetrics: { // root type
    levelPoints: number; // Int!
    whyCauseEffectLevel: NexusGenEnums['WritingLevelEnum']; // WritingLevelEnum!
  }
  WorkingDraft: { // root type
    draft: string; // String!
    organizer?: NexusGenRootTypes['Organizers'] | null; // Organizers
  }
  WritingMetrics: { // root type
    _id?: string | null; // ID
    howCauseEffectMetrics: NexusGenRootTypes['HowCauseEffectMetrics']; // HowCauseEffectMetrics!
    howProblemSolutionMetrics: NexusGenRootTypes['HowProblemSolutionMetrics']; // HowProblemSolutionMetrics!
    inCourse: NexusGenRootTypes['Course']; // Course!
    overallWritingMetric: NexusGenRootTypes['OverallWritingMetric']; // OverallWritingMetric!
    student: NexusGenRootTypes['Student']; // Student!
    whyCauseEffectMetrics: NexusGenRootTypes['WhyCauseEffectMetrics']; // WhyCauseEffectMetrics!
  }
  Assignment: NexusGenRootTypes['Essay'] | NexusGenRootTypes['Quiz'] | NexusGenRootTypes['ReadingGuide'];
  ProgressMetrics: NexusGenRootTypes['ComprehensionMetrics'] | NexusGenRootTypes['WritingMetrics'];
  Question: NexusGenRootTypes['EssayQuestion'] | NexusGenRootTypes['EssentialQuestion'] | NexusGenRootTypes['QuizQuestion'];
  User: NexusGenRootTypes['Student'] | NexusGenRootTypes['Teacher'];
  AnswerTypes: NexusGenRootTypes['HowCauseEffectAnswerType'] | NexusGenRootTypes['ProblemSolutionAnswerType'] | NexusGenRootTypes['WhyCauseEffectAnswerType'];
  Organizers: NexusGenRootTypes['AcademicOrganizer'] | NexusGenRootTypes['AdvancedOrganizer'] | NexusGenRootTypes['DevelopingOrganizer'];
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  AcademicSentenceStructureInput: NexusGenInputs['AcademicSentenceStructureInput'];
  ActivateQuizInput: NexusGenInputs['ActivateQuizInput'];
  AddCourseToTeacherInput: NexusGenInputs['AddCourseToTeacherInput'];
  AddDeskToAssignedSeatsInput: NexusGenInputs['AddDeskToAssignedSeatsInput'];
  AddNewChapterInput: NexusGenInputs['AddNewChapterInput'];
  AddNewTextInput: NexusGenInputs['AddNewTextInput'];
  AddStudentsToCourseInput: NexusGenInputs['AddStudentsToCourseInput'];
  AddUserEmailInput: NexusGenInputs['AddUserEmailInput'];
  AddVocabWordInput: NexusGenInputs['AddVocabWordInput'];
  AdvancedSentenceStructureInput: NexusGenInputs['AdvancedSentenceStructureInput'];
  AnswerListInput: NexusGenInputs['AnswerListInput'];
  AssessIndividualProtocolsInput: NexusGenInputs['AssessIndividualProtocolsInput'];
  AssessStudentProtocolInput: NexusGenInputs['AssessStudentProtocolInput'];
  AssignEssaysInput: NexusGenInputs['AssignEssaysInput'];
  AssignQuizzesByStudentIdsAndDateInput: NexusGenInputs['AssignQuizzesByStudentIdsAndDateInput'];
  AssignReadingGuidesInput: NexusGenInputs['AssignReadingGuidesInput'];
  AssignSeatsInput: NexusGenInputs['AssignSeatsInput'];
  BuildRubricEntryInput: NexusGenInputs['BuildRubricEntryInput'];
  ChangePasswordInput: NexusGenInputs['ChangePasswordInput'];
  ChangeVocabWordInput: NexusGenInputs['ChangeVocabWordInput'];
  ControlCoolDownInput: NexusGenInputs['ControlCoolDownInput'];
  ControlWarmUpInput: NexusGenInputs['ControlWarmUpInput'];
  CourseInput: NexusGenInputs['CourseInput'];
  CreateAbsenceInput: NexusGenInputs['CreateAbsenceInput'];
  CreateArticleReviewsInput: NexusGenInputs['CreateArticleReviewsInput'];
  CreateCourseInfoInput: NexusGenInputs['CreateCourseInfoInput'];
  CreateCourseInput: NexusGenInputs['CreateCourseInput'];
  CreateEssayInput: NexusGenInputs['CreateEssayInput'];
  CreateEssayQuestionInput: NexusGenInputs['CreateEssayQuestionInput'];
  CreateEssentialQuestionInput: NexusGenInputs['CreateEssentialQuestionInput'];
  CreateExcusedLatenessInput: NexusGenInputs['CreateExcusedLatenessInput'];
  CreateLessonInput: NexusGenInputs['CreateLessonInput'];
  CreateParentContactInput: NexusGenInputs['CreateParentContactInput'];
  CreateProtocolInput: NexusGenInputs['CreateProtocolInput'];
  CreateQuizQuestionInput: NexusGenInputs['CreateQuizQuestionInput'];
  CreateQuizzesByCourseInput: NexusGenInputs['CreateQuizzesByCourseInput'];
  CreateReadingGuideInput: NexusGenInputs['CreateReadingGuideInput'];
  CreateResponsibilityPointsInput: NexusGenInputs['CreateResponsibilityPointsInput'];
  CreateSchoolDayInput: NexusGenInputs['CreateSchoolDayInput'];
  CreateSignInSheetsInput: NexusGenInputs['CreateSignInSheetsInput'];
  CreateStudentBehaviorInput: NexusGenInputs['CreateStudentBehaviorInput'];
  CreateStudentQuestionInput: NexusGenInputs['CreateStudentQuestionInput'];
  CreateStudentQuestionsContainerInput: NexusGenInputs['CreateStudentQuestionsContainerInput'];
  CreateTemporaryTasksInput: NexusGenInputs['CreateTemporaryTasksInput'];
  CreateTextSectionInput: NexusGenInputs['CreateTextSectionInput'];
  CreateUnexcusedLatenessInput: NexusGenInputs['CreateUnexcusedLatenessInput'];
  CreateUnitInput: NexusGenInputs['CreateUnitInput'];
  DeleteReviewsInput: NexusGenInputs['DeleteReviewsInput'];
  DeleteTemporaryTasksInput: NexusGenInputs['DeleteTemporaryTasksInput'];
  DevelopingOrganizerInput: NexusGenInputs['DevelopingOrganizerInput'];
  DevelopingSentenceStructureInput: NexusGenInputs['DevelopingSentenceStructureInput'];
  ExemptArticleReviewInput: NexusGenInputs['ExemptArticleReviewInput'];
  FindActiveProtocolByStudentInput: NexusGenInputs['FindActiveProtocolByStudentInput'];
  FindActiveProtocolsByCourseInput: NexusGenInputs['FindActiveProtocolsByCourseInput'];
  FindArticleReviewByIdInput: NexusGenInputs['FindArticleReviewByIdInput'];
  FindArticleReviewsByCourseInput: NexusGenInputs['FindArticleReviewsByCourseInput'];
  FindArticleReviewsByStudentInput: NexusGenInputs['FindArticleReviewsByStudentInput'];
  FindAssignmentByIdInput: NexusGenInputs['FindAssignmentByIdInput'];
  FindAssignmentByStudentIdInput: NexusGenInputs['FindAssignmentByStudentIdInput'];
  FindAssignmentsByCourseIdInput: NexusGenInputs['FindAssignmentsByCourseIdInput'];
  FindAssignmentsToGradeInput: NexusGenInputs['FindAssignmentsToGradeInput'];
  FindChapterTitleInput: NexusGenInputs['FindChapterTitleInput'];
  FindChaptersByTextIdInput: NexusGenInputs['FindChaptersByTextIdInput'];
  FindChaptersInTextInput: NexusGenInputs['FindChaptersInTextInput'];
  FindCompletedEssaysByStudentIdInput: NexusGenInputs['FindCompletedEssaysByStudentIdInput'];
  FindContactsByStudentIdInput: NexusGenInputs['FindContactsByStudentIdInput'];
  FindCourseByIdInput: NexusGenInputs['FindCourseByIdInput'];
  FindCourseInfoByCourseIdInput: NexusGenInputs['FindCourseInfoByCourseIdInput'];
  FindCoursesByIdInput: NexusGenInputs['FindCoursesByIdInput'];
  FindEssayByIdInput: NexusGenInputs['FindEssayByIdInput'];
  FindEssayByStudentIdAndLessonIdInput: NexusGenInputs['FindEssayByStudentIdAndLessonIdInput'];
  FindEssayQuestionByIdInput: NexusGenInputs['FindEssayQuestionByIdInput'];
  FindEssaysByAssociatedLessonIdAndCourseIdInput: NexusGenInputs['FindEssaysByAssociatedLessonIdAndCourseIdInput'];
  FindEssaysByAssociatedLessonIdInput: NexusGenInputs['FindEssaysByAssociatedLessonIdInput'];
  FindEssaysByUserNameAndMarkingPeriodInput: NexusGenInputs['FindEssaysByUserNameAndMarkingPeriodInput'];
  FindEssaysToCompleteByStudentIdInput: NexusGenInputs['FindEssaysToCompleteByStudentIdInput'];
  FindEssaysToGradeByIdInput: NexusGenInputs['FindEssaysToGradeByIdInput'];
  FindEssentialQuestionsByAssociatedTextSectionIdsInput: NexusGenInputs['FindEssentialQuestionsByAssociatedTextSectionIdsInput'];
  FindLessonByCourseAndDateInput: NexusGenInputs['FindLessonByCourseAndDateInput'];
  FindLessonByCourseInput: NexusGenInputs['FindLessonByCourseInput'];
  FindLessonByIdInput: NexusGenInputs['FindLessonByIdInput'];
  FindLessonStatusInput: NexusGenInputs['FindLessonStatusInput'];
  FindLessonsByAssignedDateInput: NexusGenInputs['FindLessonsByAssignedDateInput'];
  FindLessonsByUnitInput: NexusGenInputs['FindLessonsByUnitInput'];
  FindParentContactsByTeacherIdInput: NexusGenInputs['FindParentContactsByTeacherIdInput'];
  FindQuizByIdInput: NexusGenInputs['FindQuizByIdInput'];
  FindQuizQuestionsByQuizzableSectionsInput: NexusGenInputs['FindQuizQuestionsByQuizzableSectionsInput'];
  FindQuizQuestionsByTextSectionIdInput: NexusGenInputs['FindQuizQuestionsByTextSectionIdInput'];
  FindQuizzesByStudentIdInput: NexusGenInputs['FindQuizzesByStudentIdInput'];
  FindQuizzesForCourseByAssignedDateInput: NexusGenInputs['FindQuizzesForCourseByAssignedDateInput'];
  FindReadingGuideByIdInput: NexusGenInputs['FindReadingGuideByIdInput'];
  FindReadingGuideByUserIdAndReadingSectionInput: NexusGenInputs['FindReadingGuideByUserIdAndReadingSectionInput'];
  FindReadingGuidesByAssociatedLessonAndCourseIdInput: NexusGenInputs['FindReadingGuidesByAssociatedLessonAndCourseIdInput'];
  FindReadingGuidesByCourseIdAndAssignedDateInput: NexusGenInputs['FindReadingGuidesByCourseIdAndAssignedDateInput'];
  FindReadingGuidesByMarkingPeriodInput: NexusGenInputs['FindReadingGuidesByMarkingPeriodInput'];
  FindReadingGuidesByReadingSectionInput: NexusGenInputs['FindReadingGuidesByReadingSectionInput'];
  FindReadingGuidesToCompleteByStudentIdInput: NexusGenInputs['FindReadingGuidesToCompleteByStudentIdInput'];
  FindResponsibilityPointsByCourseInput: NexusGenInputs['FindResponsibilityPointsByCourseInput'];
  FindResponsibilityPointsByStudentIdInput: NexusGenInputs['FindResponsibilityPointsByStudentIdInput'];
  FindRubricEntriesByCategoryInput: NexusGenInputs['FindRubricEntriesByCategoryInput'];
  FindSchoolDayByDateInput: NexusGenInputs['FindSchoolDayByDateInput'];
  FindStudentByIdInput: NexusGenInputs['FindStudentByIdInput'];
  FindStudentQuestionsInput: NexusGenInputs['FindStudentQuestionsInput'];
  FindStudentsByCourseInput: NexusGenInputs['FindStudentsByCourseInput'];
  FindStudentsByIdInput: NexusGenInputs['FindStudentsByIdInput'];
  FindTemporaryTasksByStudentIdInput: NexusGenInputs['FindTemporaryTasksByStudentIdInput'];
  FindTemporaryTasksInput: NexusGenInputs['FindTemporaryTasksInput'];
  FindTextByTitleInput: NexusGenInputs['FindTextByTitleInput'];
  FindTextSectionByIdInput: NexusGenInputs['FindTextSectionByIdInput'];
  FindTextSectionsByChapterInput: NexusGenInputs['FindTextSectionsByChapterInput'];
  FindTextSectionsByIdInput: NexusGenInputs['FindTextSectionsByIdInput'];
  FindUserDataInput: NexusGenInputs['FindUserDataInput'];
  FindWritingMetricsInput: NexusGenInputs['FindWritingMetricsInput'];
  FinishProtocolInput: NexusGenInputs['FinishProtocolInput'];
  FinishQuizInput: NexusGenInputs['FinishQuizInput'];
  ForceFinishQuizInput: NexusGenInputs['ForceFinishQuizInput'];
  GradeArticleReviewInput: NexusGenInputs['GradeArticleReviewInput'];
  GradeTemporaryTaskInput: NexusGenInputs['GradeTemporaryTaskInput'];
  HasAssigner: NexusGenInputs['HasAssigner'];
  HasOwnerInput: NexusGenInputs['HasOwnerInput'];
  InitializeStudentsInput: NexusGenInputs['InitializeStudentsInput'];
  LessonTextSectionsInput: NexusGenInputs['LessonTextSectionsInput'];
  LoginInput: NexusGenInputs['LoginInput'];
  MarkExemptInput: NexusGenInputs['MarkExemptInput'];
  MarkTemporaryTaskAbsentInput: NexusGenInputs['MarkTemporaryTaskAbsentInput'];
  PageNumbersInput: NexusGenInputs['PageNumbersInput'];
  PasswordCheckInput: NexusGenInputs['PasswordCheckInput'];
  QuestionPartsContainerInput: NexusGenInputs['QuestionPartsContainerInput'];
  ReadingsInput: NexusGenInputs['ReadingsInput'];
  RegisterStudentInput: NexusGenInputs['RegisterStudentInput'];
  RegisterTeacherInput: NexusGenInputs['RegisterTeacherInput'];
  RemoveAbsenceInput: NexusGenInputs['RemoveAbsenceInput'];
  RemoveAssignedSeatInput: NexusGenInputs['RemoveAssignedSeatInput'];
  RemoveCourseInput: NexusGenInputs['RemoveCourseInput'];
  RemoveLatenessInput: NexusGenInputs['RemoveLatenessInput'];
  RemoveProtocolInput: NexusGenInputs['RemoveProtocolInput'];
  RemoveRubricEntryInput: NexusGenInputs['RemoveRubricEntryInput'];
  RemoveSchoolDayInput: NexusGenInputs['RemoveSchoolDayInput'];
  RemoveStudentBehaviorInput: NexusGenInputs['RemoveStudentBehaviorInput'];
  RemoveStudentsFromCourseInput: NexusGenInputs['RemoveStudentsFromCourseInput'];
  RemoveSubmittedEssayFinalDraftInput: NexusGenInputs['RemoveSubmittedEssayFinalDraftInput'];
  RemoveTextSectionInput: NexusGenInputs['RemoveTextSectionInput'];
  ResetPasswordInput: NexusGenInputs['ResetPasswordInput'];
  RespondToProtocolInput: NexusGenInputs['RespondToProtocolInput'];
  ResubmitEssayFinalDraftInput: NexusGenInputs['ResubmitEssayFinalDraftInput'];
  ReturnArticleReviewInput: NexusGenInputs['ReturnArticleReviewInput'];
  ReturnGradedEssayInput: NexusGenInputs['ReturnGradedEssayInput'];
  ReturnReadingGuideInput: NexusGenInputs['ReturnReadingGuideInput'];
  ReturnedRubricEntryInput: NexusGenInputs['ReturnedRubricEntryInput'];
  ReviewReadingGuidesInput: NexusGenInputs['ReviewReadingGuidesInput'];
  RubricEntryInput: NexusGenInputs['RubricEntryInput'];
  SetAnswerTypeInput: NexusGenInputs['SetAnswerTypeInput'];
  SetCurrentMarkingPeriodInput: NexusGenInputs['SetCurrentMarkingPeriodInput'];
  SetOrganizerInput: NexusGenInputs['SetOrganizerInput'];
  StartProtocolInput: NexusGenInputs['StartProtocolInput'];
  StartQuizInput: NexusGenInputs['StartQuizInput'];
  StartReadingGuideInput: NexusGenInputs['StartReadingGuideInput'];
  StudentSeatInput: NexusGenInputs['StudentSeatInput'];
  StudentSignInInput: NexusGenInputs['StudentSignInInput'];
  SubmitArticleReviewInput: NexusGenInputs['SubmitArticleReviewInput'];
  SubmitEssayFinalDraftInput: NexusGenInputs['SubmitEssayFinalDraftInput'];
  SubmitReadingGuideInput: NexusGenInputs['SubmitReadingGuideInput'];
  SubmittedFinalDraftsInput: NexusGenInputs['SubmittedFinalDraftsInput'];
  SwitchToNewCourseInput: NexusGenInputs['SwitchToNewCourseInput'];
  TextChapterInput: NexusGenInputs['TextChapterInput'];
  TextInput: NexusGenInputs['TextInput'];
  TextSectionProtocolsInput: NexusGenInputs['TextSectionProtocolsInput'];
  TextSectionQuestionsInput: NexusGenInputs['TextSectionQuestionsInput'];
  TextSectionVocabInput: NexusGenInputs['TextSectionVocabInput'];
  ToggleClassAssignmentsAllowedInput: NexusGenInputs['ToggleClassAssignmentsAllowedInput'];
  TopicInput: NexusGenInputs['TopicInput'];
  TopicTypeInput: NexusGenInputs['TopicTypeInput'];
  UnAssignEssaysInput: NexusGenInputs['UnAssignEssaysInput'];
  UnAssignQuizByQuizIdInput: NexusGenInputs['UnAssignQuizByQuizIdInput'];
  UnitInput: NexusGenInputs['UnitInput'];
  UpdateAcademicOrganizerInput: NexusGenInputs['UpdateAcademicOrganizerInput'];
  UpdateAdvancedOrganizerInput: NexusGenInputs['UpdateAdvancedOrganizerInput'];
  UpdateArticleReviewInput: NexusGenInputs['UpdateArticleReviewInput'];
  UpdateCourseInfoInput: NexusGenInputs['UpdateCourseInfoInput'];
  UpdateDevelopingOrganizerInput: NexusGenInputs['UpdateDevelopingOrganizerInput'];
  UpdateDynamicLessonInput: NexusGenInputs['UpdateDynamicLessonInput'];
  UpdateEssayByStudentInput: NexusGenInputs['UpdateEssayByStudentInput'];
  UpdateEssayLatenessInput: NexusGenInputs['UpdateEssayLatenessInput'];
  UpdateEssaysByLessonInput: NexusGenInputs['UpdateEssaysByLessonInput'];
  UpdateEssaysByQuestionInput: NexusGenInputs['UpdateEssaysByQuestionInput'];
  UpdateEssaysByStudentsAndSectionInput: NexusGenInputs['UpdateEssaysByStudentsAndSectionInput'];
  UpdateGradingDraftInput: NexusGenInputs['UpdateGradingDraftInput'];
  UpdateHowCauseEffectInput: NexusGenInputs['UpdateHowCauseEffectInput'];
  UpdateLessonInput: NexusGenInputs['UpdateLessonInput'];
  UpdateLessonProtocolInput: NexusGenInputs['UpdateLessonProtocolInput'];
  UpdateParentContactInput: NexusGenInputs['UpdateParentContactInput'];
  UpdateProblemSolutionInput: NexusGenInputs['UpdateProblemSolutionInput'];
  UpdateReadingGuideInput: NexusGenInputs['UpdateReadingGuideInput'];
  UpdateResponsibilityPointsInput: NexusGenInputs['UpdateResponsibilityPointsInput'];
  UpdateRubricEntryInput: NexusGenInputs['UpdateRubricEntryInput'];
  UpdateSchoolDayInput: NexusGenInputs['UpdateSchoolDayInput'];
  UpdateTemporaryTasksInput: NexusGenInputs['UpdateTemporaryTasksInput'];
  UpdateTextSectionInput: NexusGenInputs['UpdateTextSectionInput'];
  UpdateWhyCauseEffectInput: NexusGenInputs['UpdateWhyCauseEffectInput'];
  UpdateWorkingDraftInput: NexusGenInputs['UpdateWorkingDraftInput'];
  AcademicOutcomeTypes: NexusGenEnums['AcademicOutcomeTypes'];
  BasicQuestionEnum: NexusGenEnums['BasicQuestionEnum'];
  BehaviorEnum: NexusGenEnums['BehaviorEnum'];
  ContactTypeEnum: NexusGenEnums['ContactTypeEnum'];
  CourseMaxSizeEnum: NexusGenEnums['CourseMaxSizeEnum'];
  CourseTypeEnum: NexusGenEnums['CourseTypeEnum'];
  DiscussionTypesEnum: NexusGenEnums['DiscussionTypesEnum'];
  DynamicLessonEnums: NexusGenEnums['DynamicLessonEnums'];
  GradeTypeEnum: NexusGenEnums['GradeTypeEnum'];
  InformationStructureEnum: NexusGenEnums['InformationStructureEnum'];
  LessonTypeEnum: NexusGenEnums['LessonTypeEnum'];
  MarkingPeriodEnum: NexusGenEnums['MarkingPeriodEnum'];
  NounTypeEnum: NexusGenEnums['NounTypeEnum'];
  ProtocolActivityTypes: NexusGenEnums['ProtocolActivityTypes'];
  ProtocolAssessmentEnum: NexusGenEnums['ProtocolAssessmentEnum'];
  QuestionTypeEnum: NexusGenEnums['QuestionTypeEnum'];
  QuestionUsageTypeEnum: NexusGenEnums['QuestionUsageTypeEnum'];
  QuestionWordEnum: NexusGenEnums['QuestionWordEnum'];
  QuizQuestionDifficultyLevelEnum: NexusGenEnums['QuizQuestionDifficultyLevelEnum'];
  QuizQuestionTypeEnum: NexusGenEnums['QuizQuestionTypeEnum'];
  ReadingGuideReviewOptionsEnum: NexusGenEnums['ReadingGuideReviewOptionsEnum'];
  RubricSectionEnum: NexusGenEnums['RubricSectionEnum'];
  SchoolDayLengthEnum: NexusGenEnums['SchoolDayLengthEnum'];
  SchoolDayType: NexusGenEnums['SchoolDayType'];
  StudentCohortEnum: NexusGenEnums['StudentCohortEnum'];
  TimeOfDay: NexusGenEnums['TimeOfDay'];
  TitleEnum: NexusGenEnums['TitleEnum'];
  VerbTypeEnum: NexusGenEnums['VerbTypeEnum'];
  WritingLevelEnum: NexusGenEnums['WritingLevelEnum'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
  Date: NexusGenScalars['Date'];
  DateTime: NexusGenScalars['DateTime'];
  JSON: NexusGenScalars['JSON'];
  Time: NexusGenScalars['Time'];
}

export interface NexusGenFieldTypes {
  AcademicOrganizer: { // field return type
    academicSentenceStructure: NexusGenRootTypes['AcademicSentenceStructure']; // AcademicSentenceStructure!
    answerType: NexusGenRootTypes['AnswerTypes'] | null; // AnswerTypes
    conclusion: string; // String!
    questionType: NexusGenEnums['QuestionTypeEnum'] | null; // QuestionTypeEnum
    restatement: string; // String!
  }
  AcademicSentenceStructure: { // field return type
    object: string | null; // String
    subject: string; // String!
    subjectCompliment: string | null; // String
    verb: string; // String!
  }
  ActivateQuizPayload: { // field return type
    activated: boolean; // Boolean!
  }
  AddAssociatedCourseIdPayload: { // field return type
    courseInfo: NexusGenRootTypes['CourseInfo'][]; // [CourseInfo!]!
  }
  AddCourseToTeacherPayload: { // field return type
    teacher: NexusGenRootTypes['Teacher']; // Teacher!
  }
  AddDeskToAssignedSeatsPayload: { // field return type
    courseInfo: NexusGenRootTypes['CourseInfo']; // CourseInfo!
  }
  AddFieldsToReadingGuidePayload: { // field return type
    added: boolean; // Boolean!
  }
  AddForcedFinishedToAllQuizzesPayload: { // field return type
    added: boolean; // Boolean!
  }
  AddIEPInfoPayload: { // field return type
    added: boolean; // Boolean!
  }
  AddNewChapterPayload: { // field return type
    chapter: NexusGenRootTypes['Chapter']; // Chapter!
  }
  AddNewTextPayload: { // field return type
    text: NexusGenRootTypes['Text']; // Text!
  }
  AddStudentsToCoursePayload: { // field return type
    students: NexusGenRootTypes['Student'][]; // [Student!]!
  }
  AddUserEmailPayload: { // field return type
    user: NexusGenRootTypes['User']; // User!
  }
  AddVocabWordPayload: { // field return type
    textSection: NexusGenRootTypes['TextSection']; // TextSection!
  }
  AdvancedOrganizer: { // field return type
    advancedSentenceStructure: NexusGenRootTypes['AdvancedSentenceStructure']; // AdvancedSentenceStructure!
    answerType: NexusGenRootTypes['AnswerTypes'] | null; // AnswerTypes
    conclusion: string; // String!
    questionType: NexusGenEnums['QuestionTypeEnum'] | null; // QuestionTypeEnum
    restatement: string; // String!
  }
  AdvancedSentenceStructure: { // field return type
    object: string | null; // String
    subject: string; // String!
    subjectCompliment: string | null; // String
    verb: string; // String!
  }
  AnswerList: { // field return type
    answer: string; // String!
    correct: boolean; // Boolean!
    partiallyCorrect: boolean; // Boolean!
    removable: boolean; // Boolean!
  }
  ArticleReview: { // field return type
    _id: string | null; // ID
    articleAuthor: string; // String!
    articleLink: string; // String!
    articleTitle: string; // String!
    assigned: boolean; // Boolean!
    assignedDate: string; // String!
    bias: boolean | null; // Boolean
    completed: boolean; // Boolean!
    dueDate: string; // String!
    dueTime: string; // String!
    exempt: boolean; // Boolean!
    hasAssigner: NexusGenRootTypes['Teacher']; // Teacher!
    hasOwner: NexusGenRootTypes['Student']; // Student!
    issue: string; // String!
    late: boolean; // Boolean!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    paperBased: boolean; // Boolean!
    publishedDate: string | null; // String
    returned: boolean; // Boolean!
    score: NexusGenRootTypes['Score']; // Score!
    solutions: string | null; // String
    submitted: boolean; // Boolean!
    topicsImportance: string; // String!
  }
  AssessIndividualProtocolsPayload: { // field return type
    protocol: NexusGenRootTypes['Protocol']; // Protocol!
  }
  AssessStudentProtocolPayload: { // field return type
    protocols: NexusGenRootTypes['Protocol'][]; // [Protocol!]!
  }
  AssignEssaysPayload: { // field return type
    essays: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  AssignQuizzesByStudentIdsAndDatePayload: { // field return type
    quizzes: NexusGenRootTypes['Quiz'][]; // [Quiz!]!
  }
  AssignReadingGuidesPayload: { // field return type
    readingGuides: NexusGenRootTypes['ReadingGuide'][]; // [ReadingGuide!]!
  }
  AssignSeatsPayload: { // field return type
    courseInfo: NexusGenRootTypes['CourseInfo']; // CourseInfo!
  }
  BuildRubricEntryPayload: { // field return type
    rubricEntry: NexusGenRootTypes['RubricEntry']; // RubricEntry!
  }
  ChangeAllQuizzesToSecondMarkingPeriodPayload: { // field return type
    changed: boolean; // Boolean!
  }
  ChangePasswordPayload: { // field return type
    user: NexusGenRootTypes['User']; // User!
  }
  Chapter: { // field return type
    _id: string | null; // ID
    chapterNumber: number; // Int!
    chapterTitle: string; // String!
    fromText: NexusGenRootTypes['Text']; // Text!
    hasSections: NexusGenRootTypes['TextSection'][]; // [TextSection!]!
  }
  ComprehensionMetrics: { // field return type
    _id: string | null; // ID
    comprehensionLevel: number; // Int!
    student: NexusGenRootTypes['Student']; // Student!
  }
  ContactInfo: { // field return type
    guardianEmail: string; // String!
    guardianFirstName: string; // String!
    guardianLastName: string; // String!
    guardianPhone: string; // String!
  }
  ControlCoolDownPayload: { // field return type
    lesson: NexusGenRootTypes['Lesson']; // Lesson!
  }
  ControlWarmUpPayload: { // field return type
    lesson: NexusGenRootTypes['Lesson']; // Lesson!
  }
  Course: { // field return type
    _id: string | null; // ID
    hasCourseInfo: NexusGenRootTypes['CourseInfo'] | null; // CourseInfo
    hasLessons: NexusGenRootTypes['Lesson'][]; // [Lesson!]!
    hasSignInSheets: NexusGenRootTypes['StudentSignInSheet'][]; // [StudentSignInSheet!]!
    hasStudents: NexusGenRootTypes['Student'][]; // [Student!]!
    hasTeacher: NexusGenRootTypes['Teacher']; // Teacher!
    name: string; // String!
  }
  CourseInfo: { // field return type
    _id: string | null; // ID
    assignedSeats: NexusGenRootTypes['StudentSeat'][]; // [StudentSeat!]!
    assignmentsInClassNotAllowed: boolean; // Boolean!
    associatedCourseId: string | null; // ID
    cohortBasedSeating: boolean; // Boolean!
    course: NexusGenRootTypes['Course']; // Course!
    courseType: NexusGenEnums['CourseTypeEnum']; // CourseTypeEnum!
    endsAt: string; // String!
    halfDayEndsAt: string; // String!
    halfDayStartsAt: string; // String!
    hasTeacher: NexusGenRootTypes['Teacher']; // Teacher!
    schoolDayType: NexusGenEnums['SchoolDayType']; // SchoolDayType!
    startsAt: string; // String!
  }
  CreateAbsencePayload: { // field return type
    studentAbsence: NexusGenRootTypes['StudentAbsence']; // StudentAbsence!
  }
  CreateArticleReviewsPayload: { // field return type
    articleReviews: NexusGenRootTypes['ArticleReview'][]; // [ArticleReview!]!
  }
  CreateCourseInfoPayload: { // field return type
    courseInfo: NexusGenRootTypes['CourseInfo']; // CourseInfo!
  }
  CreateCoursePayload: { // field return type
    course: NexusGenRootTypes['Course']; // Course!
  }
  CreateEssayPayload: { // field return type
    essays: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  CreateEssayQuestionPayload: { // field return type
    essayQuestion: NexusGenRootTypes['EssayQuestion']; // EssayQuestion!
  }
  CreateEssentialQuestionPayload: { // field return type
    essentialQuestion: NexusGenRootTypes['EssentialQuestion']; // EssentialQuestion!
  }
  CreateExcusedLatenessPayload: { // field return type
    excusedLateness: NexusGenRootTypes['ExcusedLateness']; // ExcusedLateness!
  }
  CreateLessonPayload: { // field return type
    lessons: NexusGenRootTypes['Lesson'][]; // [Lesson!]!
  }
  CreateParentContactPayload: { // field return type
    parentContact: NexusGenRootTypes['ParentContact']; // ParentContact!
  }
  CreateProtocolPayload: { // field return type
    protocols: NexusGenRootTypes['Protocol'][]; // [Protocol!]!
  }
  CreateQuizQuestionPayload: { // field return type
    quizQuestion: NexusGenRootTypes['QuizQuestion']; // QuizQuestion!
  }
  CreateQuizzesByCoursePayload: { // field return type
    quizzes: NexusGenRootTypes['Quiz'][]; // [Quiz!]!
  }
  CreateReadingGuidePayload: { // field return type
    readingGuides: NexusGenRootTypes['ReadingGuide'][]; // [ReadingGuide!]!
  }
  CreateResponsibilityPointsPayload: { // field return type
    responsibilityPoints: NexusGenRootTypes['ResponsibilityPoints'][]; // [ResponsibilityPoints!]!
  }
  CreateSchoolDayPayload: { // field return type
    schoolDay: NexusGenRootTypes['SchoolDay']; // SchoolDay!
  }
  CreateSchoolDayTrackerPayload: { // field return type
    schoolDayTracker: NexusGenRootTypes['SchoolDayTracker']; // SchoolDayTracker!
  }
  CreateSignInSheetsPayload: { // field return type
    schoolDay: NexusGenRootTypes['SchoolDay']; // SchoolDay!
  }
  CreateStudentBehaviorPayload: { // field return type
    studentBehavior: NexusGenRootTypes['StudentBehavior']; // StudentBehavior!
  }
  CreateStudentQuestionPayload: { // field return type
    studentQuestions: NexusGenRootTypes['StudentQuestions']; // StudentQuestions!
  }
  CreateStudentQuestionsContainerPayload: { // field return type
    studentQuestions: NexusGenRootTypes['StudentQuestions']; // StudentQuestions!
  }
  CreateTemporaryTasksPayload: { // field return type
    temporaryTasks: NexusGenRootTypes['TemporaryTask'][]; // [TemporaryTask!]!
  }
  CreateTextSectionPayload: { // field return type
    textSection: NexusGenRootTypes['TextSection']; // TextSection!
  }
  CreateUnexcusedLatenessPayload: { // field return type
    unexcusedLateness: NexusGenRootTypes['UnexcusedLateness']; // UnexcusedLateness!
  }
  CreateUnitPayload: { // field return type
    unit: NexusGenRootTypes['Unit']; // Unit!
  }
  CreateWritingMetricsPayload: { // field return type
    created: boolean; // Boolean!
  }
  DeleteAllAssignmentsPayload: { // field return type
    removed: boolean; // Boolean!
  }
  DeleteAllParentContactsPayload: { // field return type
    removed: boolean; // Boolean!
  }
  DeleteAllProtocolsPayload: { // field return type
    removed: boolean; // Boolean!
  }
  DeleteAllSchoolDaysPayload: { // field return type
    removed: boolean; // Boolean!
  }
  DeleteAllStudentDataPayload: { // field return type
    removed: boolean; // Boolean!
  }
  DeleteAllTemporaryTasksPayload: { // field return type
    removed: boolean; // Boolean!
  }
  DeleteReviewsPayload: { // field return type
    removed: boolean; // Boolean!
  }
  DeleteTemporaryTasksPayload: { // field return type
    removed: boolean; // Boolean!
  }
  DevelopingOrganizer: { // field return type
    answer: string; // String!
    basicQuestionType: NexusGenEnums['BasicQuestionEnum'] | null; // BasicQuestionEnum
    conclusion: string; // String!
    developingSentenceStructure: NexusGenRootTypes['DevelopingSentenceStructure']; // DevelopingSentenceStructure!
    restatement: string; // String!
  }
  DevelopingSentenceStructure: { // field return type
    object: string | null; // String
    subject: string; // String!
    subjectCompliment: string | null; // String
    verb: string; // String!
  }
  EmergencyModificationPayload: { // field return type
    modified: boolean; // Boolean!
  }
  Essay: { // field return type
    _id: string | null; // ID
    assigned: boolean; // Boolean!
    assignedDate: string; // String!
    associatedLessonId: string | null; // ID
    dueDate: string; // String!
    dueTime: string; // String!
    exempt: boolean; // Boolean!
    finalDraft: NexusGenRootTypes['FinalDraftContainer'] | null; // FinalDraftContainer
    gradeType: NexusGenEnums['GradeTypeEnum']; // GradeTypeEnum!
    hasAssigner: NexusGenRootTypes['Teacher']; // Teacher!
    hasOwner: NexusGenRootTypes['Student']; // Student!
    late: boolean; // Boolean!
    lessonInfo: NexusGenRootTypes['Lesson']; // Lesson!
    leveledUp: boolean; // Boolean!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    missing: boolean; // Boolean!
    paperBased: boolean; // Boolean!
    readings: NexusGenRootTypes['Readings']; // Readings!
    score: NexusGenRootTypes['Score']; // Score!
    topic: NexusGenRootTypes['Topic']; // Topic!
    workingDraft: NexusGenRootTypes['WorkingDraft']; // WorkingDraft!
  }
  EssayQuestion: { // field return type
    _id: string | null; // ID
    associatedTextSectionsIds: string[]; // [ID!]!
    questionParts: NexusGenRootTypes['QuestionPartsContainer']; // QuestionPartsContainer!
    questionUsageType: NexusGenEnums['QuestionUsageTypeEnum']; // QuestionUsageTypeEnum!
  }
  EssentialQuestion: { // field return type
    _id: string | null; // ID
    associatedTextSectionsIds: string[]; // [ID!]!
    question: string; // String!
    questionUsageType: NexusGenEnums['QuestionUsageTypeEnum']; // QuestionUsageTypeEnum!
  }
  ExcusedLateness: { // field return type
    _id: string | null; // ID
    dayLateExcused: NexusGenScalars['Date']; // Date!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    student: NexusGenRootTypes['Student']; // Student!
  }
  ExemptArticleReviewPayload: { // field return type
    articleReview: NexusGenRootTypes['ArticleReview']; // ArticleReview!
  }
  FinalDraftContainer: { // field return type
    returned: boolean; // Boolean!
    submitted: boolean; // Boolean!
    submittedFinalDraft: NexusGenRootTypes['SubmittedFinalDraft'][]; // [SubmittedFinalDraft!]!
    submitTime: NexusGenScalars['DateTime'] | null; // DateTime
  }
  FindActiveProtocolByStudentPayload: { // field return type
    protocol: NexusGenRootTypes['Protocol']; // Protocol!
  }
  FindActiveProtocolsByCoursePayload: { // field return type
    protocols: NexusGenRootTypes['Protocol'][]; // [Protocol!]!
  }
  FindAllCourseTitlesPayload: { // field return type
    courses: NexusGenRootTypes['Course'][]; // [Course!]!
  }
  FindAllStudentsPayload: { // field return type
    students: NexusGenRootTypes['Student'][]; // [Student!]!
  }
  FindAllUsersPayload: { // field return type
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  FindArticleReviewByIdPayload: { // field return type
    articleReview: NexusGenRootTypes['ArticleReview']; // ArticleReview!
  }
  FindArticleReviewsByCoursePayload: { // field return type
    articleReviews: NexusGenRootTypes['ArticleReview'][]; // [ArticleReview!]!
  }
  FindArticleReviewsByStudentPayload: { // field return type
    articleReviews: NexusGenRootTypes['ArticleReview'][]; // [ArticleReview!]!
  }
  FindAssignmentByIdPayload: { // field return type
    assignment: NexusGenRootTypes['Assignment']; // Assignment!
  }
  FindAssignmentByStudentIdPayload: { // field return type
    articleReviews: NexusGenRootTypes['ArticleReview'][]; // [ArticleReview!]!
    assignments: NexusGenRootTypes['Assignment'][]; // [Assignment!]!
  }
  FindAssignmentsByCourseIdPayload: { // field return type
    assignments: NexusGenRootTypes['Assignment'][]; // [Assignment!]!
  }
  FindAssignmentsToGradePayload: { // field return type
    assignments: NexusGenRootTypes['Assignment'][]; // [Assignment!]!
  }
  FindChapterTitlePayload: { // field return type
    chapter: NexusGenRootTypes['Chapter']; // Chapter!
  }
  FindChaptersByTextIdPayload: { // field return type
    chapters: NexusGenRootTypes['Chapter'][]; // [Chapter!]!
  }
  FindChaptersInTextPayload: { // field return type
    chapters: NexusGenRootTypes['Chapter'][]; // [Chapter!]!
  }
  FindCompletedEssaysByStudentIdPayload: { // field return type
    essays: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  FindContactsByStudentIdPayload: { // field return type
    parentContacts: NexusGenRootTypes['ParentContact'][]; // [ParentContact!]!
  }
  FindCourseByIdPayload: { // field return type
    course: NexusGenRootTypes['Course']; // Course!
  }
  FindCourseInfoByCourseIdPayload: { // field return type
    courseInfo: NexusGenRootTypes['CourseInfo']; // CourseInfo!
  }
  FindCoursesByIdPayload: { // field return type
    courses: NexusGenRootTypes['Course'][]; // [Course!]!
  }
  FindCurrentMarkingPeriodPayload: { // field return type
    markingPeriod: NexusGenRootTypes['MarkingPeriod']; // MarkingPeriod!
  }
  FindEssayByIdPayload: { // field return type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  FindEssayByStudentIdAndLessonIdPayload: { // field return type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  FindEssayQuestionByIdPayload: { // field return type
    essayQuestion: NexusGenRootTypes['EssayQuestion']; // EssayQuestion!
  }
  FindEssaysByAssociatedLessonIdAndCourseIdPayload: { // field return type
    essays: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  FindEssaysByAssociatedLessonIdPayload: { // field return type
    essays: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  FindEssaysByUserNameAndMarkingPeriodPayload: { // field return type
    essay: NexusGenRootTypes['Essay'][] | null; // [Essay!]
  }
  FindEssaysToCompleteByStudentIdPayload: { // field return type
    essays: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  FindEssaysToGradeByIdPayload: { // field return type
    essays: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  FindEssentialQuestionsByAssociatedTextSectionIdsPayload: { // field return type
    essentialQuestions: NexusGenRootTypes['EssentialQuestion'][]; // [EssentialQuestion!]!
  }
  FindLessonByCourseAndDatePayload: { // field return type
    lesson: NexusGenRootTypes['Lesson'] | null; // Lesson
  }
  FindLessonByCoursePayload: { // field return type
    lessons: NexusGenRootTypes['Lesson'][]; // [Lesson!]!
  }
  FindLessonByIdPayload: { // field return type
    lesson: NexusGenRootTypes['Lesson']; // Lesson!
  }
  FindLessonStatusPayload: { // field return type
    lesson: NexusGenRootTypes['Lesson']; // Lesson!
  }
  FindLessonsByAssignedDatePayload: { // field return type
    lessons: NexusGenRootTypes['Lesson'][] | null; // [Lesson!]
  }
  FindLessonsByUnitPayload: { // field return type
    lessons: NexusGenRootTypes['Lesson'][]; // [Lesson!]!
  }
  FindParentContactsByTeacherIdPayload: { // field return type
    parentContacts: NexusGenRootTypes['ParentContact'][]; // [ParentContact!]!
  }
  FindQuizByIdPayload: { // field return type
    quiz: NexusGenRootTypes['Quiz']; // Quiz!
  }
  FindQuizQuestionsByQuizzableSectionsPayload: { // field return type
    quizQuestions: NexusGenRootTypes['QuizQuestion'][]; // [QuizQuestion!]!
  }
  FindQuizQuestionsByTextSectionIdPayload: { // field return type
    quizQuestions: NexusGenRootTypes['QuizQuestion'][]; // [QuizQuestion!]!
  }
  FindQuizzesByStudentIdPayload: { // field return type
    quizzes: NexusGenRootTypes['Quiz'][]; // [Quiz!]!
  }
  FindQuizzesForCourseByAssignedDatePayload: { // field return type
    quizzes: NexusGenRootTypes['Quiz'][]; // [Quiz!]!
  }
  FindReadingGuideByIdPayload: { // field return type
    readingGuide: NexusGenRootTypes['ReadingGuide']; // ReadingGuide!
  }
  FindReadingGuideByUserIdAndReadingSectionPayload: { // field return type
    readingGuide: NexusGenRootTypes['ReadingGuide'] | null; // ReadingGuide
  }
  FindReadingGuidesByAssociatedLessonAndCourseIdPayload: { // field return type
    readingGuides: NexusGenRootTypes['ReadingGuide'][]; // [ReadingGuide!]!
  }
  FindReadingGuidesByCourseIdAndAssignedDatePayload: { // field return type
    readingGuides: NexusGenRootTypes['ReadingGuide'][]; // [ReadingGuide!]!
  }
  FindReadingGuidesByMarkingPeriodPayload: { // field return type
    readingGuides: NexusGenRootTypes['ReadingGuide'][]; // [ReadingGuide!]!
  }
  FindReadingGuidesByReadingSectionPayload: { // field return type
    readingGuides: NexusGenRootTypes['ReadingGuide'][]; // [ReadingGuide!]!
  }
  FindReadingGuidesToCompleteByStudentIdPayload: { // field return type
    readingGuides: NexusGenRootTypes['ReadingGuide'][]; // [ReadingGuide!]!
  }
  FindResponsibilityPointsByCoursePayload: { // field return type
    responsibilityPointList: NexusGenRootTypes['ResponsibilityPoints'][]; // [ResponsibilityPoints!]!
  }
  FindResponsibilityPointsByStudentIdPayload: { // field return type
    responsibilityPoints: NexusGenRootTypes['ResponsibilityPoints'][]; // [ResponsibilityPoints!]!
  }
  FindRubricEntriesByCategoryPayload: { // field return type
    rubricEntries: NexusGenRootTypes['RubricEntry'][]; // [RubricEntry!]!
  }
  FindRubricEntriesPayload: { // field return type
    rubricEntries: NexusGenRootTypes['RubricEntry'][]; // [RubricEntry!]!
  }
  FindSchoolDayByDatePayload: { // field return type
    schoolDay: NexusGenRootTypes['SchoolDay'] | null; // SchoolDay
  }
  FindSchoolDayPayload: { // field return type
    schoolDayTracker: NexusGenRootTypes['SchoolDayTracker']; // SchoolDayTracker!
  }
  FindStudentByIdPayload: { // field return type
    student: NexusGenRootTypes['Student']; // Student!
  }
  FindStudentQuestionsPayload: { // field return type
    studentQuestions: NexusGenRootTypes['StudentQuestion'][]; // [StudentQuestion!]!
  }
  FindStudentsByCoursePayload: { // field return type
    students: NexusGenRootTypes['Student'][]; // [Student!]!
  }
  FindStudentsByIdPayload: { // field return type
    students: NexusGenRootTypes['Student'][]; // [Student!]!
  }
  FindTemporaryTasksByStudentIdPayload: { // field return type
    temporaryTasks: NexusGenRootTypes['TemporaryTask'][]; // [TemporaryTask!]!
  }
  FindTemporaryTasksPayload: { // field return type
    temporaryTasks: NexusGenRootTypes['TemporaryTask'][]; // [TemporaryTask!]!
  }
  FindTextByTitlePayload: { // field return type
    text: NexusGenRootTypes['Text']; // Text!
  }
  FindTextSectionByIdPayload: { // field return type
    textSection: NexusGenRootTypes['TextSection']; // TextSection!
  }
  FindTextSectionsByChapterPayload: { // field return type
    textSections: NexusGenRootTypes['TextSection'][]; // [TextSection!]!
  }
  FindTextSectionsByIdPayload: { // field return type
    textSections: NexusGenRootTypes['TextSection'][]; // [TextSection!]!
  }
  FindTextsPayload: { // field return type
    texts: NexusGenRootTypes['Text'][]; // [Text!]!
  }
  FindUnitsPayload: { // field return type
    units: NexusGenRootTypes['Unit'][]; // [Unit!]!
  }
  FindUserDataPayload: { // field return type
    user: NexusGenRootTypes['User']; // User!
  }
  FindWritingMetricsPayload: { // field return type
    writingMetrics: NexusGenRootTypes['WritingMetrics']; // WritingMetrics!
  }
  FinishProtocolPayload: { // field return type
    protocols: NexusGenRootTypes['Protocol'][]; // [Protocol!]!
  }
  FinishQuizPayload: { // field return type
    quiz: NexusGenRootTypes['Quiz']; // Quiz!
  }
  ForceFinishQuizPayload: { // field return type
    finished: boolean; // Boolean!
  }
  GradeArticleReviewPayload: { // field return type
    articleReview: NexusGenRootTypes['ArticleReview']; // ArticleReview!
  }
  GradeTemporaryTaskPayload: { // field return type
    temporaryTask: NexusGenRootTypes['TemporaryTask']; // TemporaryTask!
  }
  HowCauseEffectAnswerType: { // field return type
    after: string; // String!
    before: string; // String!
    cause: string; // String!
  }
  HowCauseEffectMetrics: { // field return type
    howCauseEffectLevel: NexusGenEnums['WritingLevelEnum']; // WritingLevelEnum!
    levelPoints: number; // Int!
  }
  HowProblemSolutionMetrics: { // field return type
    howProblemSolutionLevel: NexusGenEnums['WritingLevelEnum']; // WritingLevelEnum!
    levelPoints: number; // Int!
  }
  InitializeStudentsPayload: { // field return type
    students: NexusGenRootTypes['Student'][]; // [Student!]!
  }
  Lesson: { // field return type
    _id: string | null; // ID
    afterActivity: NexusGenRootTypes['TextSectionProtocols']; // TextSectionProtocols!
    assignedCourses: NexusGenRootTypes['Course'][]; // [Course!]!
    assignedDate: NexusGenScalars['Date']; // Date!
    assignedMarkingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    assignedSectionIdList: string[]; // [ID!]!
    assignedSections: NexusGenRootTypes['LessonTextSections']; // LessonTextSections!
    beforeActivity: NexusGenRootTypes['TextSectionProtocols']; // TextSectionProtocols!
    duringActivities: NexusGenRootTypes['TextSectionProtocols'][]; // [TextSectionProtocols!]!
    dynamicLesson: NexusGenEnums['DynamicLessonEnums']; // DynamicLessonEnums!
    essentialQuestion: string; // String!
    inUnit: NexusGenRootTypes['Unit']; // Unit!
    lessonName: string; // String!
    lessonNotes: string[] | null; // [String!]
    lessonType: NexusGenEnums['LessonTypeEnum']; // LessonTypeEnum!
    objectives: string | null; // String
    pageNumbers: NexusGenRootTypes['PageNumbers']; // PageNumbers!
    questionList: NexusGenRootTypes['TextSectionQuestions'][]; // [TextSectionQuestions!]!
    vocabList: NexusGenRootTypes['TextSectionVocab'][]; // [TextSectionVocab!]!
  }
  LessonTextSections: { // field return type
    endingSection: string; // String!
    startingSection: string; // String!
  }
  LoginPayload: { // field return type
    user: NexusGenRootTypes['User']; // User!
  }
  MarkAllProtocolsInactivePayload: { // field return type
    inactive: boolean; // Boolean!
  }
  MarkExemptPayload: { // field return type
    marked: boolean; // Boolean!
  }
  MarkTemporaryTaskAbsentPayload: { // field return type
    temporaryTask: NexusGenRootTypes['TemporaryTask']; // TemporaryTask!
  }
  MarkingPeriod: { // field return type
    _id: string | null; // ID
    currentMarkingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
  }
  ModifyCourseInfoPayload: { // field return type
    modified: boolean; // Boolean!
  }
  Mutation: { // field return type
    activateQuiz: NexusGenRootTypes['ActivateQuizPayload']; // ActivateQuizPayload!
    addAssociatedCourseId: NexusGenRootTypes['AddAssociatedCourseIdPayload']; // AddAssociatedCourseIdPayload!
    addCourseToTeacher: NexusGenRootTypes['AddCourseToTeacherPayload']; // AddCourseToTeacherPayload!
    addDeskToAssignedSeats: NexusGenRootTypes['AddDeskToAssignedSeatsPayload']; // AddDeskToAssignedSeatsPayload!
    addFieldsToReadingGuide: NexusGenRootTypes['AddFieldsToReadingGuidePayload']; // AddFieldsToReadingGuidePayload!
    addForcedFinishedToAllQuizzes: NexusGenRootTypes['AddForcedFinishedToAllQuizzesPayload']; // AddForcedFinishedToAllQuizzesPayload!
    addIEPInfo: NexusGenRootTypes['AddIEPInfoPayload']; // AddIEPInfoPayload!
    addNewChapter: NexusGenRootTypes['AddNewChapterPayload']; // AddNewChapterPayload!
    addNewText: NexusGenRootTypes['AddNewTextPayload']; // AddNewTextPayload!
    addStudentsToCourse: NexusGenRootTypes['AddStudentsToCoursePayload']; // AddStudentsToCoursePayload!
    addUserEmail: NexusGenRootTypes['AddUserEmailPayload']; // AddUserEmailPayload!
    addVocabWord: NexusGenRootTypes['AddVocabWordPayload']; // AddVocabWordPayload!
    assessIndividualProtocols: NexusGenRootTypes['AssessIndividualProtocolsPayload']; // AssessIndividualProtocolsPayload!
    assessStudentProtocol: NexusGenRootTypes['AssessStudentProtocolPayload']; // AssessStudentProtocolPayload!
    assignEssays: NexusGenRootTypes['AssignEssaysPayload']; // AssignEssaysPayload!
    assignQuizzesByStudentIdsAndDate: NexusGenRootTypes['AssignQuizzesByStudentIdsAndDatePayload']; // AssignQuizzesByStudentIdsAndDatePayload!
    assignReadingGuides: NexusGenRootTypes['AssignReadingGuidesPayload']; // AssignReadingGuidesPayload!
    assignSeats: NexusGenRootTypes['AssignSeatsPayload']; // AssignSeatsPayload!
    buildRubricEntry: NexusGenRootTypes['BuildRubricEntryPayload']; // BuildRubricEntryPayload!
    changeAllQuizzesToSecondMarkingPeriod: NexusGenRootTypes['ChangeAllQuizzesToSecondMarkingPeriodPayload']; // ChangeAllQuizzesToSecondMarkingPeriodPayload!
    changePassword: NexusGenRootTypes['ChangePasswordPayload']; // ChangePasswordPayload!
    changeVocabWord: NexusGenRootTypes['UpdateVocabPayload']; // UpdateVocabPayload!
    controlCoolDown: NexusGenRootTypes['ControlCoolDownPayload']; // ControlCoolDownPayload!
    controlWarmUp: NexusGenRootTypes['ControlWarmUpPayload']; // ControlWarmUpPayload!
    createAbsence: NexusGenRootTypes['CreateAbsencePayload']; // CreateAbsencePayload!
    createArticleReviews: NexusGenRootTypes['CreateArticleReviewsPayload']; // CreateArticleReviewsPayload!
    createCourse: NexusGenRootTypes['CreateCoursePayload']; // CreateCoursePayload!
    createCourseInfo: NexusGenRootTypes['CreateCourseInfoPayload']; // CreateCourseInfoPayload!
    createEssay: NexusGenRootTypes['CreateEssayPayload']; // CreateEssayPayload!
    createEssayQuestion: NexusGenRootTypes['CreateEssayQuestionPayload']; // CreateEssayQuestionPayload!
    createEssentialQuestion: NexusGenRootTypes['CreateEssentialQuestionPayload']; // CreateEssentialQuestionPayload!
    createExcusedLateness: NexusGenRootTypes['CreateExcusedLatenessPayload']; // CreateExcusedLatenessPayload!
    createLesson: NexusGenRootTypes['CreateLessonPayload']; // CreateLessonPayload!
    createParentContact: NexusGenRootTypes['CreateParentContactPayload']; // CreateParentContactPayload!
    createProtocol: NexusGenRootTypes['CreateProtocolPayload']; // CreateProtocolPayload!
    createQuizQuestion: NexusGenRootTypes['CreateQuizQuestionPayload']; // CreateQuizQuestionPayload!
    createQuizzesByCourse: NexusGenRootTypes['CreateQuizzesByCoursePayload']; // CreateQuizzesByCoursePayload!
    createReadingGuide: NexusGenRootTypes['CreateReadingGuidePayload']; // CreateReadingGuidePayload!
    createResponsibilityPoints: NexusGenRootTypes['CreateResponsibilityPointsPayload']; // CreateResponsibilityPointsPayload!
    createSchoolDay: NexusGenRootTypes['CreateSchoolDayPayload']; // CreateSchoolDayPayload!
    createSchoolDayTracker: NexusGenRootTypes['CreateSchoolDayTrackerPayload']; // CreateSchoolDayTrackerPayload!
    createSignInSheets: NexusGenRootTypes['CreateSignInSheetsPayload']; // CreateSignInSheetsPayload!
    createStudentBehavior: NexusGenRootTypes['CreateStudentBehaviorPayload']; // CreateStudentBehaviorPayload!
    createStudentQuestion: NexusGenRootTypes['CreateStudentQuestionPayload']; // CreateStudentQuestionPayload!
    createStudentQuestionsContainer: NexusGenRootTypes['CreateStudentQuestionsContainerPayload']; // CreateStudentQuestionsContainerPayload!
    createTemporaryTasks: NexusGenRootTypes['CreateTemporaryTasksPayload']; // CreateTemporaryTasksPayload!
    createTextSection: NexusGenRootTypes['CreateTextSectionPayload']; // CreateTextSectionPayload!
    createUnexcusedLateness: NexusGenRootTypes['CreateUnexcusedLatenessPayload']; // CreateUnexcusedLatenessPayload!
    createUnit: NexusGenRootTypes['CreateUnitPayload']; // CreateUnitPayload!
    createWritingMetrics: NexusGenRootTypes['CreateWritingMetricsPayload']; // CreateWritingMetricsPayload!
    deleteAllAssignments: NexusGenRootTypes['DeleteAllAssignmentsPayload']; // DeleteAllAssignmentsPayload!
    deleteAllParentContacts: NexusGenRootTypes['DeleteAllParentContactsPayload']; // DeleteAllParentContactsPayload!
    deleteAllProtocols: NexusGenRootTypes['DeleteAllProtocolsPayload']; // DeleteAllProtocolsPayload!
    deleteAllSchoolDays: NexusGenRootTypes['DeleteAllSchoolDaysPayload']; // DeleteAllSchoolDaysPayload!
    deleteAllStudentData: NexusGenRootTypes['DeleteAllStudentDataPayload']; // DeleteAllStudentDataPayload!
    deleteAllTemporaryTasks: NexusGenRootTypes['DeleteAllTemporaryTasksPayload']; // DeleteAllTemporaryTasksPayload!
    deleteReviews: NexusGenRootTypes['DeleteReviewsPayload']; // DeleteReviewsPayload!
    deleteTemporaryTasks: NexusGenRootTypes['DeleteTemporaryTasksPayload']; // DeleteTemporaryTasksPayload!
    emergencyModification: NexusGenRootTypes['EmergencyModificationPayload']; // EmergencyModificationPayload!
    exemptArticleReview: NexusGenRootTypes['ExemptArticleReviewPayload']; // ExemptArticleReviewPayload!
    finishProtocol: NexusGenRootTypes['FinishProtocolPayload']; // FinishProtocolPayload!
    finishQuiz: NexusGenRootTypes['FinishQuizPayload']; // FinishQuizPayload!
    forceFinishQuiz: NexusGenRootTypes['ForceFinishQuizPayload']; // ForceFinishQuizPayload!
    gradeArticleReview: NexusGenRootTypes['GradeArticleReviewPayload']; // GradeArticleReviewPayload!
    gradeTemporaryTask: NexusGenRootTypes['GradeTemporaryTaskPayload']; // GradeTemporaryTaskPayload!
    initializeStudents: NexusGenRootTypes['InitializeStudentsPayload']; // InitializeStudentsPayload!
    login: NexusGenRootTypes['LoginPayload']; // LoginPayload!
    logout: boolean; // Boolean!
    markAllProtocolsInactive: NexusGenRootTypes['MarkAllProtocolsInactivePayload']; // MarkAllProtocolsInactivePayload!
    markExempt: NexusGenRootTypes['MarkExemptPayload']; // MarkExemptPayload!
    markTemporaryTaskAbsent: NexusGenRootTypes['MarkTemporaryTaskAbsentPayload']; // MarkTemporaryTaskAbsentPayload!
    modifyCourseInfo: NexusGenRootTypes['ModifyCourseInfoPayload']; // ModifyCourseInfoPayload!
    registerStudent: NexusGenRootTypes['RegisterStudentPayload']; // RegisterStudentPayload!
    registerTeacher: NexusGenRootTypes['RegisterTeacherPayload']; // RegisterTeacherPayload!
    removeAbsence: NexusGenRootTypes['RemoveAbsencePayload']; // RemoveAbsencePayload!
    removeAssignedSeat: NexusGenRootTypes['RemoveAssignedSeatPayload']; // RemoveAssignedSeatPayload!
    removeCourse: NexusGenRootTypes['RemoveCoursePayload']; // RemoveCoursePayload!
    removeLateness: NexusGenRootTypes['RemoveLatenessPayload']; // RemoveLatenessPayload!
    removeProtocol: NexusGenRootTypes['RemoveProtocolPayload']; // RemoveProtocolPayload!
    removeRubricEntry: NexusGenRootTypes['RemoveRubricEntryPayload']; // RemoveRubricEntryPayload!
    removeStudentBehavior: NexusGenRootTypes['RemoveStudentBehaviorPayload']; // RemoveStudentBehaviorPayload!
    removeStudentsFromCourse: NexusGenRootTypes['RemoveStudentsFromCoursePayload']; // RemoveStudentsFromCoursePayload!
    removeTextSection: NexusGenRootTypes['RemoveTextSectionPayload']; // RemoveTextSectionPayload!
    resetPassword: NexusGenRootTypes['ResetPasswordPayload']; // ResetPasswordPayload!
    respondToProtocol: NexusGenRootTypes['RespondToProtocolPayload']; // RespondToProtocolPayload!
    resubmitEssayFinalDraft: NexusGenRootTypes['ResubmitEssayFinalDraftPayload']; // ResubmitEssayFinalDraftPayload!
    returnArticleReview: NexusGenRootTypes['ReturnArticleReviewPayload']; // ReturnArticleReviewPayload!
    returnGradedEssay: NexusGenRootTypes['ReturnGradedEssayPayload']; // ReturnGradedEssayPayload!
    returnReadingGuide: NexusGenRootTypes['ReturnReadingGuidePayload']; // ReturnReadingGuidePayload!
    reviewReadingGuides: NexusGenRootTypes['ReviewReadingGuidesPayload']; // ReviewReadingGuidesPayload!
    schoolDayModifier: NexusGenRootTypes['SchoolDayModifierPayload']; // SchoolDayModifierPayload!
    setAnswerType: NexusGenRootTypes['SetAnswerTypePayload']; // SetAnswerTypePayload!
    setCurrentMarkingPeriod: NexusGenRootTypes['SetCurrentMarkingPeriodPayload']; // SetCurrentMarkingPeriodPayload!
    setOrganizer: NexusGenRootTypes['SetOrganizerPayload']; // SetOrganizerPayload!
    startProtocol: NexusGenRootTypes['StartProtocolPayload']; // StartProtocolPayload!
    startQuiz: NexusGenRootTypes['StartQuizPayload']; // StartQuizPayload!
    startReadingGuide: NexusGenRootTypes['StartReadingGuidePayload']; // StartReadingGuidePayload!
    studentSignIn: NexusGenRootTypes['StudentSignInPayload']; // StudentSignInPayload!
    submitArticleReview: NexusGenRootTypes['SubmitArticleReviewPayload']; // SubmitArticleReviewPayload!
    submitEssayFinalDraft: NexusGenRootTypes['SubmitEssayFinalDraftPayload']; // SubmitEssayFinalDraftPayload!
    submitReadingGuide: NexusGenRootTypes['SubmitReadingGuidePayload']; // SubmitReadingGuidePayload!
    switchToNewCourse: NexusGenRootTypes['SwitchToNewCoursePayload']; // SwitchToNewCoursePayload!
    toggleClassAssignmentsAllowed: NexusGenRootTypes['ToggleClassAssignmentsAllowedPayload']; // ToggleClassAssignmentsAllowedPayload!
    unAssignEssays: NexusGenRootTypes['UnAssignEssaysPayload']; // UnAssignEssaysPayload!
    unAssignQuizByQuizId: NexusGenRootTypes['UnAssignQuizByQuizIdPayload']; // UnAssignQuizByQuizIdPayload!
    updateAcademicOrganizer: NexusGenRootTypes['UpdateAcademicOrganizerPayload']; // UpdateAcademicOrganizerPayload!
    updateAdvancedOrganizer: NexusGenRootTypes['UpdateAdvancedOrganizerPayload']; // UpdateAdvancedOrganizerPayload!
    updateArticleReview: NexusGenRootTypes['UpdateArticleReviewPayload']; // UpdateArticleReviewPayload!
    updateCourseInfo: NexusGenRootTypes['UpdateCourseInfoPayload']; // UpdateCourseInfoPayload!
    updateDevelopingOrganizer: NexusGenRootTypes['UpdateDevelopingOrganizerPayload']; // UpdateDevelopingOrganizerPayload!
    UpdateDynamicLesson: NexusGenRootTypes['UpdateDynamicLessonPayload']; // UpdateDynamicLessonPayload!
    updateEssayByStudent: NexusGenRootTypes['UpdateEssayByStudentPayload']; // UpdateEssayByStudentPayload!
    updateEssayLateness: NexusGenRootTypes['UpdateEssayLatenessPayload']; // UpdateEssayLatenessPayload!
    updateEssaysByLesson: NexusGenRootTypes['UpdateEssaysByLessonPayload']; // UpdateEssaysByLessonPayload!
    updateEssaysByQuestion: NexusGenRootTypes['UpdateEssaysByQuestionPayload']; // UpdateEssaysByQuestionPayload!
    updateEssaysByStudentsAndSection: NexusGenRootTypes['UpdateEssaysByStudentsAndSectionPayload']; // UpdateEssaysByStudentsAndSectionPayload!
    updateGradingDraft: NexusGenRootTypes['UpdateGradingDraftPayload']; // UpdateGradingDraftPayload!
    updateHowCauseEffect: NexusGenRootTypes['UpdateHowCauseEffectPayload']; // UpdateHowCauseEffectPayload!
    updateLesson: NexusGenRootTypes['UpdateLessonPayload']; // UpdateLessonPayload!
    updateLessonProtocol: NexusGenRootTypes['UpdateProtocolPayload']; // UpdateProtocolPayload!
    updateParentContact: NexusGenRootTypes['UpdateParentContactPayload']; // UpdateParentContactPayload!
    updateProblemSolution: NexusGenRootTypes['UpdateProblemSolutionPayload']; // UpdateProblemSolutionPayload!
    updateReadingGuide: NexusGenRootTypes['UpdateReadingGuidePayload']; // UpdateReadingGuidePayload!
    updateResponsibilityPoints: NexusGenRootTypes['UpdateResponsibilityPointsPayload']; // UpdateResponsibilityPointsPayload!
    updateRubricEntry: NexusGenRootTypes['UpdateRubricEntryPayload']; // UpdateRubricEntryPayload!
    updateSchoolDay: NexusGenRootTypes['UpdateSchoolDayPayload']; // UpdateSchoolDayPayload!
    updateTemporaryTasks: NexusGenRootTypes['UpdateTemporaryTasksPayload']; // UpdateTemporaryTasksPayload!
    updateTextSection: NexusGenRootTypes['UpdateTextSectionPayload']; // UpdateTextSectionPayload!
    updateWhyCauseEffect: NexusGenRootTypes['UpdateWhyCauseEffectPayload']; // UpdateWhyCauseEffectPayload!
    updateWorkingDraft: NexusGenRootTypes['UpdateWorkingDraftPayload']; // UpdateWorkingDraftPayload!
  }
  OverallWritingMetric: { // field return type
    levelPoints: number; // Float!
    overallWritingLevel: NexusGenEnums['WritingLevelEnum']; // WritingLevelEnum!
  }
  PageNumbers: { // field return type
    endingPage: number; // Int!
    startingPage: number; // Int!
  }
  ParentContact: { // field return type
    _id: string | null; // ID
    contactType: NexusGenEnums['ContactTypeEnum']; // ContactTypeEnum!
    contentOfContact: string; // String!
    date: string; // String!
    student: NexusGenRootTypes['Student']; // Student!
    teacherId: string; // ID!
  }
  PasswordCheckPayload: { // field return type
    firstTimeLoginIn: boolean; // Boolean!
  }
  ProblemSolutionAnswerType: { // field return type
    problem: string; // String!
    reasonForProblem: string; // String!
    solvedBy: string; // String!
    whySolutionSolved: string; // String!
  }
  Protocol: { // field return type
    _id: string | null; // ID
    academicOutcomeType: NexusGenEnums['AcademicOutcomeTypes']; // AcademicOutcomeTypes!
    assessment: NexusGenEnums['ProtocolAssessmentEnum'] | null; // ProtocolAssessmentEnum
    assignedDate: string; // String!
    completed: boolean; // Boolean!
    discussionLevel: NexusGenEnums['DiscussionTypesEnum'] | null; // DiscussionTypesEnum
    endTime: string | null; // String
    isActive: boolean; // Boolean!
    lastScore: number; // Int!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    partners: NexusGenRootTypes['Student'][] | null; // [Student!]
    protocolActivityType: NexusGenEnums['ProtocolActivityTypes']; // ProtocolActivityTypes!
    response: string | null; // String
    startTime: string; // String!
    student: NexusGenRootTypes['Student']; // Student!
    task: string; // String!
  }
  Query: { // field return type
    findActiveProtocolByStudent: NexusGenRootTypes['FindActiveProtocolByStudentPayload']; // FindActiveProtocolByStudentPayload!
    findActiveProtocolsByCourse: NexusGenRootTypes['FindActiveProtocolsByCoursePayload']; // FindActiveProtocolsByCoursePayload!
    findAllCourseTitles: NexusGenRootTypes['FindAllCourseTitlesPayload']; // FindAllCourseTitlesPayload!
    findAllStudents: NexusGenRootTypes['FindAllStudentsPayload']; // FindAllStudentsPayload!
    findAllUsers: NexusGenRootTypes['FindAllUsersPayload']; // FindAllUsersPayload!
    findArticleReviewById: NexusGenRootTypes['FindArticleReviewByIdPayload']; // FindArticleReviewByIdPayload!
    findArticleReviewsByCourse: NexusGenRootTypes['FindArticleReviewsByCoursePayload']; // FindArticleReviewsByCoursePayload!
    findArticleReviewsByStudent: NexusGenRootTypes['FindArticleReviewsByStudentPayload']; // FindArticleReviewsByStudentPayload!
    findAssignmentById: NexusGenRootTypes['FindAssignmentByIdPayload']; // FindAssignmentByIdPayload!
    findAssignmentByStudentId: NexusGenRootTypes['FindAssignmentByStudentIdPayload']; // FindAssignmentByStudentIdPayload!
    findAssignmentsByCourseId: NexusGenRootTypes['FindAssignmentsByCourseIdPayload']; // FindAssignmentsByCourseIdPayload!
    findAssignmentsToGrade: NexusGenRootTypes['FindAssignmentsToGradePayload']; // FindAssignmentsToGradePayload!
    findChaptersByTextId: NexusGenRootTypes['FindChaptersByTextIdPayload']; // FindChaptersByTextIdPayload!
    findChaptersInText: NexusGenRootTypes['FindChaptersInTextPayload']; // FindChaptersInTextPayload!
    findChapterTitle: NexusGenRootTypes['FindChapterTitlePayload']; // FindChapterTitlePayload!
    findCompletedEssaysByStudentId: NexusGenRootTypes['FindCompletedEssaysByStudentIdPayload']; // FindCompletedEssaysByStudentIdPayload!
    findContactsByStudentId: NexusGenRootTypes['FindContactsByStudentIdPayload']; // FindContactsByStudentIdPayload!
    findCourseById: NexusGenRootTypes['FindCourseByIdPayload']; // FindCourseByIdPayload!
    findCourseInfoByCourseId: NexusGenRootTypes['FindCourseInfoByCourseIdPayload']; // FindCourseInfoByCourseIdPayload!
    findCoursesById: NexusGenRootTypes['FindCoursesByIdPayload']; // FindCoursesByIdPayload!
    findCurrentMarkingPeriod: NexusGenRootTypes['FindCurrentMarkingPeriodPayload']; // FindCurrentMarkingPeriodPayload!
    findEssayById: NexusGenRootTypes['FindEssayByIdPayload']; // FindEssayByIdPayload!
    findEssayByStudentIdAndLessonId: NexusGenRootTypes['FindEssayByStudentIdAndLessonIdPayload']; // FindEssayByStudentIdAndLessonIdPayload!
    findEssayQuestionById: NexusGenRootTypes['FindEssayQuestionByIdPayload']; // FindEssayQuestionByIdPayload!
    findEssaysByAssociatedLessonId: NexusGenRootTypes['FindEssaysByAssociatedLessonIdPayload']; // FindEssaysByAssociatedLessonIdPayload!
    findEssaysByAssociatedLessonIdAndCourseId: NexusGenRootTypes['FindEssaysByAssociatedLessonIdAndCourseIdPayload']; // FindEssaysByAssociatedLessonIdAndCourseIdPayload!
    findEssaysByUserNameAndMarkingPeriod: NexusGenRootTypes['FindEssaysByUserNameAndMarkingPeriodPayload']; // FindEssaysByUserNameAndMarkingPeriodPayload!
    findEssaysToCompleteByStudentId: NexusGenRootTypes['FindEssaysToCompleteByStudentIdPayload']; // FindEssaysToCompleteByStudentIdPayload!
    findEssaysToGradeById: NexusGenRootTypes['FindEssaysToGradeByIdPayload']; // FindEssaysToGradeByIdPayload!
    findEssentialQuestionsByAssociatedTextSectionIds: NexusGenRootTypes['FindEssentialQuestionsByAssociatedTextSectionIdsPayload']; // FindEssentialQuestionsByAssociatedTextSectionIdsPayload!
    findLessonByCourse: NexusGenRootTypes['FindLessonByCoursePayload']; // FindLessonByCoursePayload!
    findLessonByCourseAndDate: NexusGenRootTypes['FindLessonByCourseAndDatePayload']; // FindLessonByCourseAndDatePayload!
    findLessonById: NexusGenRootTypes['FindLessonByIdPayload']; // FindLessonByIdPayload!
    findLessonsByAssignedDate: NexusGenRootTypes['FindLessonsByAssignedDatePayload']; // FindLessonsByAssignedDatePayload!
    findLessonsByUnit: NexusGenRootTypes['FindLessonsByUnitPayload']; // FindLessonsByUnitPayload!
    findLessonStatus: NexusGenRootTypes['FindLessonStatusPayload']; // FindLessonStatusPayload!
    findParentContactsByTeacherId: NexusGenRootTypes['FindParentContactsByTeacherIdPayload']; // FindParentContactsByTeacherIdPayload!
    findQuizById: NexusGenRootTypes['FindQuizByIdPayload']; // FindQuizByIdPayload!
    findQuizQuestionsByQuizzableSections: NexusGenRootTypes['FindQuizQuestionsByQuizzableSectionsPayload']; // FindQuizQuestionsByQuizzableSectionsPayload!
    findQuizQuestionsByTextSectionId: NexusGenRootTypes['FindQuizQuestionsByTextSectionIdPayload']; // FindQuizQuestionsByTextSectionIdPayload!
    findQuizzesByStudentId: NexusGenRootTypes['FindQuizzesByStudentIdPayload']; // FindQuizzesByStudentIdPayload!
    findQuizzesForCourseByAssignedDate: NexusGenRootTypes['FindQuizzesForCourseByAssignedDatePayload']; // FindQuizzesForCourseByAssignedDatePayload!
    findReadingGuideById: NexusGenRootTypes['FindReadingGuideByIdPayload']; // FindReadingGuideByIdPayload!
    findReadingGuideByUserIdAndReadingSection: NexusGenRootTypes['FindReadingGuideByUserIdAndReadingSectionPayload']; // FindReadingGuideByUserIdAndReadingSectionPayload!
    findReadingGuidesByAssociatedLessonAndCourseId: NexusGenRootTypes['FindReadingGuidesByAssociatedLessonAndCourseIdPayload']; // FindReadingGuidesByAssociatedLessonAndCourseIdPayload!
    findReadingGuidesByCourseIdAndAssignedDate: NexusGenRootTypes['FindReadingGuidesByCourseIdAndAssignedDatePayload']; // FindReadingGuidesByCourseIdAndAssignedDatePayload!
    findReadingGuidesByMarkingPeriod: NexusGenRootTypes['FindReadingGuidesByMarkingPeriodPayload']; // FindReadingGuidesByMarkingPeriodPayload!
    findReadingGuidesByReadingSection: NexusGenRootTypes['FindReadingGuidesByReadingSectionPayload']; // FindReadingGuidesByReadingSectionPayload!
    findReadingGuidesToCompleteByStudentId: NexusGenRootTypes['FindReadingGuidesToCompleteByStudentIdPayload']; // FindReadingGuidesToCompleteByStudentIdPayload!
    findResponsibilityPointsByCourse: NexusGenRootTypes['FindResponsibilityPointsByCoursePayload']; // FindResponsibilityPointsByCoursePayload!
    findResponsibilityPointsByStudentId: NexusGenRootTypes['FindResponsibilityPointsByStudentIdPayload']; // FindResponsibilityPointsByStudentIdPayload!
    findRubricEntries: NexusGenRootTypes['FindRubricEntriesPayload']; // FindRubricEntriesPayload!
    findRubricEntriesByCategory: NexusGenRootTypes['FindRubricEntriesByCategoryPayload']; // FindRubricEntriesByCategoryPayload!
    findSchoolDayByDate: NexusGenRootTypes['FindSchoolDayByDatePayload']; // FindSchoolDayByDatePayload!
    findSchoolDayTracker: NexusGenRootTypes['FindSchoolDayPayload']; // FindSchoolDayPayload!
    findStudentById: NexusGenRootTypes['FindStudentByIdPayload']; // FindStudentByIdPayload!
    findStudentQuestions: NexusGenRootTypes['FindStudentQuestionsPayload']; // FindStudentQuestionsPayload!
    findStudentsByCourse: NexusGenRootTypes['FindStudentsByCoursePayload']; // FindStudentsByCoursePayload!
    findStudentsById: NexusGenRootTypes['FindStudentsByIdPayload']; // FindStudentsByIdPayload!
    findTemporaryTasks: NexusGenRootTypes['FindTemporaryTasksPayload']; // FindTemporaryTasksPayload!
    findTemporaryTasksByStudentId: NexusGenRootTypes['FindTemporaryTasksByStudentIdPayload']; // FindTemporaryTasksByStudentIdPayload!
    findTextByTitle: NexusGenRootTypes['FindTextByTitlePayload']; // FindTextByTitlePayload!
    findTexts: NexusGenRootTypes['FindTextsPayload']; // FindTextsPayload!
    findTextSectionById: NexusGenRootTypes['FindTextSectionByIdPayload']; // FindTextSectionByIdPayload!
    findTextSectionsByChapter: NexusGenRootTypes['FindTextSectionsByChapterPayload']; // FindTextSectionsByChapterPayload!
    findTextSectionsById: NexusGenRootTypes['FindTextSectionsByIdPayload']; // FindTextSectionsByIdPayload!
    findUnits: NexusGenRootTypes['FindUnitsPayload']; // FindUnitsPayload!
    findUserData: NexusGenRootTypes['FindUserDataPayload']; // FindUserDataPayload!
    findWritingMetrics: NexusGenRootTypes['FindWritingMetricsPayload']; // FindWritingMetricsPayload!
    me: NexusGenRootTypes['User'] | null; // User
    passwordCheck: NexusGenRootTypes['PasswordCheckPayload']; // PasswordCheckPayload!
    removeSchoolDay: NexusGenRootTypes['RemoveSchoolDayPayload']; // RemoveSchoolDayPayload!
    removeSubmittedEssayFinalDraft: NexusGenRootTypes['RemoveSubmittedEssayFinalDraftPayload']; // RemoveSubmittedEssayFinalDraftPayload!
  }
  QuestionPartsContainer: { // field return type
    completePredicate: string; // String!
    completeSubject: string; // String!
    compoundNoun: boolean; // Boolean!
    helpingVerb: string; // String!
    modifiedQuestion: string; // String!
    nounType: NexusGenEnums['NounTypeEnum']; // NounTypeEnum!
    object: string | null; // String
    originalQuestion: string; // String!
    questionType: NexusGenEnums['QuestionTypeEnum']; // QuestionTypeEnum!
    questionWord: NexusGenEnums['QuestionWordEnum']; // QuestionWordEnum!
    simplePredicate: string; // String!
    simpleSubject: string; // String!
    subjectCompliment: string | null; // String
    verbType: NexusGenEnums['VerbTypeEnum']; // VerbTypeEnum!
  }
  Quiz: { // field return type
    _id: string | null; // ID
    assigned: boolean; // Boolean!
    assignedDate: string; // String!
    associatedLessonId: string | null; // ID
    dueDate: string; // String!
    dueTime: string; // String!
    exempt: boolean; // Boolean!
    finishedQuiz: boolean; // Boolean!
    forcedFinish: boolean; // Boolean!
    gradeType: NexusGenEnums['GradeTypeEnum']; // GradeTypeEnum!
    hasAssigner: NexusGenRootTypes['Teacher']; // Teacher!
    hasOwner: NexusGenRootTypes['Student']; // Student!
    isActive: boolean; // Boolean!
    late: boolean; // Boolean!
    lessonInfo: NexusGenRootTypes['Lesson']; // Lesson!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    missing: boolean; // Boolean!
    paperBased: boolean; // Boolean!
    quizzableSections: string[]; // [ID!]!
    readings: NexusGenRootTypes['Readings']; // Readings!
    responsibilityPoints: number; // Float!
    score: NexusGenRootTypes['Score']; // Score!
    startedQuiz: boolean; // Boolean!
  }
  QuizQuestion: { // field return type
    _id: string | null; // ID
    answerList: NexusGenRootTypes['AnswerList'][]; // [AnswerList!]!
    associatedTextSectionId: string; // ID!
    difficultyLevel: NexusGenEnums['QuizQuestionDifficultyLevelEnum']; // QuizQuestionDifficultyLevelEnum!
    question: string; // String!
    questionType: NexusGenEnums['QuizQuestionTypeEnum']; // QuizQuestionTypeEnum!
    questionUsageType: NexusGenEnums['QuestionUsageTypeEnum']; // QuestionUsageTypeEnum!
  }
  ReadingGuide: { // field return type
    _id: string | null; // ID
    assigned: boolean; // Boolean!
    assignedDate: string; // String!
    associatedLessonId: string | null; // ID
    completed: boolean; // Boolean!
    dueDate: string; // String!
    dueTime: string; // String!
    effort: NexusGenEnums['ReadingGuideReviewOptionsEnum']; // ReadingGuideReviewOptionsEnum!
    exempt: boolean; // Boolean!
    graded: boolean; // Boolean!
    gradeType: NexusGenEnums['GradeTypeEnum']; // GradeTypeEnum!
    hasAssigner: NexusGenRootTypes['Teacher']; // Teacher!
    hasOwner: NexusGenRootTypes['Student']; // Student!
    late: boolean; // Boolean!
    lessonInfo: NexusGenRootTypes['Lesson']; // Lesson!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    missing: boolean; // Boolean!
    paperBased: boolean; // Boolean!
    readingGuideFinal: NexusGenRootTypes['ReadingGuideFinalContainer'] | null; // ReadingGuideFinalContainer
    readings: NexusGenRootTypes['Readings']; // Readings!
    reviewed: boolean; // Boolean!
    score: NexusGenRootTypes['Score']; // Score!
  }
  ReadingGuideFinalContainer: { // field return type
    biggestProblem: string; // String!
    howArePeopleInvolvedInProblems: string; // String!
    importantPeople: string[]; // [String!]!
    problems: string[]; // [String!]!
    reasonForBiggestProblem: string; // String!
    sectionConsequences: string; // String!
    submitted: boolean; // Boolean!
    submitTime: string | null; // String
  }
  Readings: { // field return type
    readingPages: string; // String!
    readingSections: string; // String!
  }
  RegisterStudentPayload: { // field return type
    student: NexusGenRootTypes['Student']; // Student!
  }
  RegisterTeacherPayload: { // field return type
    teacher: NexusGenRootTypes['Teacher']; // Teacher!
  }
  RemoveAbsencePayload: { // field return type
    removed: boolean; // Boolean!
  }
  RemoveAssignedSeatPayload: { // field return type
    courseInfo: NexusGenRootTypes['CourseInfo']; // CourseInfo!
  }
  RemoveCoursePayload: { // field return type
    removed: boolean; // Boolean!
  }
  RemoveLatenessPayload: { // field return type
    removed: boolean; // Boolean!
  }
  RemoveProtocolPayload: { // field return type
    deleteCount: number; // Int!
  }
  RemoveRubricEntryPayload: { // field return type
    removed: boolean; // Boolean!
  }
  RemoveSchoolDayPayload: { // field return type
    removed: boolean; // Boolean!
  }
  RemoveStudentBehaviorPayload: { // field return type
    removed: boolean; // Boolean!
  }
  RemoveStudentsFromCoursePayload: { // field return type
    students: NexusGenRootTypes['Student'][]; // [Student!]!
  }
  RemoveSubmittedEssayFinalDraftPayload: { // field return type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  RemoveTextSectionPayload: { // field return type
    removed: boolean; // Boolean!
  }
  ResetPasswordPayload: { // field return type
    user: NexusGenRootTypes['User']; // User!
  }
  RespondToProtocolPayload: { // field return type
    protocol: NexusGenRootTypes['Protocol']; // Protocol!
  }
  ResponsibilityPoints: { // field return type
    _id: string | null; // ID
    inCourse: NexusGenRootTypes['Course']; // Course!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    responsibilityPoints: number; // Float!
    student: NexusGenRootTypes['Student']; // Student!
  }
  ResubmitEssayFinalDraftPayload: { // field return type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  ReturnArticleReviewPayload: { // field return type
    articleReview: NexusGenRootTypes['ArticleReview']; // ArticleReview!
  }
  ReturnGradedEssayPayload: { // field return type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  ReturnReadingGuidePayload: { // field return type
    readingGuide: NexusGenRootTypes['ReadingGuide']; // ReadingGuide!
  }
  ReviewReadingGuidesPayload: { // field return type
    reviewed: boolean; // Boolean!
  }
  RubricEntry: { // field return type
    _id: string | null; // ID
    entry: string; // String!
    howToImprove: string | null; // String
    rubricSection: NexusGenEnums['RubricSectionEnum']; // RubricSectionEnum!
    rubricWritingLevels: NexusGenEnums['WritingLevelEnum'][]; // [WritingLevelEnum!]!
    score: number; // Int!
  }
  SGO: { // field return type
    _id: string; // ID!
  }
  SchoolDay: { // field return type
    _id: string | null; // ID
    cohortWeek: NexusGenEnums['StudentCohortEnum']; // StudentCohortEnum!
    currentSchoolDayType: NexusGenEnums['SchoolDayType']; // SchoolDayType!
    schoolDayCount: number; // Int!
    schoolDayLength: NexusGenEnums['SchoolDayLengthEnum']; // SchoolDayLengthEnum!
    signInSheets: NexusGenRootTypes['StudentSignInSheet'][] | null; // [StudentSignInSheet!]
    todaysDate: string; // String!
  }
  SchoolDayModifierPayload: { // field return type
    modified: boolean; // Boolean!
  }
  SchoolDayTracker: { // field return type
    _id: string | null; // ID
    cohortWeekTracker: NexusGenEnums['StudentCohortEnum']; // StudentCohortEnum!
    schoolDayTracker: number; // Int!
    schoolDayTypeTracker: NexusGenEnums['SchoolDayType']; // SchoolDayType!
  }
  Score: { // field return type
    earnedPoints: number; // Float!
    maxPoints: number; // Int!
  }
  SetAnswerTypePayload: { // field return type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  SetCurrentMarkingPeriodPayload: { // field return type
    markingPeriod: NexusGenRootTypes['MarkingPeriod']; // MarkingPeriod!
  }
  SetOrganizerPayload: { // field return type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  StartProtocolPayload: { // field return type
    lesson: NexusGenRootTypes['Lesson']; // Lesson!
  }
  StartQuizPayload: { // field return type
    started: boolean; // Boolean!
  }
  StartReadingGuidePayload: { // field return type
    readingGuide: NexusGenRootTypes['ReadingGuide']; // ReadingGuide!
  }
  Student: { // field return type
    _id: string | null; // ID
    cohort: NexusGenEnums['StudentCohortEnum']; // StudentCohortEnum!
    email: string | null; // String
    firstName: string; // String!
    hasAbsences: NexusGenRootTypes['StudentAbsence'][]; // [StudentAbsence!]!
    hasAssignments: NexusGenRootTypes['Assignment'][]; // [Assignment!]!
    hasBehaviors: NexusGenRootTypes['StudentBehavior'][]; // [StudentBehavior!]!
    hasContactInformation: NexusGenRootTypes['StudentInformation']; // StudentInformation!
    hasExcusedLatenesses: NexusGenRootTypes['ExcusedLateness'][]; // [ExcusedLateness!]!
    hasIEP: boolean | null; // Boolean
    hasProtocols: NexusGenRootTypes['Protocol'][]; // [Protocol!]!
    hasResponsibilityPoints: NexusGenRootTypes['ResponsibilityPoints'][]; // [ResponsibilityPoints!]!
    hasUnExcusedLatenesses: NexusGenRootTypes['UnexcusedLateness'][]; // [UnexcusedLateness!]!
    hasWritingMetrics: NexusGenRootTypes['WritingMetrics']; // WritingMetrics!
    inCourses: NexusGenRootTypes['Course'][]; // [Course!]!
    lastName: string; // String!
    middleName: string | null; // String
    password: string; // String!
    schoolId: string | null; // String
    userName: string; // String!
    virtual: boolean; // Boolean!
  }
  StudentAbsence: { // field return type
    _id: string | null; // ID
    dayAbsent: NexusGenScalars['Date']; // Date!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    student: NexusGenRootTypes['Student']; // Student!
  }
  StudentBehavior: { // field return type
    _id: string | null; // ID
    behavior: NexusGenEnums['BehaviorEnum']; // BehaviorEnum!
    date: string; // String!
    responsibilityPoints: number; // Float!
    student: NexusGenRootTypes['Student']; // Student!
  }
  StudentInformation: { // field return type
    _id: string | null; // ID
    contactInfo: NexusGenRootTypes['ContactInfo'][]; // [ContactInfo!]!
    student: NexusGenRootTypes['Student']; // Student!
  }
  StudentQuestion: { // field return type
    question: string; // String!
    student: NexusGenRootTypes['Student']; // Student!
    timeAsked: string; // String!
  }
  StudentQuestions: { // field return type
    _id: string | null; // ID
    associatedSchoolDayId: string; // ID!
    course: string; // ID!
    date: string; // String!
    questions: NexusGenRootTypes['StudentQuestion'][]; // [StudentQuestion!]!
  }
  StudentSeat: { // field return type
    deskNumber: number; // Int!
    redCohortStudent: NexusGenRootTypes['Student'] | null; // Student
    student: NexusGenRootTypes['Student'] | null; // Student
    whiteCohortStudent: NexusGenRootTypes['Student'] | null; // Student
  }
  StudentSignInPayload: { // field return type
    schoolDay: NexusGenRootTypes['SchoolDay']; // SchoolDay!
  }
  StudentSignInSheet: { // field return type
    course: NexusGenRootTypes['Course']; // Course!
    lessonDate: NexusGenScalars['Date']; // Date!
    studentsSignInlog: NexusGenRootTypes['Student'][] | null; // [Student!]
  }
  SubmitArticleReviewPayload: { // field return type
    articleReview: NexusGenRootTypes['ArticleReview']; // ArticleReview!
  }
  SubmitEssayFinalDraftPayload: { // field return type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  SubmitReadingGuidePayload: { // field return type
    readingGuide: NexusGenRootTypes['ReadingGuide']; // ReadingGuide!
  }
  SubmittedFinalDraft: { // field return type
    additionalComments: string[] | null; // [String!]
    draft: NexusGenScalars['JSON']; // JSON!
    draftNumber: number; // Int!
    graded: boolean; // Boolean!
    gradingDraft: NexusGenScalars['JSON']; // JSON!
    rubricEntries: NexusGenRootTypes['RubricEntry'][]; // [RubricEntry!]!
    score: number; // Float!
  }
  SwitchToNewCoursePayload: { // field return type
    switched: boolean; // Boolean!
  }
  Teacher: { // field return type
    _id: string | null; // ID
    email: string | null; // String
    firstName: string; // String!
    hasParentContacts: NexusGenRootTypes['ParentContact'][]; // [ParentContact!]!
    lastName: string; // String!
    middleName: string | null; // String
    password: string; // String!
    teachesCourses: NexusGenRootTypes['Course'][]; // [Course!]!
    title: NexusGenEnums['TitleEnum']; // TitleEnum!
    userName: string; // String!
  }
  TemporaryTask: { // field return type
    _id: string | null; // ID
    answered: boolean; // Boolean!
    dateIssued: string; // String!
    lastGrade: number; // Float!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    student: NexusGenRootTypes['Student']; // Student!
    studentPresent: boolean; // Boolean!
    taskNumber: number; // Int!
  }
  Text: { // field return type
    _id: string | null; // ID
    hasChapters: NexusGenRootTypes['Chapter'][]; // [Chapter!]!
    ownerId: string; // ID!
    textTitle: string; // String!
  }
  TextSection: { // field return type
    _id: string | null; // ID
    fromChapter: NexusGenRootTypes['Chapter']; // Chapter!
    hasEssayQuestions: NexusGenRootTypes['EssayQuestion'][]; // [EssayQuestion!]!
    hasProtocols: NexusGenRootTypes['TextSectionProtocols'][] | null; // [TextSectionProtocols!]
    hasQuestions: NexusGenRootTypes['TextSectionQuestions'][] | null; // [TextSectionQuestions!]
    hasQuizQuestions: NexusGenRootTypes['QuizQuestion'][]; // [QuizQuestion!]!
    hasVocab: NexusGenRootTypes['TextSectionVocab'][] | null; // [TextSectionVocab!]
    header: string; // String!
    pageNumbers: NexusGenRootTypes['PageNumbers']; // PageNumbers!
  }
  TextSectionProtocols: { // field return type
    academicOutcomeTypes: NexusGenEnums['AcademicOutcomeTypes']; // AcademicOutcomeTypes!
    activityType: NexusGenEnums['ProtocolActivityTypes']; // ProtocolActivityTypes!
    completed: boolean; // Boolean!
    isActive: boolean; // Boolean!
    task: string; // String!
  }
  TextSectionQuestions: { // field return type
    question: string; // String!
    questionType: NexusGenEnums['QuestionTypeEnum']; // QuestionTypeEnum!
  }
  TextSectionVocab: { // field return type
    definition: string; // String!
    word: string; // String!
  }
  ToggleClassAssignmentsAllowedPayload: { // field return type
    toggled: boolean; // Boolean!
  }
  Topic: { // field return type
    essayQuestionId: string; // ID!
    question: string; // String!
    questionType: NexusGenEnums['QuestionTypeEnum']; // QuestionTypeEnum!
    writingLevel: NexusGenEnums['WritingLevelEnum']; // WritingLevelEnum!
  }
  UnAssignEssaysPayload: { // field return type
    essays: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  UnAssignQuizByQuizIdPayload: { // field return type
    unAssigned: boolean; // Boolean!
  }
  UnexcusedLateness: { // field return type
    _id: string | null; // ID
    dayLate: NexusGenScalars['Date']; // Date!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    student: NexusGenRootTypes['Student']; // Student!
  }
  Unit: { // field return type
    _id: string | null; // ID
    hasLessons: NexusGenRootTypes['Lesson'][]; // [Lesson!]!
    unitName: string; // String!
  }
  UpdateAcademicOrganizerPayload: { // field return type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  UpdateAdvancedOrganizerPayload: { // field return type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  UpdateArticleReviewPayload: { // field return type
    articleReview: NexusGenRootTypes['ArticleReview']; // ArticleReview!
  }
  UpdateCourseInfoPayload: { // field return type
    courseInfo: NexusGenRootTypes['CourseInfo']; // CourseInfo!
  }
  UpdateDevelopingOrganizerPayload: { // field return type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  UpdateDynamicLessonPayload: { // field return type
    lesson: NexusGenRootTypes['Lesson']; // Lesson!
  }
  UpdateEssayByStudentPayload: { // field return type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  UpdateEssayLatenessPayload: { // field return type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  UpdateEssaysByLessonPayload: { // field return type
    essays: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  UpdateEssaysByQuestionPayload: { // field return type
    essays: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  UpdateEssaysByStudentsAndSectionPayload: { // field return type
    essays: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  UpdateGradingDraftPayload: { // field return type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  UpdateHowCauseEffectPayload: { // field return type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  UpdateLessonPayload: { // field return type
    lessons: NexusGenRootTypes['Lesson'][]; // [Lesson!]!
  }
  UpdateParentContactPayload: { // field return type
    parentContact: NexusGenRootTypes['ParentContact']; // ParentContact!
  }
  UpdateProblemSolutionPayload: { // field return type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  UpdateProtocolPayload: { // field return type
    lesson: NexusGenRootTypes['Lesson']; // Lesson!
    protocols: NexusGenRootTypes['Protocol'][]; // [Protocol!]!
  }
  UpdateReadingGuidePayload: { // field return type
    readingGuide: NexusGenRootTypes['ReadingGuide']; // ReadingGuide!
  }
  UpdateResponsibilityPointsPayload: { // field return type
    responsibilityPoints: NexusGenRootTypes['ResponsibilityPoints']; // ResponsibilityPoints!
  }
  UpdateRubricEntryPayload: { // field return type
    rubricEntry: NexusGenRootTypes['RubricEntry']; // RubricEntry!
  }
  UpdateSchoolDayPayload: { // field return type
    schoolDay: NexusGenRootTypes['SchoolDay']; // SchoolDay!
  }
  UpdateTemporaryTasksPayload: { // field return type
    temporaryTasks: NexusGenRootTypes['TemporaryTask'][]; // [TemporaryTask!]!
  }
  UpdateTextSectionPayload: { // field return type
    textSection: NexusGenRootTypes['TextSection']; // TextSection!
  }
  UpdateVocabPayload: { // field return type
    textSection: NexusGenRootTypes['TextSection']; // TextSection!
  }
  UpdateWhyCauseEffectPayload: { // field return type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  UpdateWorkingDraftPayload: { // field return type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  WhyCauseEffectAnswerType: { // field return type
    proximateCause: string; // String!
    ultimateCause: string; // String!
  }
  WhyCauseEffectMetrics: { // field return type
    levelPoints: number; // Int!
    whyCauseEffectLevel: NexusGenEnums['WritingLevelEnum']; // WritingLevelEnum!
  }
  WorkingDraft: { // field return type
    draft: string; // String!
    organizer: NexusGenRootTypes['Organizers'] | null; // Organizers
  }
  WritingMetrics: { // field return type
    _id: string | null; // ID
    howCauseEffectMetrics: NexusGenRootTypes['HowCauseEffectMetrics']; // HowCauseEffectMetrics!
    howProblemSolutionMetrics: NexusGenRootTypes['HowProblemSolutionMetrics']; // HowProblemSolutionMetrics!
    inCourse: NexusGenRootTypes['Course']; // Course!
    overallWritingMetric: NexusGenRootTypes['OverallWritingMetric']; // OverallWritingMetric!
    student: NexusGenRootTypes['Student']; // Student!
    whyCauseEffectMetrics: NexusGenRootTypes['WhyCauseEffectMetrics']; // WhyCauseEffectMetrics!
  }
  Assignment: { // field return type
    _id: string | null; // ID
    assigned: boolean; // Boolean!
    assignedDate: string; // String!
    associatedLessonId: string | null; // ID
    dueDate: string; // String!
    dueTime: string; // String!
    exempt: boolean; // Boolean!
    gradeType: NexusGenEnums['GradeTypeEnum']; // GradeTypeEnum!
    hasAssigner: NexusGenRootTypes['Teacher']; // Teacher!
    hasOwner: NexusGenRootTypes['Student']; // Student!
    late: boolean; // Boolean!
    lessonInfo: NexusGenRootTypes['Lesson']; // Lesson!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    missing: boolean; // Boolean!
    paperBased: boolean; // Boolean!
    readings: NexusGenRootTypes['Readings']; // Readings!
    score: NexusGenRootTypes['Score']; // Score!
  }
  ProgressMetrics: { // field return type
    _id: string | null; // ID
    student: NexusGenRootTypes['Student']; // Student!
  }
  Question: { // field return type
    _id: string | null; // ID
    questionUsageType: NexusGenEnums['QuestionUsageTypeEnum']; // QuestionUsageTypeEnum!
  }
  User: { // field return type
    _id: string | null; // ID
    email: string | null; // String
    firstName: string; // String!
    lastName: string; // String!
    middleName: string | null; // String
    password: string; // String!
    userName: string; // String!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    activateQuiz: { // args
      input: NexusGenInputs['ActivateQuizInput']; // ActivateQuizInput!
    }
    addCourseToTeacher: { // args
      input: NexusGenInputs['AddCourseToTeacherInput']; // AddCourseToTeacherInput!
    }
    addDeskToAssignedSeats: { // args
      input: NexusGenInputs['AddDeskToAssignedSeatsInput']; // AddDeskToAssignedSeatsInput!
    }
    addNewChapter: { // args
      input: NexusGenInputs['AddNewChapterInput']; // AddNewChapterInput!
    }
    addNewText: { // args
      input: NexusGenInputs['AddNewTextInput']; // AddNewTextInput!
    }
    addStudentsToCourse: { // args
      input: NexusGenInputs['AddStudentsToCourseInput']; // AddStudentsToCourseInput!
    }
    addUserEmail: { // args
      input: NexusGenInputs['AddUserEmailInput']; // AddUserEmailInput!
    }
    addVocabWord: { // args
      input: NexusGenInputs['AddVocabWordInput']; // AddVocabWordInput!
    }
    assessIndividualProtocols: { // args
      input: NexusGenInputs['AssessIndividualProtocolsInput']; // AssessIndividualProtocolsInput!
    }
    assessStudentProtocol: { // args
      input: NexusGenInputs['AssessStudentProtocolInput']; // AssessStudentProtocolInput!
    }
    assignEssays: { // args
      input: NexusGenInputs['AssignEssaysInput']; // AssignEssaysInput!
    }
    assignQuizzesByStudentIdsAndDate: { // args
      input: NexusGenInputs['AssignQuizzesByStudentIdsAndDateInput']; // AssignQuizzesByStudentIdsAndDateInput!
    }
    assignReadingGuides: { // args
      input: NexusGenInputs['AssignReadingGuidesInput']; // AssignReadingGuidesInput!
    }
    assignSeats: { // args
      input: NexusGenInputs['AssignSeatsInput']; // AssignSeatsInput!
    }
    buildRubricEntry: { // args
      input: NexusGenInputs['BuildRubricEntryInput']; // BuildRubricEntryInput!
    }
    changePassword: { // args
      input: NexusGenInputs['ChangePasswordInput']; // ChangePasswordInput!
    }
    changeVocabWord: { // args
      input: NexusGenInputs['ChangeVocabWordInput']; // ChangeVocabWordInput!
    }
    controlCoolDown: { // args
      input: NexusGenInputs['ControlCoolDownInput']; // ControlCoolDownInput!
    }
    controlWarmUp: { // args
      input: NexusGenInputs['ControlWarmUpInput']; // ControlWarmUpInput!
    }
    createAbsence: { // args
      input: NexusGenInputs['CreateAbsenceInput']; // CreateAbsenceInput!
    }
    createArticleReviews: { // args
      input: NexusGenInputs['CreateArticleReviewsInput']; // CreateArticleReviewsInput!
    }
    createCourse: { // args
      input: NexusGenInputs['CreateCourseInput']; // CreateCourseInput!
    }
    createCourseInfo: { // args
      input: NexusGenInputs['CreateCourseInfoInput']; // CreateCourseInfoInput!
    }
    createEssay: { // args
      input: NexusGenInputs['CreateEssayInput']; // CreateEssayInput!
    }
    createEssayQuestion: { // args
      input: NexusGenInputs['CreateEssayQuestionInput']; // CreateEssayQuestionInput!
    }
    createEssentialQuestion: { // args
      input: NexusGenInputs['CreateEssentialQuestionInput']; // CreateEssentialQuestionInput!
    }
    createExcusedLateness: { // args
      input: NexusGenInputs['CreateExcusedLatenessInput']; // CreateExcusedLatenessInput!
    }
    createLesson: { // args
      input: NexusGenInputs['CreateLessonInput']; // CreateLessonInput!
    }
    createParentContact: { // args
      input: NexusGenInputs['CreateParentContactInput']; // CreateParentContactInput!
    }
    createProtocol: { // args
      input: NexusGenInputs['CreateProtocolInput']; // CreateProtocolInput!
    }
    createQuizQuestion: { // args
      input: NexusGenInputs['CreateQuizQuestionInput']; // CreateQuizQuestionInput!
    }
    createQuizzesByCourse: { // args
      input: NexusGenInputs['CreateQuizzesByCourseInput']; // CreateQuizzesByCourseInput!
    }
    createReadingGuide: { // args
      input: NexusGenInputs['CreateReadingGuideInput']; // CreateReadingGuideInput!
    }
    createResponsibilityPoints: { // args
      input: NexusGenInputs['CreateResponsibilityPointsInput']; // CreateResponsibilityPointsInput!
    }
    createSchoolDay: { // args
      input: NexusGenInputs['CreateSchoolDayInput']; // CreateSchoolDayInput!
    }
    createSignInSheets: { // args
      input: NexusGenInputs['CreateSignInSheetsInput']; // CreateSignInSheetsInput!
    }
    createStudentBehavior: { // args
      input: NexusGenInputs['CreateStudentBehaviorInput']; // CreateStudentBehaviorInput!
    }
    createStudentQuestion: { // args
      input: NexusGenInputs['CreateStudentQuestionInput']; // CreateStudentQuestionInput!
    }
    createStudentQuestionsContainer: { // args
      input: NexusGenInputs['CreateStudentQuestionsContainerInput']; // CreateStudentQuestionsContainerInput!
    }
    createTemporaryTasks: { // args
      input: NexusGenInputs['CreateTemporaryTasksInput']; // CreateTemporaryTasksInput!
    }
    createTextSection: { // args
      input: NexusGenInputs['CreateTextSectionInput']; // CreateTextSectionInput!
    }
    createUnexcusedLateness: { // args
      input: NexusGenInputs['CreateUnexcusedLatenessInput']; // CreateUnexcusedLatenessInput!
    }
    createUnit: { // args
      input: NexusGenInputs['CreateUnitInput']; // CreateUnitInput!
    }
    deleteReviews: { // args
      input: NexusGenInputs['DeleteReviewsInput']; // DeleteReviewsInput!
    }
    deleteTemporaryTasks: { // args
      input: NexusGenInputs['DeleteTemporaryTasksInput']; // DeleteTemporaryTasksInput!
    }
    exemptArticleReview: { // args
      input: NexusGenInputs['ExemptArticleReviewInput']; // ExemptArticleReviewInput!
    }
    finishProtocol: { // args
      input: NexusGenInputs['FinishProtocolInput']; // FinishProtocolInput!
    }
    finishQuiz: { // args
      input: NexusGenInputs['FinishQuizInput']; // FinishQuizInput!
    }
    forceFinishQuiz: { // args
      input: NexusGenInputs['ForceFinishQuizInput']; // ForceFinishQuizInput!
    }
    gradeArticleReview: { // args
      input: NexusGenInputs['GradeArticleReviewInput']; // GradeArticleReviewInput!
    }
    gradeTemporaryTask: { // args
      input: NexusGenInputs['GradeTemporaryTaskInput']; // GradeTemporaryTaskInput!
    }
    initializeStudents: { // args
      input: NexusGenInputs['InitializeStudentsInput']; // InitializeStudentsInput!
    }
    login: { // args
      input: NexusGenInputs['LoginInput']; // LoginInput!
    }
    markExempt: { // args
      input: NexusGenInputs['MarkExemptInput']; // MarkExemptInput!
    }
    markTemporaryTaskAbsent: { // args
      input: NexusGenInputs['MarkTemporaryTaskAbsentInput']; // MarkTemporaryTaskAbsentInput!
    }
    registerStudent: { // args
      input: NexusGenInputs['RegisterStudentInput']; // RegisterStudentInput!
    }
    registerTeacher: { // args
      input: NexusGenInputs['RegisterTeacherInput']; // RegisterTeacherInput!
    }
    removeAbsence: { // args
      input: NexusGenInputs['RemoveAbsenceInput']; // RemoveAbsenceInput!
    }
    removeAssignedSeat: { // args
      input: NexusGenInputs['RemoveAssignedSeatInput']; // RemoveAssignedSeatInput!
    }
    removeCourse: { // args
      input: NexusGenInputs['RemoveCourseInput']; // RemoveCourseInput!
    }
    removeLateness: { // args
      input: NexusGenInputs['RemoveLatenessInput']; // RemoveLatenessInput!
    }
    removeProtocol: { // args
      input: NexusGenInputs['RemoveProtocolInput']; // RemoveProtocolInput!
    }
    removeRubricEntry: { // args
      input: NexusGenInputs['RemoveRubricEntryInput']; // RemoveRubricEntryInput!
    }
    removeStudentBehavior: { // args
      input: NexusGenInputs['RemoveStudentBehaviorInput']; // RemoveStudentBehaviorInput!
    }
    removeStudentsFromCourse: { // args
      input: NexusGenInputs['RemoveStudentsFromCourseInput']; // RemoveStudentsFromCourseInput!
    }
    removeTextSection: { // args
      input: NexusGenInputs['RemoveTextSectionInput']; // RemoveTextSectionInput!
    }
    resetPassword: { // args
      input: NexusGenInputs['ResetPasswordInput']; // ResetPasswordInput!
    }
    respondToProtocol: { // args
      input: NexusGenInputs['RespondToProtocolInput']; // RespondToProtocolInput!
    }
    resubmitEssayFinalDraft: { // args
      input: NexusGenInputs['ResubmitEssayFinalDraftInput']; // ResubmitEssayFinalDraftInput!
    }
    returnArticleReview: { // args
      input: NexusGenInputs['ReturnArticleReviewInput']; // ReturnArticleReviewInput!
    }
    returnGradedEssay: { // args
      input: NexusGenInputs['ReturnGradedEssayInput']; // ReturnGradedEssayInput!
    }
    returnReadingGuide: { // args
      input: NexusGenInputs['ReturnReadingGuideInput']; // ReturnReadingGuideInput!
    }
    reviewReadingGuides: { // args
      input: NexusGenInputs['ReviewReadingGuidesInput']; // ReviewReadingGuidesInput!
    }
    setAnswerType: { // args
      input: NexusGenInputs['SetAnswerTypeInput']; // SetAnswerTypeInput!
    }
    setCurrentMarkingPeriod: { // args
      input: NexusGenInputs['SetCurrentMarkingPeriodInput']; // SetCurrentMarkingPeriodInput!
    }
    setOrganizer: { // args
      input: NexusGenInputs['SetOrganizerInput']; // SetOrganizerInput!
    }
    startProtocol: { // args
      input: NexusGenInputs['StartProtocolInput']; // StartProtocolInput!
    }
    startQuiz: { // args
      input: NexusGenInputs['StartQuizInput']; // StartQuizInput!
    }
    startReadingGuide: { // args
      input: NexusGenInputs['StartReadingGuideInput']; // StartReadingGuideInput!
    }
    studentSignIn: { // args
      input: NexusGenInputs['StudentSignInInput']; // StudentSignInInput!
    }
    submitArticleReview: { // args
      input: NexusGenInputs['SubmitArticleReviewInput']; // SubmitArticleReviewInput!
    }
    submitEssayFinalDraft: { // args
      input: NexusGenInputs['SubmitEssayFinalDraftInput']; // SubmitEssayFinalDraftInput!
    }
    submitReadingGuide: { // args
      input: NexusGenInputs['SubmitReadingGuideInput']; // SubmitReadingGuideInput!
    }
    switchToNewCourse: { // args
      input: NexusGenInputs['SwitchToNewCourseInput']; // SwitchToNewCourseInput!
    }
    toggleClassAssignmentsAllowed: { // args
      input: NexusGenInputs['ToggleClassAssignmentsAllowedInput']; // ToggleClassAssignmentsAllowedInput!
    }
    unAssignEssays: { // args
      input: NexusGenInputs['UnAssignEssaysInput']; // UnAssignEssaysInput!
    }
    unAssignQuizByQuizId: { // args
      input: NexusGenInputs['UnAssignQuizByQuizIdInput']; // UnAssignQuizByQuizIdInput!
    }
    updateAcademicOrganizer: { // args
      input: NexusGenInputs['UpdateAcademicOrganizerInput']; // UpdateAcademicOrganizerInput!
    }
    updateAdvancedOrganizer: { // args
      input: NexusGenInputs['UpdateAdvancedOrganizerInput']; // UpdateAdvancedOrganizerInput!
    }
    updateArticleReview: { // args
      input: NexusGenInputs['UpdateArticleReviewInput']; // UpdateArticleReviewInput!
    }
    updateCourseInfo: { // args
      input: NexusGenInputs['UpdateCourseInfoInput']; // UpdateCourseInfoInput!
    }
    updateDevelopingOrganizer: { // args
      input: NexusGenInputs['UpdateDevelopingOrganizerInput']; // UpdateDevelopingOrganizerInput!
    }
    UpdateDynamicLesson: { // args
      input: NexusGenInputs['UpdateDynamicLessonInput']; // UpdateDynamicLessonInput!
    }
    updateEssayByStudent: { // args
      input: NexusGenInputs['UpdateEssayByStudentInput']; // UpdateEssayByStudentInput!
    }
    updateEssayLateness: { // args
      input: NexusGenInputs['UpdateEssayLatenessInput']; // UpdateEssayLatenessInput!
    }
    updateEssaysByLesson: { // args
      input: NexusGenInputs['UpdateEssaysByLessonInput']; // UpdateEssaysByLessonInput!
    }
    updateEssaysByQuestion: { // args
      input: NexusGenInputs['UpdateEssaysByQuestionInput']; // UpdateEssaysByQuestionInput!
    }
    updateEssaysByStudentsAndSection: { // args
      input: NexusGenInputs['UpdateEssaysByStudentsAndSectionInput']; // UpdateEssaysByStudentsAndSectionInput!
    }
    updateGradingDraft: { // args
      input: NexusGenInputs['UpdateGradingDraftInput']; // UpdateGradingDraftInput!
    }
    updateHowCauseEffect: { // args
      input: NexusGenInputs['UpdateHowCauseEffectInput']; // UpdateHowCauseEffectInput!
    }
    updateLesson: { // args
      input: NexusGenInputs['UpdateLessonInput']; // UpdateLessonInput!
    }
    updateLessonProtocol: { // args
      input: NexusGenInputs['UpdateLessonProtocolInput']; // UpdateLessonProtocolInput!
    }
    updateParentContact: { // args
      input: NexusGenInputs['UpdateParentContactInput']; // UpdateParentContactInput!
    }
    updateProblemSolution: { // args
      input: NexusGenInputs['UpdateProblemSolutionInput']; // UpdateProblemSolutionInput!
    }
    updateReadingGuide: { // args
      input: NexusGenInputs['UpdateReadingGuideInput']; // UpdateReadingGuideInput!
    }
    updateResponsibilityPoints: { // args
      input: NexusGenInputs['UpdateResponsibilityPointsInput']; // UpdateResponsibilityPointsInput!
    }
    updateRubricEntry: { // args
      input: NexusGenInputs['UpdateRubricEntryInput']; // UpdateRubricEntryInput!
    }
    updateSchoolDay: { // args
      input: NexusGenInputs['UpdateSchoolDayInput']; // UpdateSchoolDayInput!
    }
    updateTemporaryTasks: { // args
      input: NexusGenInputs['UpdateTemporaryTasksInput']; // UpdateTemporaryTasksInput!
    }
    updateTextSection: { // args
      input: NexusGenInputs['UpdateTextSectionInput']; // UpdateTextSectionInput!
    }
    updateWhyCauseEffect: { // args
      input: NexusGenInputs['UpdateWhyCauseEffectInput']; // UpdateWhyCauseEffectInput!
    }
    updateWorkingDraft: { // args
      input: NexusGenInputs['UpdateWorkingDraftInput']; // UpdateWorkingDraftInput!
    }
  }
  Query: {
    findActiveProtocolByStudent: { // args
      input: NexusGenInputs['FindActiveProtocolByStudentInput']; // FindActiveProtocolByStudentInput!
    }
    findActiveProtocolsByCourse: { // args
      input: NexusGenInputs['FindActiveProtocolsByCourseInput']; // FindActiveProtocolsByCourseInput!
    }
    findArticleReviewById: { // args
      input: NexusGenInputs['FindArticleReviewByIdInput']; // FindArticleReviewByIdInput!
    }
    findArticleReviewsByCourse: { // args
      input: NexusGenInputs['FindArticleReviewsByCourseInput']; // FindArticleReviewsByCourseInput!
    }
    findArticleReviewsByStudent: { // args
      input: NexusGenInputs['FindArticleReviewsByStudentInput']; // FindArticleReviewsByStudentInput!
    }
    findAssignmentById: { // args
      input: NexusGenInputs['FindAssignmentByIdInput']; // FindAssignmentByIdInput!
    }
    findAssignmentByStudentId: { // args
      input: NexusGenInputs['FindAssignmentByStudentIdInput']; // FindAssignmentByStudentIdInput!
    }
    findAssignmentsByCourseId: { // args
      input: NexusGenInputs['FindAssignmentsByCourseIdInput']; // FindAssignmentsByCourseIdInput!
    }
    findAssignmentsToGrade: { // args
      input: NexusGenInputs['FindAssignmentsToGradeInput']; // FindAssignmentsToGradeInput!
    }
    findChaptersByTextId: { // args
      input: NexusGenInputs['FindChaptersByTextIdInput']; // FindChaptersByTextIdInput!
    }
    findChaptersInText: { // args
      input: NexusGenInputs['FindChaptersInTextInput']; // FindChaptersInTextInput!
    }
    findChapterTitle: { // args
      input: NexusGenInputs['FindChapterTitleInput']; // FindChapterTitleInput!
    }
    findCompletedEssaysByStudentId: { // args
      input: NexusGenInputs['FindCompletedEssaysByStudentIdInput']; // FindCompletedEssaysByStudentIdInput!
    }
    findContactsByStudentId: { // args
      input: NexusGenInputs['FindContactsByStudentIdInput']; // FindContactsByStudentIdInput!
    }
    findCourseById: { // args
      input: NexusGenInputs['FindCourseByIdInput']; // FindCourseByIdInput!
    }
    findCourseInfoByCourseId: { // args
      input: NexusGenInputs['FindCourseInfoByCourseIdInput']; // FindCourseInfoByCourseIdInput!
    }
    findCoursesById: { // args
      input: NexusGenInputs['FindCoursesByIdInput']; // FindCoursesByIdInput!
    }
    findEssayById: { // args
      input: NexusGenInputs['FindEssayByIdInput']; // FindEssayByIdInput!
    }
    findEssayByStudentIdAndLessonId: { // args
      input: NexusGenInputs['FindEssayByStudentIdAndLessonIdInput']; // FindEssayByStudentIdAndLessonIdInput!
    }
    findEssayQuestionById: { // args
      input: NexusGenInputs['FindEssayQuestionByIdInput']; // FindEssayQuestionByIdInput!
    }
    findEssaysByAssociatedLessonId: { // args
      input: NexusGenInputs['FindEssaysByAssociatedLessonIdInput']; // FindEssaysByAssociatedLessonIdInput!
    }
    findEssaysByAssociatedLessonIdAndCourseId: { // args
      input: NexusGenInputs['FindEssaysByAssociatedLessonIdAndCourseIdInput']; // FindEssaysByAssociatedLessonIdAndCourseIdInput!
    }
    findEssaysByUserNameAndMarkingPeriod: { // args
      input: NexusGenInputs['FindEssaysByUserNameAndMarkingPeriodInput']; // FindEssaysByUserNameAndMarkingPeriodInput!
    }
    findEssaysToCompleteByStudentId: { // args
      input: NexusGenInputs['FindEssaysToCompleteByStudentIdInput']; // FindEssaysToCompleteByStudentIdInput!
    }
    findEssaysToGradeById: { // args
      input: NexusGenInputs['FindEssaysToGradeByIdInput']; // FindEssaysToGradeByIdInput!
    }
    findEssentialQuestionsByAssociatedTextSectionIds: { // args
      input: NexusGenInputs['FindEssentialQuestionsByAssociatedTextSectionIdsInput']; // FindEssentialQuestionsByAssociatedTextSectionIdsInput!
    }
    findLessonByCourse: { // args
      input: NexusGenInputs['FindLessonByCourseInput']; // FindLessonByCourseInput!
    }
    findLessonByCourseAndDate: { // args
      input: NexusGenInputs['FindLessonByCourseAndDateInput']; // FindLessonByCourseAndDateInput!
    }
    findLessonById: { // args
      input: NexusGenInputs['FindLessonByIdInput']; // FindLessonByIdInput!
    }
    findLessonsByAssignedDate: { // args
      input: NexusGenInputs['FindLessonsByAssignedDateInput']; // FindLessonsByAssignedDateInput!
    }
    findLessonsByUnit: { // args
      input: NexusGenInputs['FindLessonsByUnitInput']; // FindLessonsByUnitInput!
    }
    findLessonStatus: { // args
      input: NexusGenInputs['FindLessonStatusInput']; // FindLessonStatusInput!
    }
    findParentContactsByTeacherId: { // args
      input: NexusGenInputs['FindParentContactsByTeacherIdInput']; // FindParentContactsByTeacherIdInput!
    }
    findQuizById: { // args
      input: NexusGenInputs['FindQuizByIdInput']; // FindQuizByIdInput!
    }
    findQuizQuestionsByQuizzableSections: { // args
      input: NexusGenInputs['FindQuizQuestionsByQuizzableSectionsInput']; // FindQuizQuestionsByQuizzableSectionsInput!
    }
    findQuizQuestionsByTextSectionId: { // args
      input: NexusGenInputs['FindQuizQuestionsByTextSectionIdInput']; // FindQuizQuestionsByTextSectionIdInput!
    }
    findQuizzesByStudentId: { // args
      input: NexusGenInputs['FindQuizzesByStudentIdInput']; // FindQuizzesByStudentIdInput!
    }
    findQuizzesForCourseByAssignedDate: { // args
      input: NexusGenInputs['FindQuizzesForCourseByAssignedDateInput']; // FindQuizzesForCourseByAssignedDateInput!
    }
    findReadingGuideById: { // args
      input: NexusGenInputs['FindReadingGuideByIdInput']; // FindReadingGuideByIdInput!
    }
    findReadingGuideByUserIdAndReadingSection: { // args
      input: NexusGenInputs['FindReadingGuideByUserIdAndReadingSectionInput']; // FindReadingGuideByUserIdAndReadingSectionInput!
    }
    findReadingGuidesByAssociatedLessonAndCourseId: { // args
      input: NexusGenInputs['FindReadingGuidesByAssociatedLessonAndCourseIdInput']; // FindReadingGuidesByAssociatedLessonAndCourseIdInput!
    }
    findReadingGuidesByCourseIdAndAssignedDate: { // args
      input: NexusGenInputs['FindReadingGuidesByCourseIdAndAssignedDateInput']; // FindReadingGuidesByCourseIdAndAssignedDateInput!
    }
    findReadingGuidesByMarkingPeriod: { // args
      input: NexusGenInputs['FindReadingGuidesByMarkingPeriodInput']; // FindReadingGuidesByMarkingPeriodInput!
    }
    findReadingGuidesByReadingSection: { // args
      input: NexusGenInputs['FindReadingGuidesByReadingSectionInput']; // FindReadingGuidesByReadingSectionInput!
    }
    findReadingGuidesToCompleteByStudentId: { // args
      input: NexusGenInputs['FindReadingGuidesToCompleteByStudentIdInput']; // FindReadingGuidesToCompleteByStudentIdInput!
    }
    findResponsibilityPointsByCourse: { // args
      input: NexusGenInputs['FindResponsibilityPointsByCourseInput']; // FindResponsibilityPointsByCourseInput!
    }
    findResponsibilityPointsByStudentId: { // args
      input: NexusGenInputs['FindResponsibilityPointsByStudentIdInput']; // FindResponsibilityPointsByStudentIdInput!
    }
    findRubricEntriesByCategory: { // args
      input: NexusGenInputs['FindRubricEntriesByCategoryInput']; // FindRubricEntriesByCategoryInput!
    }
    findSchoolDayByDate: { // args
      input: NexusGenInputs['FindSchoolDayByDateInput']; // FindSchoolDayByDateInput!
    }
    findStudentById: { // args
      input: NexusGenInputs['FindStudentByIdInput']; // FindStudentByIdInput!
    }
    findStudentQuestions: { // args
      input: NexusGenInputs['FindStudentQuestionsInput']; // FindStudentQuestionsInput!
    }
    findStudentsByCourse: { // args
      input: NexusGenInputs['FindStudentsByCourseInput']; // FindStudentsByCourseInput!
    }
    findStudentsById: { // args
      input: NexusGenInputs['FindStudentsByIdInput']; // FindStudentsByIdInput!
    }
    findTemporaryTasks: { // args
      input: NexusGenInputs['FindTemporaryTasksInput']; // FindTemporaryTasksInput!
    }
    findTemporaryTasksByStudentId: { // args
      input: NexusGenInputs['FindTemporaryTasksByStudentIdInput']; // FindTemporaryTasksByStudentIdInput!
    }
    findTextByTitle: { // args
      input: NexusGenInputs['FindTextByTitleInput']; // FindTextByTitleInput!
    }
    findTextSectionById: { // args
      input: NexusGenInputs['FindTextSectionByIdInput']; // FindTextSectionByIdInput!
    }
    findTextSectionsByChapter: { // args
      input: NexusGenInputs['FindTextSectionsByChapterInput']; // FindTextSectionsByChapterInput!
    }
    findTextSectionsById: { // args
      input: NexusGenInputs['FindTextSectionsByIdInput']; // FindTextSectionsByIdInput!
    }
    findUserData: { // args
      input: NexusGenInputs['FindUserDataInput']; // FindUserDataInput!
    }
    findWritingMetrics: { // args
      input: NexusGenInputs['FindWritingMetricsInput']; // FindWritingMetricsInput!
    }
    passwordCheck: { // args
      input: NexusGenInputs['PasswordCheckInput']; // PasswordCheckInput!
    }
    removeSchoolDay: { // args
      input: NexusGenInputs['RemoveSchoolDayInput']; // RemoveSchoolDayInput!
    }
    removeSubmittedEssayFinalDraft: { // args
      input: NexusGenInputs['RemoveSubmittedEssayFinalDraftInput']; // RemoveSubmittedEssayFinalDraftInput!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
  AnswerTypes: "HowCauseEffectAnswerType" | "ProblemSolutionAnswerType" | "WhyCauseEffectAnswerType"
  Organizers: "AcademicOrganizer" | "AdvancedOrganizer" | "DevelopingOrganizer"
  Assignment: "Essay" | "Quiz" | "ReadingGuide"
  ProgressMetrics: "ComprehensionMetrics" | "WritingMetrics"
  Question: "EssayQuestion" | "EssentialQuestion" | "QuizQuestion"
  User: "Student" | "Teacher"
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AcademicOrganizer" | "AcademicSentenceStructure" | "ActivateQuizPayload" | "AddAssociatedCourseIdPayload" | "AddCourseToTeacherPayload" | "AddDeskToAssignedSeatsPayload" | "AddFieldsToReadingGuidePayload" | "AddForcedFinishedToAllQuizzesPayload" | "AddIEPInfoPayload" | "AddNewChapterPayload" | "AddNewTextPayload" | "AddStudentsToCoursePayload" | "AddUserEmailPayload" | "AddVocabWordPayload" | "AdvancedOrganizer" | "AdvancedSentenceStructure" | "AnswerList" | "ArticleReview" | "AssessIndividualProtocolsPayload" | "AssessStudentProtocolPayload" | "AssignEssaysPayload" | "AssignQuizzesByStudentIdsAndDatePayload" | "AssignReadingGuidesPayload" | "AssignSeatsPayload" | "BuildRubricEntryPayload" | "ChangeAllQuizzesToSecondMarkingPeriodPayload" | "ChangePasswordPayload" | "Chapter" | "ComprehensionMetrics" | "ContactInfo" | "ControlCoolDownPayload" | "ControlWarmUpPayload" | "Course" | "CourseInfo" | "CreateAbsencePayload" | "CreateArticleReviewsPayload" | "CreateCourseInfoPayload" | "CreateCoursePayload" | "CreateEssayPayload" | "CreateEssayQuestionPayload" | "CreateEssentialQuestionPayload" | "CreateExcusedLatenessPayload" | "CreateLessonPayload" | "CreateParentContactPayload" | "CreateProtocolPayload" | "CreateQuizQuestionPayload" | "CreateQuizzesByCoursePayload" | "CreateReadingGuidePayload" | "CreateResponsibilityPointsPayload" | "CreateSchoolDayPayload" | "CreateSchoolDayTrackerPayload" | "CreateSignInSheetsPayload" | "CreateStudentBehaviorPayload" | "CreateStudentQuestionPayload" | "CreateStudentQuestionsContainerPayload" | "CreateTemporaryTasksPayload" | "CreateTextSectionPayload" | "CreateUnexcusedLatenessPayload" | "CreateUnitPayload" | "CreateWritingMetricsPayload" | "DeleteAllAssignmentsPayload" | "DeleteAllParentContactsPayload" | "DeleteAllProtocolsPayload" | "DeleteAllSchoolDaysPayload" | "DeleteAllStudentDataPayload" | "DeleteAllTemporaryTasksPayload" | "DeleteReviewsPayload" | "DeleteTemporaryTasksPayload" | "DevelopingOrganizer" | "DevelopingSentenceStructure" | "EmergencyModificationPayload" | "Essay" | "EssayQuestion" | "EssentialQuestion" | "ExcusedLateness" | "ExemptArticleReviewPayload" | "FinalDraftContainer" | "FindActiveProtocolByStudentPayload" | "FindActiveProtocolsByCoursePayload" | "FindAllCourseTitlesPayload" | "FindAllStudentsPayload" | "FindAllUsersPayload" | "FindArticleReviewByIdPayload" | "FindArticleReviewsByCoursePayload" | "FindArticleReviewsByStudentPayload" | "FindAssignmentByIdPayload" | "FindAssignmentByStudentIdPayload" | "FindAssignmentsByCourseIdPayload" | "FindAssignmentsToGradePayload" | "FindChapterTitlePayload" | "FindChaptersByTextIdPayload" | "FindChaptersInTextPayload" | "FindCompletedEssaysByStudentIdPayload" | "FindContactsByStudentIdPayload" | "FindCourseByIdPayload" | "FindCourseInfoByCourseIdPayload" | "FindCoursesByIdPayload" | "FindCurrentMarkingPeriodPayload" | "FindEssayByIdPayload" | "FindEssayByStudentIdAndLessonIdPayload" | "FindEssayQuestionByIdPayload" | "FindEssaysByAssociatedLessonIdAndCourseIdPayload" | "FindEssaysByAssociatedLessonIdPayload" | "FindEssaysByUserNameAndMarkingPeriodPayload" | "FindEssaysToCompleteByStudentIdPayload" | "FindEssaysToGradeByIdPayload" | "FindEssentialQuestionsByAssociatedTextSectionIdsPayload" | "FindLessonByCourseAndDatePayload" | "FindLessonByCoursePayload" | "FindLessonByIdPayload" | "FindLessonStatusPayload" | "FindLessonsByAssignedDatePayload" | "FindLessonsByUnitPayload" | "FindParentContactsByTeacherIdPayload" | "FindQuizByIdPayload" | "FindQuizQuestionsByQuizzableSectionsPayload" | "FindQuizQuestionsByTextSectionIdPayload" | "FindQuizzesByStudentIdPayload" | "FindQuizzesForCourseByAssignedDatePayload" | "FindReadingGuideByIdPayload" | "FindReadingGuideByUserIdAndReadingSectionPayload" | "FindReadingGuidesByAssociatedLessonAndCourseIdPayload" | "FindReadingGuidesByCourseIdAndAssignedDatePayload" | "FindReadingGuidesByMarkingPeriodPayload" | "FindReadingGuidesByReadingSectionPayload" | "FindReadingGuidesToCompleteByStudentIdPayload" | "FindResponsibilityPointsByCoursePayload" | "FindResponsibilityPointsByStudentIdPayload" | "FindRubricEntriesByCategoryPayload" | "FindRubricEntriesPayload" | "FindSchoolDayByDatePayload" | "FindSchoolDayPayload" | "FindStudentByIdPayload" | "FindStudentQuestionsPayload" | "FindStudentsByCoursePayload" | "FindStudentsByIdPayload" | "FindTemporaryTasksByStudentIdPayload" | "FindTemporaryTasksPayload" | "FindTextByTitlePayload" | "FindTextSectionByIdPayload" | "FindTextSectionsByChapterPayload" | "FindTextSectionsByIdPayload" | "FindTextsPayload" | "FindUnitsPayload" | "FindUserDataPayload" | "FindWritingMetricsPayload" | "FinishProtocolPayload" | "FinishQuizPayload" | "ForceFinishQuizPayload" | "GradeArticleReviewPayload" | "GradeTemporaryTaskPayload" | "HowCauseEffectAnswerType" | "HowCauseEffectMetrics" | "HowProblemSolutionMetrics" | "InitializeStudentsPayload" | "Lesson" | "LessonTextSections" | "LoginPayload" | "MarkAllProtocolsInactivePayload" | "MarkExemptPayload" | "MarkTemporaryTaskAbsentPayload" | "MarkingPeriod" | "ModifyCourseInfoPayload" | "Mutation" | "OverallWritingMetric" | "PageNumbers" | "ParentContact" | "PasswordCheckPayload" | "ProblemSolutionAnswerType" | "Protocol" | "Query" | "QuestionPartsContainer" | "Quiz" | "QuizQuestion" | "ReadingGuide" | "ReadingGuideFinalContainer" | "Readings" | "RegisterStudentPayload" | "RegisterTeacherPayload" | "RemoveAbsencePayload" | "RemoveAssignedSeatPayload" | "RemoveCoursePayload" | "RemoveLatenessPayload" | "RemoveProtocolPayload" | "RemoveRubricEntryPayload" | "RemoveSchoolDayPayload" | "RemoveStudentBehaviorPayload" | "RemoveStudentsFromCoursePayload" | "RemoveSubmittedEssayFinalDraftPayload" | "RemoveTextSectionPayload" | "ResetPasswordPayload" | "RespondToProtocolPayload" | "ResponsibilityPoints" | "ResubmitEssayFinalDraftPayload" | "ReturnArticleReviewPayload" | "ReturnGradedEssayPayload" | "ReturnReadingGuidePayload" | "ReviewReadingGuidesPayload" | "RubricEntry" | "SGO" | "SchoolDay" | "SchoolDayModifierPayload" | "SchoolDayTracker" | "Score" | "SetAnswerTypePayload" | "SetCurrentMarkingPeriodPayload" | "SetOrganizerPayload" | "StartProtocolPayload" | "StartQuizPayload" | "StartReadingGuidePayload" | "Student" | "StudentAbsence" | "StudentBehavior" | "StudentInformation" | "StudentQuestion" | "StudentQuestions" | "StudentSeat" | "StudentSignInPayload" | "StudentSignInSheet" | "SubmitArticleReviewPayload" | "SubmitEssayFinalDraftPayload" | "SubmitReadingGuidePayload" | "SubmittedFinalDraft" | "SwitchToNewCoursePayload" | "Teacher" | "TemporaryTask" | "Text" | "TextSection" | "TextSectionProtocols" | "TextSectionQuestions" | "TextSectionVocab" | "ToggleClassAssignmentsAllowedPayload" | "Topic" | "UnAssignEssaysPayload" | "UnAssignQuizByQuizIdPayload" | "UnexcusedLateness" | "Unit" | "UpdateAcademicOrganizerPayload" | "UpdateAdvancedOrganizerPayload" | "UpdateArticleReviewPayload" | "UpdateCourseInfoPayload" | "UpdateDevelopingOrganizerPayload" | "UpdateDynamicLessonPayload" | "UpdateEssayByStudentPayload" | "UpdateEssayLatenessPayload" | "UpdateEssaysByLessonPayload" | "UpdateEssaysByQuestionPayload" | "UpdateEssaysByStudentsAndSectionPayload" | "UpdateGradingDraftPayload" | "UpdateHowCauseEffectPayload" | "UpdateLessonPayload" | "UpdateParentContactPayload" | "UpdateProblemSolutionPayload" | "UpdateProtocolPayload" | "UpdateReadingGuidePayload" | "UpdateResponsibilityPointsPayload" | "UpdateRubricEntryPayload" | "UpdateSchoolDayPayload" | "UpdateTemporaryTasksPayload" | "UpdateTextSectionPayload" | "UpdateVocabPayload" | "UpdateWhyCauseEffectPayload" | "UpdateWorkingDraftPayload" | "WhyCauseEffectAnswerType" | "WhyCauseEffectMetrics" | "WorkingDraft" | "WritingMetrics";

export type NexusGenInputNames = "AcademicSentenceStructureInput" | "ActivateQuizInput" | "AddCourseToTeacherInput" | "AddDeskToAssignedSeatsInput" | "AddNewChapterInput" | "AddNewTextInput" | "AddStudentsToCourseInput" | "AddUserEmailInput" | "AddVocabWordInput" | "AdvancedSentenceStructureInput" | "AnswerListInput" | "AssessIndividualProtocolsInput" | "AssessStudentProtocolInput" | "AssignEssaysInput" | "AssignQuizzesByStudentIdsAndDateInput" | "AssignReadingGuidesInput" | "AssignSeatsInput" | "BuildRubricEntryInput" | "ChangePasswordInput" | "ChangeVocabWordInput" | "ControlCoolDownInput" | "ControlWarmUpInput" | "CourseInput" | "CreateAbsenceInput" | "CreateArticleReviewsInput" | "CreateCourseInfoInput" | "CreateCourseInput" | "CreateEssayInput" | "CreateEssayQuestionInput" | "CreateEssentialQuestionInput" | "CreateExcusedLatenessInput" | "CreateLessonInput" | "CreateParentContactInput" | "CreateProtocolInput" | "CreateQuizQuestionInput" | "CreateQuizzesByCourseInput" | "CreateReadingGuideInput" | "CreateResponsibilityPointsInput" | "CreateSchoolDayInput" | "CreateSignInSheetsInput" | "CreateStudentBehaviorInput" | "CreateStudentQuestionInput" | "CreateStudentQuestionsContainerInput" | "CreateTemporaryTasksInput" | "CreateTextSectionInput" | "CreateUnexcusedLatenessInput" | "CreateUnitInput" | "DeleteReviewsInput" | "DeleteTemporaryTasksInput" | "DevelopingOrganizerInput" | "DevelopingSentenceStructureInput" | "ExemptArticleReviewInput" | "FindActiveProtocolByStudentInput" | "FindActiveProtocolsByCourseInput" | "FindArticleReviewByIdInput" | "FindArticleReviewsByCourseInput" | "FindArticleReviewsByStudentInput" | "FindAssignmentByIdInput" | "FindAssignmentByStudentIdInput" | "FindAssignmentsByCourseIdInput" | "FindAssignmentsToGradeInput" | "FindChapterTitleInput" | "FindChaptersByTextIdInput" | "FindChaptersInTextInput" | "FindCompletedEssaysByStudentIdInput" | "FindContactsByStudentIdInput" | "FindCourseByIdInput" | "FindCourseInfoByCourseIdInput" | "FindCoursesByIdInput" | "FindEssayByIdInput" | "FindEssayByStudentIdAndLessonIdInput" | "FindEssayQuestionByIdInput" | "FindEssaysByAssociatedLessonIdAndCourseIdInput" | "FindEssaysByAssociatedLessonIdInput" | "FindEssaysByUserNameAndMarkingPeriodInput" | "FindEssaysToCompleteByStudentIdInput" | "FindEssaysToGradeByIdInput" | "FindEssentialQuestionsByAssociatedTextSectionIdsInput" | "FindLessonByCourseAndDateInput" | "FindLessonByCourseInput" | "FindLessonByIdInput" | "FindLessonStatusInput" | "FindLessonsByAssignedDateInput" | "FindLessonsByUnitInput" | "FindParentContactsByTeacherIdInput" | "FindQuizByIdInput" | "FindQuizQuestionsByQuizzableSectionsInput" | "FindQuizQuestionsByTextSectionIdInput" | "FindQuizzesByStudentIdInput" | "FindQuizzesForCourseByAssignedDateInput" | "FindReadingGuideByIdInput" | "FindReadingGuideByUserIdAndReadingSectionInput" | "FindReadingGuidesByAssociatedLessonAndCourseIdInput" | "FindReadingGuidesByCourseIdAndAssignedDateInput" | "FindReadingGuidesByMarkingPeriodInput" | "FindReadingGuidesByReadingSectionInput" | "FindReadingGuidesToCompleteByStudentIdInput" | "FindResponsibilityPointsByCourseInput" | "FindResponsibilityPointsByStudentIdInput" | "FindRubricEntriesByCategoryInput" | "FindSchoolDayByDateInput" | "FindStudentByIdInput" | "FindStudentQuestionsInput" | "FindStudentsByCourseInput" | "FindStudentsByIdInput" | "FindTemporaryTasksByStudentIdInput" | "FindTemporaryTasksInput" | "FindTextByTitleInput" | "FindTextSectionByIdInput" | "FindTextSectionsByChapterInput" | "FindTextSectionsByIdInput" | "FindUserDataInput" | "FindWritingMetricsInput" | "FinishProtocolInput" | "FinishQuizInput" | "ForceFinishQuizInput" | "GradeArticleReviewInput" | "GradeTemporaryTaskInput" | "HasAssigner" | "HasOwnerInput" | "InitializeStudentsInput" | "LessonTextSectionsInput" | "LoginInput" | "MarkExemptInput" | "MarkTemporaryTaskAbsentInput" | "PageNumbersInput" | "PasswordCheckInput" | "QuestionPartsContainerInput" | "ReadingsInput" | "RegisterStudentInput" | "RegisterTeacherInput" | "RemoveAbsenceInput" | "RemoveAssignedSeatInput" | "RemoveCourseInput" | "RemoveLatenessInput" | "RemoveProtocolInput" | "RemoveRubricEntryInput" | "RemoveSchoolDayInput" | "RemoveStudentBehaviorInput" | "RemoveStudentsFromCourseInput" | "RemoveSubmittedEssayFinalDraftInput" | "RemoveTextSectionInput" | "ResetPasswordInput" | "RespondToProtocolInput" | "ResubmitEssayFinalDraftInput" | "ReturnArticleReviewInput" | "ReturnGradedEssayInput" | "ReturnReadingGuideInput" | "ReturnedRubricEntryInput" | "ReviewReadingGuidesInput" | "RubricEntryInput" | "SetAnswerTypeInput" | "SetCurrentMarkingPeriodInput" | "SetOrganizerInput" | "StartProtocolInput" | "StartQuizInput" | "StartReadingGuideInput" | "StudentSeatInput" | "StudentSignInInput" | "SubmitArticleReviewInput" | "SubmitEssayFinalDraftInput" | "SubmitReadingGuideInput" | "SubmittedFinalDraftsInput" | "SwitchToNewCourseInput" | "TextChapterInput" | "TextInput" | "TextSectionProtocolsInput" | "TextSectionQuestionsInput" | "TextSectionVocabInput" | "ToggleClassAssignmentsAllowedInput" | "TopicInput" | "TopicTypeInput" | "UnAssignEssaysInput" | "UnAssignQuizByQuizIdInput" | "UnitInput" | "UpdateAcademicOrganizerInput" | "UpdateAdvancedOrganizerInput" | "UpdateArticleReviewInput" | "UpdateCourseInfoInput" | "UpdateDevelopingOrganizerInput" | "UpdateDynamicLessonInput" | "UpdateEssayByStudentInput" | "UpdateEssayLatenessInput" | "UpdateEssaysByLessonInput" | "UpdateEssaysByQuestionInput" | "UpdateEssaysByStudentsAndSectionInput" | "UpdateGradingDraftInput" | "UpdateHowCauseEffectInput" | "UpdateLessonInput" | "UpdateLessonProtocolInput" | "UpdateParentContactInput" | "UpdateProblemSolutionInput" | "UpdateReadingGuideInput" | "UpdateResponsibilityPointsInput" | "UpdateRubricEntryInput" | "UpdateSchoolDayInput" | "UpdateTemporaryTasksInput" | "UpdateTextSectionInput" | "UpdateWhyCauseEffectInput" | "UpdateWorkingDraftInput";

export type NexusGenEnumNames = "AcademicOutcomeTypes" | "BasicQuestionEnum" | "BehaviorEnum" | "ContactTypeEnum" | "CourseMaxSizeEnum" | "CourseTypeEnum" | "DiscussionTypesEnum" | "DynamicLessonEnums" | "GradeTypeEnum" | "InformationStructureEnum" | "LessonTypeEnum" | "MarkingPeriodEnum" | "NounTypeEnum" | "ProtocolActivityTypes" | "ProtocolAssessmentEnum" | "QuestionTypeEnum" | "QuestionUsageTypeEnum" | "QuestionWordEnum" | "QuizQuestionDifficultyLevelEnum" | "QuizQuestionTypeEnum" | "ReadingGuideReviewOptionsEnum" | "RubricSectionEnum" | "SchoolDayLengthEnum" | "SchoolDayType" | "StudentCohortEnum" | "TimeOfDay" | "TitleEnum" | "VerbTypeEnum" | "WritingLevelEnum";

export type NexusGenInterfaceNames = "Assignment" | "ProgressMetrics" | "Question" | "User";

export type NexusGenScalarNames = "Boolean" | "Date" | "DateTime" | "Float" | "ID" | "Int" | "JSON" | "String" | "Time";

export type NexusGenUnionNames = "AnswerTypes" | "Organizers";

export interface NexusGenTypes {
  context: t.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}